{"version":3,"sources":["components/Navbar.js","components/pages/WelcomePage.js","components/Square.js","components/boards/TicTacToeBoard.js","components/modals/HintColorKey.js","components/modals/TicTacToeHelpModal.js","components/modals/TicTacToeSettingsModal.js","components/modals/FifteenGameHelpModal.js","components/modals/FifteenGameSettingsModal.js","components/Panel.js","components/games/TicTacToeGame.js","components/NumberCard.js","components/boards/FifteenBoard.js","components/games/FifteenGame.js","components/pages/MagicSquares.js","components/pages/StrategyPage.js","theme.js","App.js","serviceWorker.js","index.js","images/nsgLogo100px.png","logo.svg"],"names":["useStyles","makeStyles","theme","root","display","flexDirection","alignItems","justifyContent","height","width","margin","fontSize","title","color","marginLeft","fontWeight","textAlign","menuListItem","icon","marginRight","marginTop","logo","paddingTop","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","Navbar","props","classes","pageTitle","Box","className","Typography","variant","noWrap","Menu","SimpleMenu","React","useState","anchorEl","setAnchorEl","handleClose","newPageTitle","onClick","event","currentTarget","aria-controls","aria-haspopup","id","keepMounted","open","Boolean","onClose","MenuItem","component","RouterLink","to","Link","backgroundColor","paper","paddingLeft","paragraph","padding","paddingBottom","buttonArea","marginBottom","button","palette","primary","dark","WelcomePage","Paper","elevation","gutterBottom","Button","href","square","boxSizing","iconX","iconO","unknown","noColor","claimed","unclaimed","win","draw","lose","immediateWin","doubleAttackCreatingMove","forcedWinCreatingMove","urgentDefensiveMove","unavoidableDefeat","gameLosingMove","drawingMove","Square","symbol","handleClick","console","error","board","flexWrap","alignContent","Board","handleSquareClick","boardSymbols","boardColors","newSquare","key","concat","log","border","keyItem","flexGrow","colorTile","borderRadius","HintColorKey","Grid","container","spacing","item","xs","lineHeight","buttonIcon","modal","background","boxShadow","shadows","maxHeight","maxWidth","heading","marginBlockEnd","marginBlockStart","body","HowToPlayModal","setOpen","Modal","aria-labelledby","aria-describedby","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","switchBox","switchLabel","SettingsModal","showMoves","showCommentary","toggleShowMovesSwitch","toggleShowCommentarySwitch","showMovesSwitch","Fragment","Switch","checked","onChange","name","inputProps","DialogContentText","showCommentarySwitch","Dialog","DialogContent","DialogActions","Container","infoArea","overflow","textOverflow","gameStatus","commentary","paddingRight","Panel","gameType","status","handleUndoButtonClick","handleNewGameButtonClick","undoButton","newGameButton","helpButton","settingsButton","boardArea","panelArea","flex","TicTacToeGame","history","setHistory","setShowMoves","setShowCommentary","data","Array","fill","squaresClaimedByPlayer","forEach","squareId","getBoardSymbols","wins","highlightedSquares","gameOver","player","moveList","linesList","lineCountsFor","count","line","push","linesWithThree","squaresInLine","highlightWins","myTurn","hints","claimedSquaresList","i","includes","claimedSquares","immediateWins","winningSquare","immediatelyLosingMoves","emptySquares","testSquare","thereIsAnImmediateWin","losingSquare","doubleAttackCreatingMoves","keyAttackingMove","doubleAttackGrantingMoves","thereIsADoubleAttackCreatingMove","distantForcedWinCreatingMoves","unknownSquares","thereIsADistantForcedWinCreatingMove","getBoardHints","getBoardColors","squareClicked","squareIsEmpty","blockedLines","length","message","answer","gameLosingMoves","thisIsADoubleAttack","thereIsAnUrgentDefensiveMove","getCommentary","shortenedHistory","slice","empty","emptySquaresList","value","index","winningMoves","linesWithOnlyTwo","urgentDefensiveMoves","other","thisMoveIsForced","isForced","forcingMoves","distantForcedWinCreatingMovesList","forcingMove","hypotheticalHistory","thereIsAForcedWin","filter","lines","row","Math","floor","lineId","squareIds","numCard","playerOne","playerTwo","NumberCard","num","row1","row2","boardStatus","handleCardClick","newNumberCard","FifteenGame","playAgainstBot","setPlayAgainstBot","botMovesFirst","setBotMovesFirst","numberClaimed","turnNumber","getBoardStatus","cardClicked","cardClaimed","gameDrawn","togglePlayAgainstBotSwitch","toggleBotMovesFirstSwitch","myMoves","filterMoves","sumsOfTwo","move","moveSet","sums","j","sum","MagicSquares","StrategyPage","createMuiTheme","light","main","danger","shape","responsiveFontSizes","minHeight","minWidth","footer","footerText","App","exact","path","Footer","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.33b19871.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Link as RouterLink,\r\n} from \"react-router-dom\";\r\n\r\n\r\n// My Components\r\nimport logo from \"../images/nsgLogo100px.png\";\r\n\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Link from '@material-ui/core/Link';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    // modal: {\r\n    //     display: 'flex',\r\n    //     alignItems: 'center',\r\n    //     justifyContent: 'center',\r\n    // },\r\n    // paper: {\r\n    //     backgroundColor: theme.palette.background.paper,\r\n    //     border: '2px solid #000',\r\n    //     boxShadow: theme.shadows[5],\r\n    //     padding: theme.spacing(2, 4, 3),\r\n    // },\r\n\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        height: '5%',\r\n        width: '100%',\r\n        margin: '0',\r\n        fontSize: 'min(max(1rem, 4vmin), 30px)',\r\n\r\n    },\r\n    title: {\r\n        // border: 'solid red 1px',\r\n        color: 'navy',\r\n        marginLeft: '1rem',\r\n        fontSize: 'inherit',\r\n        fontWeight: 'bold',\r\n        textAlign: 'center'\r\n    },\r\n    menuListItem: {\r\n        fontSize: 'min(max(0.7rem, 3vmin), 24px)',\r\n    },\r\n    icon: {\r\n        color: 'navy',\r\n        // fontSize: 'larger',\r\n        fontSize: '2rem',\r\n        marginRight: '1rem',\r\n        marginTop: '0.5vmin'\r\n    },\r\n\r\n\r\n\r\n    logo: {\r\n        // border: 'solid red 1px',\r\n        marginLeft: '1rem',\r\n        width: '7%',\r\n        paddingTop: '7%',\r\n\r\n        backgroundImage: `\r\n            url(${logo})  \r\n        `,\r\n        backgroundPosition: 'center bottom',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: '90%',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n\r\n    },\r\n}));\r\n\r\n\r\nexport default function Navbar(props) {\r\n    const classes = useStyles();\r\n    const pageTitle = props.pageTitle;\r\n\r\n    return (\r\n        <Box className={classes.root} >\r\n            <Box className={classes.logo}  >\r\n            </Box>\r\n\r\n            \r\n            <Typography className={classes.title} variant=\"h6\" noWrap >\r\n                {pageTitle}\r\n            </Typography>\r\n              \r\n            <Box className={classes.Menu}  >\r\n                <SimpleMenu />\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\n// Adapted from MUI Docs\r\nfunction SimpleMenu(props) {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    \r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = (newPageTitle) => {\r\n        // alert('closing menu');\r\n        // alert(`You clicked: ${newPageTitle}`);\r\n        // const newPageTitle = \r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <MenuIcon \r\n                className={classes.icon}\r\n                onClick={handleClick}\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\"\r\n            />\r\n            \r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n                // anchorOrigin={{\r\n                //     vertical: 'bottom',\r\n                //     horizontal: 'right',\r\n                // }}\r\n                // transformOrigin={{\r\n                //     vertical: 'top',\r\n                //     horizontal: 'right',\r\n                // }}\r\n            >\r\n                <MenuItem\r\n                    component={RouterLink}\r\n                    to='/'\r\n                    onClick={handleClose}\r\n                    className={classes.menuListItem}\r\n                >\r\n                    Welcome\r\n                </MenuItem>\r\n                <MenuItem\r\n                    component={RouterLink}\r\n                    to='/tic-tac-toe'\r\n                    onClick={handleClose}\r\n                    className={classes.menuListItem}\r\n                >\r\n                    Play Tic Tac Toe\r\n                </MenuItem>\r\n                <MenuItem\r\n                    component={RouterLink}\r\n                    to='/fifteen-game'\r\n                    onClick={handleClose}\r\n                    className={classes.menuListItem}\r\n                >\r\n                    Play the Fifteen Game\r\n                </MenuItem>\r\n                <MenuItem\r\n                    component={RouterLink}\r\n                    to='/magic-squares'\r\n                    onClick={handleClose}\r\n                    className={classes.menuListItem}\r\n                >\r\n                    Learn about Magic Squares\r\n                </MenuItem>\r\n                <MenuItem\r\n                    component={RouterLink}\r\n                    to='/strategy'\r\n                    onClick={handleClose}\r\n                    className={classes.menuListItem}\r\n                >\r\n                    Learn Tic Tac Toe Strategy\r\n                </MenuItem>\r\n                <MenuItem\r\n                    component={Link}\r\n                    to='https://www.nolastemgarden.com'\r\n                    onClick={handleClose}\r\n                    className={classes.menuListItem}\r\n                >\r\n                    Nola Stem Garden Home\r\n                </MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {\r\n    Link as RouterLink,\r\n} from \"react-router-dom\";\r\n\r\n// My Components\r\n\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    \r\n    root: {\r\n        // border: 'solid navy 1px',\r\n\r\n        width: '100%',\r\n        height: '90%',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        // justifyContent: 'center',\r\n        backgroundColor: '#4AC9FD',\r\n\r\n        \r\n    },\r\n    paper: {\r\n        \r\n        width: 'calc(100% - 4rem)',\r\n        height: 'calc(100% - 2rem)',\r\n        height: 'calc(99.5% - 2rem)',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'start',\r\n\r\n        borderRadius: '1vmin',\r\n        backgroundColor: '#ffffff',\r\n        \r\n        \r\n        padding: '1rem',\r\n        overflowY: 'scroll',\r\n        overflowX: 'hidden',\r\n    },\r\n    title: {\r\n        fontSize: '1.3rem',\r\n        paddingLeft: '0.5rem',\r\n    },\r\n    paragraph: {\r\n        // textIndent: '1rem',\r\n        padding: '0.5rem',\r\n        paddingBottom: '0.7rem',\r\n    },\r\n    buttonArea: {\r\n        // border: 'solid red 1px',\r\n        display: 'flex',\r\n        marginBottom: '0.7rem',\r\n        width: '100%',\r\n        padding: '0.5rem',\r\n\r\n    },\r\n    button: {\r\n        margin: 'auto',\r\n        width: '37%',\r\n        backgroundColor: theme.palette.primary.dark,\r\n        textAlign: 'center'\r\n    }, \r\n    \r\n}));\r\n\r\n\r\nexport default function WelcomePage() {\r\n    const classes = useStyles();\r\n    \r\n    \r\n    return (\r\n        \r\n        <Box className={classes.root} >\r\n            <Paper className={classes.paper} elevation={5} >\r\n                <Typography className={classes.title} gutterBottom>\r\n                    Welcome to Tic-Tac-Toe and the 15-Game!\r\n                </Typography>\r\n                <Typography variant='body1' className={classes.paragraph}>\r\n                    My name is Nigel, and I am a math teacher who loves games where simple sets of rules open a door to complex strategic possibilities.\r\n                    I love to use games as a lens through which to teach math beacuse they remind us that, though math is based on disciplined reasoning, \r\n                    it has a playful side which feeds the desire to explore.\r\n                </Typography>\r\n                <Typography variant='body1' className={classes.paragraph}>\r\n                    In \"How Not To Be Wrong\", Jordan Elenberg explains, \"Knowing mathematics is like wearing a pair of X-ray\r\n                    specs that reveal hidden structures beneath the messy and chotic surface of the world.\"  When two real-world\r\n                    problems that seem unrelated on their surfaces' are actually behaving according\r\n                    to the same underlying patterns, Math helps us become aware of that fact.  But don't take my word for it!\r\n                </Typography>\r\n                <Typography variant='body1' className={classes.paragraph}>\r\n                    To see this for yourself, play Tic-Tac-Toe and then play the Fifteen Game. You will see that (on the surface) these two\r\n                    games feel quite different to play.  You would not likely suspect that knowing the best strategies in Tic-Tac-Toe\r\n                    would make you a stronger player at the Fifteen Game, too.\r\n                </Typography>\r\n                <Box className={classes.buttonArea}>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        component={RouterLink}\r\n                        to='/tic-tac-toe'\r\n                    >\r\n                        Play Tic-Tac-Toe\r\n                    </Button>\r\n\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        component={RouterLink}\r\n                        to='/fifteen-game'\r\n                    >\r\n                        Play the 15-Game\r\n                    </Button>\r\n                </Box>\r\n                <Typography variant='body1' className={classes.paragraph}>\r\n                    When you have played both games check out the lesson on Magic Squares. Magic Squares are a mathematical curiosity\r\n                    that were first studied in China and India thousands of years ago. Once you know about magic squares you will be\r\n                    able to see that under the hood Tic-Tac-Toe and the Fifteen Game are actually the same game! Master one and you will have mastered both!\r\n                </Typography>\r\n                <Box className={classes.buttonArea}>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        component={RouterLink}\r\n                        to='/magic-squares'\r\n                    >\r\n                        Learn Magic Squares\r\n                    </Button>\r\n\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        component={RouterLink}\r\n                        to='/strategy'\r\n                    >\r\n                        Master the Strategy\r\n                    </Button>\r\n                </Box>\r\n                <Typography variant='body1' className={classes.paragraph}>\r\n                    This lesson is built with code that is open-source and available on my <a href=\"https://github.com/nolastemgarden\">Github account</a>,\r\n                so if you have something to add or simply want to see how it works you are welcome to &nbsp;\r\n                <a href=\"https://github.com/nolastemgarden/tic-tac-toe-and-the-fifteen-game\">clone the repository</a>!\r\n                </Typography>\r\n\r\n            </Paper>\r\n        </Box>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n// My Components\r\n\r\n// MUI  components\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles({\r\n    square: {\r\n        margin: '2%',\r\n        width: '27%',\r\n        height: '27%',\r\n        boxSizing: 'border-box',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        \r\n        // backgroundColor: '#DDD',\r\n        // backgroundColor: '#FE3'\r\n    },\r\n    iconX: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    iconO: {\r\n        width: '80%',\r\n        height: '80%',\r\n    },\r\n\r\n\r\n    unknown: {\r\n        backgroundColor: '#bbf',\r\n    },\r\n    noColor: {\r\n        // backgroundColor: '#FFF',  // This is used for Hints turned off mode.\r\n        backgroundColor: '#ddd',\r\n    },\r\n    claimed: {\r\n       backgroundColor: '#eee',\r\n    },\r\n    unclaimed: {\r\n        backgroundColor: '#ddd',\r\n    },\r\n    win: {\r\n        backgroundColor: '#3B3'\r\n    },\r\n    draw: {\r\n        // backgroundColor: '#55bb00',\r\n        backgroundColor: '#FF3'\r\n    },\r\n    lose: {\r\n        // backgroundColor: '#88ee33'\r\n        backgroundColor: '#F44'\r\n    },\r\n\r\n\r\n    immediateWin: {\r\n        backgroundColor: '#00bb00'\r\n    },\r\n    doubleAttackCreatingMove: {\r\n        // backgroundColor: '#55bb00',\r\n        backgroundColor: '#00bb00'\r\n    },\r\n    forcedWinCreatingMove: {\r\n        // backgroundColor: '#88ee33'\r\n        backgroundColor: '#00bb00'\r\n    },\r\n\r\n    urgentDefensiveMove: {\r\n        backgroundColor: '#ff6600'\r\n    },\r\n    unavoidableDefeat: {\r\n        backgroundColor: '#ff4433'\r\n    },\r\n    gameLosingMove: {\r\n        // backgroundColor: '#EEDD11'\r\n    },\r\n\r\n    drawingMove: {\r\n        backgroundColor: '#EEDD11'\r\n    }\r\n    \r\n});\r\n\r\nexport default function Square(props) {\r\n    const classes = useStyles();\r\n    const id = props.id\r\n    const symbol = props.symbol\r\n    const color = props.color  // String 'win', 'draw', 'lose', 'unknown', 'claimed',  \r\n    const handleClick = props.handleClick\r\n\r\n\r\n    let icon;\r\n    switch (symbol) {\r\n        case 'x':\r\n            icon = <ClearIcon className={classes.iconX} />\r\n            break;\r\n        case 'o':\r\n            icon = <RadioButtonUncheckedIcon className={classes.iconO} />\r\n            break;\r\n        case '':\r\n            icon = null;\r\n            break;\r\n        default:\r\n            throw console.error(\"Square passed symbol not 'x' 'o' or ''\");\r\n            break;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    \r\n    let className;\r\n    switch (color) {\r\n        case 'unknown':\r\n            className = `${classes.square} ${classes.unknown} `\r\n            break;\r\n        case 'claimed':\r\n            className = `${classes.square} ${classes.claimed} `\r\n            break;\r\n        case 'unclaimed':\r\n            className = `${classes.square} ${classes.unclaimed} `\r\n            break;\r\n        case 'noColor':\r\n            className = `${classes.square} ${classes.noColor} `\r\n            break;\r\n        case 'draw':\r\n            className = `${classes.square} ${classes.draw} `\r\n            break;\r\n        case 'win':\r\n            className = `${classes.square} ${classes.win} `\r\n            break;\r\n        case 'lose':\r\n            className = `${classes.square} ${classes.lose} `\r\n            break;\r\n        default:\r\n            className = `${classes.square} `\r\n    }\r\n    // switch (color) {\r\n    //     case 'noColor':\r\n    //         className = `${classes.square} ${classes.noColor} `\r\n    //         break;\r\n    //     case 'drawingMove':\r\n    //         className = `${classes.square} ${classes.drawingMove} `\r\n    //         break;\r\n    //     case 'immediateWin':\r\n    //         className = `${classes.square} ${classes.immediateWin} `\r\n    //         break;\r\n    //     case 'unavoidableDefeat':\r\n    //         className = `${classes.square} ${classes.unavoidableDefeat} `\r\n    //         break;\r\n    //     case 'urgentDefensiveMove':\r\n    //         className = `${classes.square} ${classes.urgentDefensiveMove} `\r\n    //         break;\r\n    //     case 'doubleAttackCreatingMove':\r\n    //         className = `${classes.square} ${classes.doubleAttackCreatingMove} `\r\n    //         break;\r\n    //     case 'forcedWinCreatingMove':\r\n    //         className = `${classes.square} ${classes.forcedWinCreatingMove} `\r\n    //         break;\r\n    //     case 'gameLosingMove':\r\n    //         className = `${classes.square} ${classes.gameLosingMove} `\r\n    //         break;    \r\n    //     default:\r\n    //         className = `${classes.square} `\r\n    // }\r\n\r\n    return (\r\n        <Paper\r\n            elevation={4}\r\n            className={className}\r\n            onClick={() => handleClick(id)}\r\n        >\r\n            {icon}\r\n        </Paper>\r\n    )\r\n}","import React from 'react';\r\n\r\n// My Components\r\nimport Square from \"../Square\";\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    board: {\r\n        // border: 'solid blue 1px',\r\n        width: '76.4%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        alignContent: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n});\r\n\r\nexport default function Board(props) {\r\n    const classes = useStyles();\r\n    const handleSquareClick = props.handleSquareClick\r\n    const boardSymbols = props.boardSymbols;\r\n    const boardColors = props.boardColors; // Array of 9 strings 'noColor', 'unclaimed', 'claimed', 'win', 'draw', 'lose'.\r\n            // Formerly and Array of 9 strings '', 'immediateWin', 'unavoidableDefeat', 'doubleAttackCreatingMove', 'urgentDefensiveMove', 'forcedWinCreatingMove', 'drawingMove'\r\n    \r\n    let board = [];\r\n    for (let id = 0; id < 9; id++) {\r\n        let newSquare =\r\n            <Square\r\n                key={id}\r\n                id={id}\r\n                symbol={boardSymbols[id]}\r\n                color={boardColors[id]}\r\n                handleClick={handleSquareClick}  \r\n            />\r\n        ;\r\n        board = board.concat(newSquare);\r\n    }\r\n    \r\n    \r\n\r\n    return (\r\n        <Box className={classes.board}>\r\n            {board}\r\n        </Box>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\r\n\r\nimport '../games/TicTacToe.css';\r\n\r\n// My Components\r\n// import Square from \"./Square\";\r\n\r\n// MUI Components\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\n\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box, Typography } from '@material-ui/core';\r\n\r\n\r\n// How do I get this CSS var \r\nconst immediateWin = `var(--immediate-win-bg-color)`;\r\nconsole.log(`immediateWin: ${immediateWin}`)\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        border: 'solid #bbb 0.2px',\r\n        boxSizing: 'border-box',\r\n        marginTop: '1rem',\r\n        width: '100%',\r\n    },\r\n    \r\n    keyItem: {\r\n        border: 'solid #bbb 0.2px',\r\n        boxSizing: 'border-box',\r\n        // width: '40%',\r\n        flexGrow: '2',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        \r\n    },\r\n\r\n    colorTile: {\r\n        // border: 'solid blue 1px',\r\n        margin: '1%',\r\n        marginRight: '1rem',\r\n        borderRadius: '15%',\r\n\r\n        width: '4vmin',\r\n        height: '4vmin',\r\n    },\r\n\r\n    immediateWin: {\r\n        borderRadius: '20%',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: '#00BB00',\r\n        // backgroundColor: immediateWin\r\n    },\r\n    \r\n    doubleAttackCreatingMove: {\r\n        borderRadius: '20%',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: '#55bb00'\r\n    },\r\n    forcedWinCreatingMove: {\r\n        borderRadius: '20%',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: '#88ee33'\r\n    },\r\n\r\n    urgentDefensiveMove: {\r\n        borderRadius: '20%',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: '#ff6600'\r\n    },\r\n    unavoidableDefeat: {\r\n        borderRadius: '20%',\r\n        backgroundColor: '#ff4433',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    gameLosingMove: {\r\n        borderRadius: '20%',\r\n        backgroundColor: '#EEDD11',\r\n        width: '100%',\r\n        height: '100%',\r\n    }\r\n}));\r\n\r\nexport default function HintColorKey() {\r\n    const classes = useStyles();\r\n    \r\n    \r\n    \r\n    return (\r\n        <Grid container spacing={2} className={classes.root}>\r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.immediateWin}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Immediate Win\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.unavoidableDefeat}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Unavoidable Defeat\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.doubleAttackCreatingMove}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Double Attack\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.urgentDefensiveMove}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Urgent Defensive Move\r\n                </Typography>\r\n            </Grid>\r\n            \r\n            \r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.forcedWinCreatingMove}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Winning Attack\r\n                </Typography>\r\n            </Grid>\r\n            \r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.gameLosingMove}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Game Losing Mistake\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n\r\n        \r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\n// My Components\r\n// import Square from \"./Square\";\r\nimport HintColorKey from \"./HintColorKey\";\r\n\r\n// MUI Components\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box } from '@material-ui/core';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    button: {\r\n        // border: 'solid red 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 24px)',\r\n        fontSize: 'min(20px, 1rem)',\r\n        lineHeight: '0.8vmin',\r\n    },\r\n    buttonIcon: {\r\n        marginRight: '1vmin',\r\n        fontSize: 'larger'\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 22px)',\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n        height: 'min(100vw, 80vh)',\r\n        maxHeight: '950px',\r\n        width: 'min(60vh, 75vw)',\r\n        maxWidth: '675px',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    heading: {\r\n        fontSize: 'min(max(1rem, 4vmin), 30px)',\r\n        fontWeight: 'bold',\r\n        marginBlockEnd: '0',\r\n        marginBlockStart: '1rem',\r\n    },\r\n    body: {\r\n        fontSize: 'theme.typography.pxToRem(20)',\r\n        fontWeight: 'regular',\r\n        marginBlockEnd: '0',\r\n        marginBlockStart: '0',\r\n    }\r\n}));\r\n\r\nexport default function HowToPlayModal() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                onClick={handleOpen}\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\"\r\n            >\r\n                <HelpOutlineIcon className={classes.buttonIcon} />\r\n                Help\r\n            </Button>\r\n\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className={classes.paper}   >\r\n                        <Typography id=\"transition-modal-title\" className={classes.heading} >\r\n                        How To Play\r\n                        </Typography>\r\n                        <p id=\"transition-modal-description\" className={classes.body} >\r\n                            X and O take turns clicking on squares to claim them.\r\n                            The first player to claim all 3 squares in a single row, column, or diagonal wins!\r\n                        </p>\r\n                        <Typography id=\"transition-modal-title\" className={classes.heading} >\r\n                        Coach's Commentary\r\n                        </Typography>\r\n                        <p id=\"transition-modal-description\" className={classes.body} >\r\n                            The commentary is on by default and may be turned off in the Settings.\r\n                            It provides a verbal description of the current position and in certain\r\n                            positions offers advice to help you find your best move.  \r\n                        </p>\r\n                        <Typography id=\"transition-modal-title\" className={classes.heading} >\r\n                        Winning and Losing Moves\r\n                        </Typography>\r\n                        <p id=\"transition-modal-description\" className={classes.body} >\r\n                            Color-coded hints shown on the board that warn of all possible mistakes and highlight all winning opportunities.\r\n                            These are hidden by default and may be turned on in the Settings.\r\n                        </p>\r\n                        <p id=\"transition-modal-description\" className={classes.body} >\r\n                            Squares that are white lead to a Draw. This is the outcome of every game of Tic Tac Toe <em> unless </em>\r\n                            one of the players makes a <strong>mistake</strong>. After a mistake, the other player will be able to win immediately or force their opponent's hand in a way that guarantees a them a win in one or two more turns.\r\n                            It isn't necesarily a problem to have to make an <strong>urgent defensive move</strong>, but if you have two or more of them at once then the game is lost.\r\n                        </p>\r\n                        <HintColorKey />\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n// MUI Icons\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    button: {\r\n        // border: 'solid red 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 24px)',\r\n        fontSize: 'min(20px, 1rem)',\r\n        lineHeight: '0.8vmin',\r\n    },\r\n    buttonIcon: {\r\n        marginRight: '1vmin',\r\n        fontSize: 'larger'\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 22px)',\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n        height: 'min(100vw, 80vh)',\r\n        maxHeight: '950px',\r\n        width: 'min(60vh, 75vw)',\r\n        maxWidth: '675px',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    switchBox: {\r\n        // border: 'solid red 1px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n\r\n    },\r\n    switchLabel: {\r\n        // fontSize: '2.2vmin',\r\n        fontSize: 'min(max(2rem, 4vmin), 30px)',\r\n        width: '60%'\r\n\r\n    },\r\n    heading: {\r\n        fontSize: 'min(max(1rem, 4vmin), 30px)',\r\n        fontWeight: 'bold',\r\n        marginBlockEnd: '0',\r\n        marginBlockStart: '1rem',\r\n    },\r\n    body: {\r\n        // fontSize: 'theme.typography.pxToRem(20)',\r\n        fontSize: '1.2rem',\r\n        fontWeight: 'regular',\r\n        marginBlockEnd: '0',\r\n        marginBlockStart: '0',\r\n    }\r\n}));\r\n\r\nexport default function SettingsModal(props) {\r\n    const classes = useStyles();\r\n    const showMoves = props.showMoves\r\n    const showCommentary = props.showCommentary\r\n    const toggleShowMovesSwitch = props.toggleShowMovesSwitch\r\n    const toggleShowCommentarySwitch = props.toggleShowCommentarySwitch\r\n\r\n    // Modal Open & Close \r\n    const [open, setOpen] = React.useState(false);\r\n    const openSettingsModal = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const showMovesSwitch = (\r\n        <React.Fragment>\r\n            <Box className={classes.switchBox}>\r\n                <Typography className={classes.switchLabel}>\r\n                    Show Moves\r\n                </Typography>\r\n                <Switch\r\n                    checked={showMoves}\r\n                    onChange={toggleShowMovesSwitch}\r\n                    color=\"primary\"\r\n                    name=\"checkedB\"\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                />\r\n            </Box>\r\n            <DialogContentText className={classes.body} >\r\n                Show whether each possible move leads to a win, loss, or draw with color coded hints on the board.\r\n            </DialogContentText>\r\n        </React.Fragment>\r\n    );\r\n\r\n    const showCommentarySwitch = (\r\n        <React.Fragment>\r\n            <Box className={classes.switchBox}>\r\n                <Typography className={classes.switchLabel}>\r\n                    Show Commentary\r\n                </Typography>\r\n                <Switch\r\n                    checked={showCommentary}\r\n                    onChange={toggleShowCommentarySwitch}\r\n                    color=\"primary\"\r\n                    name=\"checkedB\"\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                />\r\n            </Box>\r\n            <DialogContentText className={classes.body} >\r\n                Show a verbal description of the position and the coach's advice about what to look out for.\r\n            </DialogContentText>\r\n        </React.Fragment>\r\n        \r\n        \r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Button\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={openSettingsModal}\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\" \r\n            >\r\n                <SettingsIcon className={classes.buttonIcon} />\r\n                Settings\r\n            </Button>\r\n            \r\n            \r\n            <Dialog \r\n                open={open} \r\n                onClose={handleClose} \r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                \r\n                \r\n                <DialogContent>\r\n                    <div className={classes.heading} >\r\n                        Settings\r\n                    </div>\r\n                    {showCommentarySwitch}\r\n                    \r\n                    {showMovesSwitch}\r\n                    \r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={handleClose} \r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                        className={classes.body}\r\n                    >\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\n\r\n// MUI Components\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    button: {\r\n        // border: 'solid red 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 24px)',\r\n        fontSize: 'min(20px, 1rem)',\r\n        lineHeight: '0.8vmin',\r\n    },\r\n    buttonIcon: {\r\n        marginRight: '1vmin',\r\n        fontSize: 'larger',\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        // width: 'md',\r\n        height: '600px',\r\n        // border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    \r\n}));\r\n\r\nexport default function HowToPlayModal() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                onClick={handleOpen}\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\"\r\n            >\r\n                <HelpOutlineIcon className={classes.buttonIcon} /> \r\n                Help\r\n            </Button>\r\n\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <Container maxWidth='md'> \r\n                        <Box className={classes.paper} >\r\n                            <Typography variant='h5' id=\"transition-modal-title\" className={classes.heading} >\r\n                                How To Play\r\n                        </Typography>\r\n                            <Typography variant='body1' id=\"transition-modal-title\" className={classes.heading} gutterBottom >\r\n                                Two players take turns claiming one of the 9 numbered cards. <br />\r\n                            To win, a player must collect a set of exactly 3 cards that add up to exactly 15.\r\n                        </Typography>\r\n                            <Typography variant='body1' id=\"transition-modal-title\" className={classes.heading} >\r\n                                By default, you play against my bot but, if you wish, you can disable it in the settings.\r\n                                can change this to play against my bot.\r\n                            Two players take turns claiming one of the 9 numbered cards. <br />\r\n                            To win, a player must collect a set of exactly 3 cards that add up to exactly 15.\r\n                        </Typography>\r\n                        </Box>\r\n                    </Container>\r\n                    {/* <div className={classes.paper}>\r\n                        <h2 id=\"transition-modal-title\">How To Play</h2>\r\n                        <ul id=\"transition-modal-description\" >\r\n                            <li>\r\n                                Two players take turns claiming one of the 9 numbers.\r\n                            </li>\r\n                            <li>\r\n                                To win a player must collect a set of 3 numbers that add up to exactly 15.\r\n                            </li>\r\n                            <li>\r\n                                By default, you go first and play against my Bot, which will never fail to get a draw.\r\n                            </li>\r\n                            <li>\r\n                                In the Settings you can adjust whether you go first or second.\r\n                            </li>\r\n                            <li>\r\n                                You can also adjust whether to show/hide commentary and move hints.\r\n                            </li>\r\n                        </ul>\r\n                    </div> */}\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n// MUI Icons\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    button: {\r\n        // border: 'solid red 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 24px)',\r\n        fontSize: 'min(20px, 1rem)',\r\n        lineHeight: '0.8vmin',\r\n    },\r\n    buttonIcon: {\r\n        marginRight: '1vmin',\r\n        fontSize: 'larger'\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 22px)',\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n        height: 'min(100vw, 80vh)',\r\n        maxHeight: '950px',\r\n        width: 'min(60vh, 75vw)',\r\n        maxWidth: '675px',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    switchBox: {\r\n        // border: 'solid red 1px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n\r\n    },\r\n    switchLabel: {\r\n        // fontSize: '2.2vmin',\r\n        fontSize: 'min(max(2rem, 4vmin), 30px)',\r\n        width: '60%'\r\n\r\n    },\r\n    heading: {\r\n        fontSize: 'min(max(1rem, 4vmin), 30px)',\r\n        fontWeight: 'bold',\r\n        marginBlockEnd: '0',\r\n        marginBlockStart: '1rem',\r\n    },\r\n    body: {\r\n        // fontSize: 'theme.typography.pxToRem(20)',\r\n        fontSize: '1.2rem',\r\n        fontWeight: 'regular',\r\n        marginBlockEnd: '0',\r\n        marginBlockStart: '0',\r\n    }\r\n}));\r\n\r\nexport default function SettingsModal(props) {\r\n    const classes = useStyles();\r\n    const showMoves = props.showMoves\r\n    const showCommentary = props.showCommentary\r\n    const toggleShowMovesSwitch = props.toggleShowMovesSwitch\r\n    const toggleShowCommentarySwitch = props.toggleShowCommentarySwitch\r\n\r\n    // Modal Open & Close \r\n    const [open, setOpen] = React.useState(false);\r\n    const openSettingsModal = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const showMovesSwitch = (\r\n        <React.Fragment>\r\n            <Box className={classes.switchBox}>\r\n                <Typography className={classes.switchLabel}>\r\n                    Show Moves\r\n                </Typography>\r\n                <Switch\r\n                    checked={showMoves}\r\n                    onChange={toggleShowMovesSwitch}\r\n                    color=\"primary\"\r\n                    name=\"checkedB\"\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                />\r\n            </Box>\r\n            <DialogContentText className={classes.body} >\r\n                Show whether each possible move leads to a win, loss, or draw with color coded hints ont the board.\r\n            </DialogContentText>\r\n        </React.Fragment>\r\n    );\r\n\r\n    const showCommentarySwitch = (\r\n        <React.Fragment>\r\n            <Box className={classes.switchBox}>\r\n                <Typography className={classes.switchLabel}>\r\n                    Show Commentary\r\n                </Typography>\r\n                <Switch\r\n                    checked={showCommentary}\r\n                    onChange={toggleShowCommentarySwitch}\r\n                    color=\"primary\"\r\n                    name=\"checkedB\"\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                />\r\n            </Box>\r\n            <DialogContentText className={classes.body} >\r\n                Show a verbal description of the position and the coach's advice about what to look out for.\r\n            </DialogContentText>\r\n        </React.Fragment>\r\n\r\n\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Button\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={openSettingsModal}\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\"\r\n            >\r\n                <SettingsIcon className={classes.buttonIcon} />\r\n                Settings\r\n            </Button>\r\n\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n\r\n\r\n                <DialogContent>\r\n                    <div className={classes.heading} >\r\n                        Settings\r\n                    </div>\r\n                    {showCommentarySwitch}\r\n\r\n                    {showMovesSwitch}\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={handleClose}\r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                        className={classes.body}\r\n                    >\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\n// Custom Components\r\nimport TicTacToeHelpModal from \"./modals/TicTacToeHelpModal\";\r\nimport TicTacToeSettingsModal from \"./modals/TicTacToeSettingsModal\";\r\nimport FifteenGameHelpModal from \"./modals/FifteenGameHelpModal\";\r\nimport FifteenGameSettingsModal from \"./modals/FifteenGameSettingsModal\";\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        \r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        \r\n    },\r\n    infoArea: {\r\n        height: '100%',\r\n        // maxHeight: '100%',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    gameStatus: {\r\n        fontSize: '2rem',\r\n        fontWeight: 'bold'\r\n    },\r\n    commentary: {\r\n        // fontSize: 'max(1rem, 2.2vmin)',\r\n        // fontSize: '1rem',\r\n        paddingRight: '5vmin',\r\n        overflow: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n\r\n    buttonArea: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center',\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        height: '18%',\r\n        // display: 'flex',\r\n        // flexDirection: 'column',\r\n        // justifyContent: 'center',\r\n        // alignItems: 'center',\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 24px)',\r\n        fontSize: 'min(20px, 1rem)',\r\n    },\r\n    buttonIcon: {\r\n        marginRight: '1vmin',\r\n        fontSize: 'larger'\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 22px)',\r\n    },\r\n    switchLabel: {\r\n        lineHeight: '1rem'\r\n    },\r\n    \r\n}));\r\n\r\nexport default function Panel(props) {\r\n    const classes = useStyles();\r\n\r\n    const gameType = props.gameType;\r\n    const status = props.status;\r\n    const commentary = props.commentary;\r\n\r\n    const handleUndoButtonClick = props.handleUndoButtonClick\r\n    const handleNewGameButtonClick = props.handleNewGameButtonClick\r\n\r\n    \r\n    const showMoves = props.showMoves \r\n    const showCommentary = props.showCommentary \r\n    const toggleShowMovesSwitch = props.toggleShowMovesSwitch\r\n    const toggleShowCommentarySwitch = props.toggleShowCommentarySwitch\r\n    \r\n    \r\n    const undoButton = (\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={() => handleUndoButtonClick()}\r\n            \r\n        >\r\n            <UndoIcon className={classes.buttonIcon} />\r\n            Undo\r\n        </Button>\r\n    );\r\n\r\n    const newGameButton = (\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={() => handleNewGameButtonClick()} \r\n        >\r\n            <ReplayIcon className={classes.buttonIcon} />\r\n            New&nbsp;Game\r\n        </Button>\r\n    );\r\n\r\n    let helpButton = \"\";\r\n    let settingsButton = \"\";\r\n\r\n    if (gameType === 'TicTacToe'){\r\n        helpButton = (\r\n            <Box className={classes.button} >\r\n                <TicTacToeHelpModal />\r\n            </Box>\r\n        );\r\n        settingsButton = (\r\n            <Box className={classes.button} >\r\n                <TicTacToeSettingsModal\r\n                    showMoves={showMoves}\r\n                    showCommentary={showCommentary}\r\n                    toggleShowMovesSwitch={toggleShowMovesSwitch}\r\n                    toggleShowCommentarySwitch={toggleShowCommentarySwitch}\r\n                />\r\n            </Box>\r\n        )\r\n    }\r\n    if (gameType === 'FifteenGame') {\r\n        helpButton = (\r\n            <Box className={classes.button} >\r\n                <FifteenGameHelpModal />\r\n            </Box>\r\n        );\r\n        settingsButton = (\r\n            <Box className={classes.button} >\r\n                <FifteenGameSettingsModal\r\n                    showMoves={showMoves}\r\n                    showCommentary={showCommentary}\r\n                    toggleShowMovesSwitch={toggleShowMovesSwitch}\r\n                    toggleShowCommentarySwitch={toggleShowCommentarySwitch}\r\n                />\r\n            </Box>\r\n        )\r\n    }\r\n    \r\n    \r\n\r\n    \r\n\r\n    \r\n    return (\r\n        <Grid container className={classes.root}>\r\n            <Grid item className={classes.infoArea} xs={8}>\r\n                <Typography className={classes.gameStatus} noWrap >\r\n                    {status}\r\n                </Typography>\r\n                <Typography variant='body2' className={classes.commentary}  >\r\n                    {commentary}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item className={classes.buttonArea} xs={4}>\r\n                {undoButton}\r\n                {newGameButton}\r\n                {helpButton}\r\n                {settingsButton}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\n\r\nimport './TicTacToe.css';\r\n\r\n// My Components\r\nimport Board from \"../boards/TicTacToeBoard\";\r\nimport Panel from \"../Panel\";\r\n\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        // border: 'solid navy 1px',\r\n\r\n        width: '100%',\r\n        height: '100%',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        // justifyContent: 'center',\r\n        backgroundColor: '#4AC9FD',\r\n\r\n        borderRadius: '1vmin',\r\n\r\n        \r\n    },\r\n    boardArea: {\r\n        backgroundColor: '#ffffff',\r\n        borderRadius: 'inherit',\r\n        width: 'calc(100% - 4rem)',\r\n        padding: '1rem',\r\n        marginBottom: '1rem',\r\n        \r\n\r\n        height: '55%',\r\n        \r\n        \r\n        \r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    panelArea: {\r\n        backgroundColor: '#ffffff',\r\n        borderRadius: 'inherit',\r\n        width: 'calc(100% - 4rem)',\r\n        padding: '1rem',\r\n        \r\n        marginBottom: '0rem',\r\n        height: '37%',\r\n        flex: '1 1 37%',\r\n                \r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center'\r\n        \r\n    },\r\n}));\r\n\r\n\r\nexport default function TicTacToeGame() {\r\n    const classes = useStyles();\r\n\r\n    let [history, setHistory] = useState([]); \r\n    let [showMoves, setShowMoves] = useState(false); \r\n    // let [showMoves, setShowMoves] = useState(true); \r\n    let [showCommentary, setShowCommentary] = useState(false);  \r\n    // let [showCommentary, setShowCommentary] = useState(true);  \r\n\r\n    return (\r\n        <Box className={classes.root} >\r\n            <Box className={classes.boardArea} >\r\n                <Board \r\n                    boardSymbols={getBoardSymbols()} \r\n                    boardColors={getBoardColors()}\r\n                    handleSquareClick={handleSquareClick}\r\n                />\r\n            </Box>\r\n            <Box className={classes.panelArea}>\r\n                <Panel \r\n                    gameType='TicTacToe'\r\n                    // data={getPanelData(history)} \r\n                    status={getStatus()}\r\n                    commentary={getCommentary()}\r\n                    showMoves={showMoves}\r\n                    showCommentary={showCommentary}\r\n                    handleUndoButtonClick={handleUndoButtonClick} \r\n                    handleNewGameButtonClick={handleNewGameButtonClick}\r\n                    toggleShowMovesSwitch={toggleShowMovesSwitch}\r\n                    toggleShowCommentarySwitch={toggleShowCommentarySwitch}\r\n                />\r\n            </Box>\r\n        </Box>\r\n    );\r\n\r\n    // The <Game> holds all state and most helper and handler function definitions.\r\n    // It passes what it needs to to the board to render and to the panel.\r\n    \r\n    // The board data to render is a the latest entry in history.  We will have an 'undo' but not a 'redo' button.  May add a Make Computer Move\r\n    function getBoardSymbols(moveList = history) {\r\n        let data = Array(9).fill('');  // Start with an array representing a board of NINE empty squares\r\n        squaresClaimedByPlayer('x').forEach(squareId => {\r\n            data[squareId] = 'x';\r\n        });\r\n        squaresClaimedByPlayer('o').forEach(squareId => {\r\n            data[squareId] = 'o';\r\n        });\r\n        return data;  // this method only deals with current board position, not hypotheticals.  Thus, it wants to use a version of helper squaresClaimedByPlayer() that does not require a moveList be explicitly passed in. \r\n    }\r\n\r\n    function getBoardColors() {\r\n        // If the game is won highlight the winning line(s), whether hints are turned on or off.\r\n        if (wins('x') || wins('o')) {\r\n            return highlightWins();\r\n        }\r\n        // If hints are turned off return colors [] filled with 'noColor' strings.\r\n        if (showMoves === false) {\r\n            return Array(9).fill('noColor');\r\n        }\r\n        // If hints are turned on return colors [] filled by getBoardHints().\r\n        if (showMoves === true) {\r\n            // console.log(`Board Hints: ${getBoardHints()}`)\r\n            return getBoardHints();\r\n        }\r\n    }\r\n\r\n    \r\n    // list all squareIds not appearing in the history or an \r\n    function emptySquares(moveList = history) {\r\n        let emptySquaresList = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (!moveList.includes(i)) {\r\n                emptySquaresList.push(i)\r\n            }\r\n        }\r\n        // console.log(`List Empty Squares: ${emptySquaresList}`)\r\n        return emptySquaresList;\r\n    }\r\n    function claimedSquares(moveList = history) {\r\n        let claimedSquaresList = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (moveList.includes(i)) {\r\n                claimedSquaresList.push(i)\r\n            }\r\n        }\r\n        return claimedSquaresList;\r\n    }\r\n    \r\n    //  Squares for which the value of the Hint is yet to be determined. \r\n    function unknownSquares(hints) {\r\n        let unknownSquares = [];\r\n        hints.forEach((value, index) => {\r\n            if (value === 'unknown'){\r\n                unknownSquares.push(index)\r\n            }\r\n        })\r\n        return unknownSquares;\r\n    }\r\n\r\n    // WON GAME defined: the player specified has all three squares in at least one line.\r\n    function wins(player, moveList = history) {\r\n        return (lineCountsFor(player, moveList).includes(3));\r\n    }\r\n    \r\n    // IMMEDIATE WIN defined: the player whose turn it is has an un-blocked two-in-a-line\r\n    function immediateWins(moveList = history) {\r\n        const player = myTurn(moveList);\r\n        let winningMoves = [];\r\n        linesWithOnlyTwo(player, moveList).forEach((line) => { // console.log(`urgentDefensiveMoves found line ${line} has only two ${other(player)}`)\r\n            squaresInLine(line).forEach((square) => {\r\n                if (squareIsEmpty(square, moveList) && !winningMoves.includes(square)) {\r\n                    winningMoves = winningMoves.concat(square);\r\n                }\r\n            })\r\n        })\r\n        return winningMoves;\r\n    }\r\n    function thereIsAnImmediateWin(moveList = history) {\r\n        return (immediateWins(moveList).length > 0)\r\n    }\r\n\r\n\r\n    // IMMEDIATELY LOSING MOVES: moves that make it so the opponent has an immediateWin.\r\n    function immediatelyLosingMoves(moveList = history) {\r\n        let immediatelyLosingMoves = [];\r\n        emptySquares(moveList).forEach(testSquare => {\r\n            let hypotheticalHistory = moveList.concat(testSquare);\r\n            if (thereIsAnImmediateWin(hypotheticalHistory)) {  \r\n                immediatelyLosingMoves = immediatelyLosingMoves.concat(testSquare);\r\n            }\r\n        })\r\n        return immediatelyLosingMoves;\r\n    }\r\n\r\n\r\n    // URGENT DEFENSIVE MOVES are moves that claim the last square in a line where the opponent has a two-to-zero advantage.\r\n    function urgentDefensiveMoves(moveList = history) {\r\n        const player = myTurn(moveList);\r\n        let urgentDefensiveMoves = [];\r\n        linesWithOnlyTwo(other(player), moveList).forEach((line) => { // console.log(`urgentDefensiveMoves found line ${line} has only two ${other(player)}`)\r\n            squaresInLine(line).forEach((square) => {\r\n                if (squareIsEmpty(square, moveList) && !urgentDefensiveMoves.includes(square)) {\r\n                    urgentDefensiveMoves = urgentDefensiveMoves.concat(square);\r\n                }\r\n            })\r\n        })\r\n        // console.log(`urgentDefensiveMoves() found the following moves for ${player}: ${urgentDefensiveMovesList}`);\r\n        return urgentDefensiveMoves;\r\n    }\r\n    function thereIsAnUrgentDefensiveMove(moveList = history) {\r\n        return (urgentDefensiveMoves(moveList).length === 1)\r\n    }\r\n\r\n\r\n    // DEFINITION: a DoubleAttack position is created when the player whose turn it is has no immediateWins() && has 2 distinct urgentDefensiveMoves(). \r\n    function thisIsADoubleAttack(moveList = history) {\r\n        return (!thereIsAnImmediateWin(moveList) && urgentDefensiveMoves(moveList).length > 1);\r\n    }\r\n    function doubleAttackCreatingMoves(moveList = history) {\r\n        let doubleAttackCreatingMoves = [];\r\n        emptySquares(moveList).forEach(testSquare => {\r\n            let hypotheticalHistory = moveList.concat(testSquare);\r\n            if (thisIsADoubleAttack(hypotheticalHistory)) {\r\n                doubleAttackCreatingMoves = doubleAttackCreatingMoves.concat(testSquare)\r\n            }\r\n        })\r\n        // console.log(`doubleAttackCreatingMoves in position: ${moveList} found these attacks: ${doubleAttackCreatingMoves}`);\r\n        return doubleAttackCreatingMoves;\r\n    }\r\n    function thereIsADoubleAttackCreatingMove(moveList = history) {\r\n        return (doubleAttackCreatingMoves(moveList).length > 0)\r\n    }\r\n\r\n    function doubleAttackGrantingMoves(moveList = history) {\r\n        let doubleAttackGrantingMoves = [];\r\n        emptySquares(moveList).forEach(testSquare => {\r\n            let hypotheticalHistory = moveList.concat(testSquare);\r\n            if (thereIsADoubleAttackCreatingMove(hypotheticalHistory)) {  // If there are any wins for Opponent in this hypotheticalHistory then the testSquare is a losing move. \r\n                doubleAttackGrantingMoves = doubleAttackGrantingMoves.concat(testSquare);\r\n            }\r\n        })\r\n        return doubleAttackGrantingMoves;\r\n    }\r\n\r\n    \r\n\r\n\r\n    // TODO\r\n    function getBoardHints() {\r\n        // PRIORITIES  \r\n        // 0) Start with an array of 9 filled with \"unknown\". this string cannot be a final value...\r\n        // 1) Mark all filled squares \"noColor\".\r\n        // 2) If there are any squares that would create an immediateWin \r\n                // switch them from \"unknown\" to \"win\". ?? \r\n                // ELSE there are no immidiateWins...\r\n        // 3) For each empty square, check if adding it to the history would create a situation where your opponent has an immediateWin(). \r\n                // In the first version this is called failing to block an \"urgentDefensiveMove\"\r\n                // each one that does should be switched from \"empty\" to \"lose\".  switch all other empty squares to \"draw\". Return.\r\n        // 4) For each empty square, check if adding it to the history would create a doubleAttack(). \r\n                // each one that does should be switched from \"empty\" to \"win\".  switch all other empty squares to \"draw\". Return.\r\n\r\n\r\n        // \r\n        // ??? 4) Mark any hard to see mistakes that would allow opponent to create a double attack.\r\n        // 5) Mark any forcing moves that keep the opponent busy this turn and allow you to create a double attack next turn.\r\n        \r\n        // (0)\r\n        const player = myTurn(history);\r\n        let hints = Array(9).fill('unknown');  // Start with an array representing a board of NINE squares.\r\n        \r\n        // (1)\r\n        claimedSquares().forEach(squareId => {\r\n            hints[squareId] = 'claimed';\r\n        });\r\n\r\n        //  (2) Mark my immediate wins.   GREEN\r\n        immediateWins(history).forEach(winningSquare => {\r\n            hints[winningSquare] = 'win';\r\n        });\r\n\r\n        // (3) Mark immediate losses.  yet unknown squares that grant opponent an immediate win. yet unknown implies unclaimed and not an immediate win.  RED\r\n        immediatelyLosingMoves(history).forEach(losingSquare => {\r\n            if (hints[losingSquare] === 'unknown') {\r\n                hints[losingSquare] = 'lose';\r\n            }\r\n        });\r\n        \r\n        \r\n        // (4) Mark double attacking wins.  yet unknown squares that create a double attack.  GREEN\r\n        doubleAttackCreatingMoves(history).forEach(keyAttackingMove => {\r\n            if (hints[keyAttackingMove] === 'unknown'){\r\n                hints[keyAttackingMove] = 'win';\r\n            }\r\n        });\r\n        \r\n        // (5) Mark moves that grant the opponent a double attacking win. Only apply to yet unknown squares.  RED\r\n        doubleAttackGrantingMoves(history).forEach(losingSquare => {\r\n            if (hints[losingSquare] === 'unknown') {\r\n                hints[losingSquare] = 'lose';\r\n            }\r\n        });\r\n        \r\n        // (6) Mark distant win forcing moves.  yet unknown squares that initiate a 3 move win sequence.  GREEN\r\n        distantForcedWinCreatingMoves(history).forEach(keyAttackingMove => {\r\n            if (hints[keyAttackingMove] === 'unknown') {\r\n                hints[keyAttackingMove] = 'win';\r\n            }\r\n        });\r\n\r\n        // (7) Mark moves that grant the opponent a distant win forcing moves. Only apply to yet unknown squares.  RED\r\n        console.log(`Yet UNKNOWN squares in the hints: ${unknownSquares(hints)}`)\r\n        unknownSquares(hints).forEach(testSquare => {\r\n            let hypotheticalHistory = history.concat(testSquare);\r\n            if (thereIsADistantForcedWinCreatingMove(hypotheticalHistory)) {  // If there are any distant forced wins for Opponent in this hypotheticalHistory then the testSquare is a losing move. \r\n                hints[testSquare] = 'lose';\r\n            }  // else {  The test square does not create an immediate loss, leave it as 'unknown' for now.}\r\n        });\r\n\r\n        // (8) Mark yet unknown squares as leading to a draw.\r\n        unknownSquares(hints).forEach(square => {\r\n            hints[square] = 'draw';\r\n        });\r\n        \r\n        // console.log(`getBoardHints() made this list: ${hints}`)\r\n        return hints;\r\n    }\r\n\r\n    \r\n    // HIGH-LEVEL PANEL HELPERS no params\r\n    function getStatus() {\r\n        if (wins('x')) {\r\n            return (`X wins!`)\r\n        }\r\n        else if (wins('o')) {\r\n            return (`O wins!`)\r\n        }\r\n        else if (gameDrawn()) {\r\n            return (`Draw.`)\r\n        }\r\n        else if (history.length % 2 === 0) {\r\n            return (`X's turn.`)\r\n        }\r\n        else if (history.length % 2 === 1) {\r\n            return (`O's turn.`)\r\n        }\r\n        else {\r\n            console.error(\"A call to getStatus() did not work!\");\r\n            return\r\n        }\r\n    }\r\n    function getCommentary() {\r\n        // console.log(`getCommentary() called while showCommentary = ${showCommentary}`)\r\n        if (gameOver()) {\r\n            return `Game Over`\r\n        }\r\n        if (!showCommentary) {\r\n            return `Coach's commentary would appear here if turned on in the settings.`\r\n        }\r\n\r\n        // If no moves have been made\r\n        if (history.length === 0) {\r\n            return `It may look like X has  9 different options but \r\n            when you consider symmetry there are really only 3: Center, Edge, or Corner.\r\n            In starting position, all of X's choices are safe and each leads to different follow up strategies.`\r\n        }\r\n\r\n        // If one move has been made\r\n        if (history.length === 1 && history[0] === 4) {\r\n            return `O really only has two options, edge or corner. One is good and lets O\r\n            force a draw. The other is bad and gives X a chance to win.`\r\n        }\r\n        if (history.length === 1 && history[0] !== 4 && history[0] % 2 === 0 ) {\r\n            return `In the Corner opening O has five non-symmetrical options. All except one\r\n            are mistakes that let X force a win.`\r\n        }\r\n        if (history.length === 1 && history[0] !== 4 && history[0] % 2 === 1) {\r\n            return `The Edge opening has the most tricks and traps! \r\n            O has five non-symmetrical options. Three are good and let O force a draw. \r\n            The other two are mistakes that let X force a win.`\r\n        }\r\n\r\n        // If two moves has been made\r\n        if (history.length === 2) {\r\n            let message = '';\r\n            if (thereIsADistantForcedWinCreatingMove()) {\r\n                message = `O's first move was a mistake and now X can ensure victory! But how?`\r\n            }\r\n            else {\r\n                let answer = (gameLosingMoves().length > 0) ? 'Yes! So be careful.' : 'No! You\\'re safe no matter what.';\r\n                message = `O's first move was sound. None of X's current options ensure victory, but do any actually lose?  ${answer}`\r\n            }\r\n            return message;\r\n        }\r\n\r\n        // If three moves have been made\r\n        if (history.length >= 3 ) {\r\n            let message = '';\r\n            if (thereIsAnImmediateWin()) {\r\n                message = `You have a winning move! Defensive moves are irrelevant.`\r\n            }\r\n            else if (thisIsADoubleAttack()) {\r\n                message = `You cannot win right now and cannot block all of your opponent's threats. Which move led you to from a draw to defeat?`\r\n            }\r\n            else if (thereIsADoubleAttackCreatingMove()) {\r\n                message = `You can set up a winning double attack! Don't settle for empty threats, \r\n                think hard and be sure that you are setting yourself up to win no matter what!`\r\n            }\r\n            else if (thereIsAnUrgentDefensiveMove()) {\r\n                message = `You cannot win right now so you must defend the one key square.`\r\n            }\r\n            \r\n            else {\r\n                let answer = (gameLosingMoves().length > 0) ? \r\n                    'Nonetheless, it is possible for you to make a mistake and lose right now. Play carefully!' : \r\n                    'You\\'re on track for a draw no matter what move you play in this position.';\r\n                message = `You have neither a winning attack nor an urgent defensive move. ${answer}`\r\n            }\r\n            return message;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // MID-LEVEL HELPERS for getBoardColors() and getBoardHints()\r\n    function highlightWins() {\r\n        let highlightedSquares = Array(9).fill('noColor')\r\n        if (!gameOver()) {  // Assert: we only reach this point if either x or o has won.\r\n            console.error(`highlightWins() was called but found that the game is not over`);\r\n        }\r\n        let winner = (wins('x')) ? 'x' : 'o';\r\n        // let lines = lines(winner);\r\n        linesWithThree(winner).forEach(line => {\r\n            squaresInLine(line).forEach(square => {\r\n                highlightedSquares[square] = 'win';\r\n            });\r\n        });\r\n        return highlightedSquares;\r\n    } \r\n     \r\n    \r\n\r\n    function threatCreatingMoves(moveList = history) {\r\n        // This list may contain duplicates. A squareId that appears twice creates two separate two-in-a-line threats.\r\n        const player = myTurn(moveList);\r\n        const threatCreatingMoves = []; \r\n        linesWithOnlyOne(moveList).forEach((line) => {\r\n            squaresInLine(line).forEach((square) => {\r\n                if (squareIsEmpty(square, moveList)) {                 // Don't add an already claimed square to the list of therat creating moves!\r\n                    threatCreatingMoves.push(square);\r\n                }\r\n            })\r\n        })\r\n        // console.log(`Player '${player}' can create threats on the following squares: ${threatCreatingMoves}`)\r\n        return threatCreatingMoves;\r\n    }\r\n\r\n    function singleAttackCreatingMoves(moveList = history) {\r\n        return threatCreatingMoves(moveList).filter((square, index) => threatCreatingMoves(moveList).indexOf(square) === index);\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    function winningDoubleAttackCreatingMoves(moveList = history) {\r\n        // A doubleAttack is winning IFF it can be made without ignoring an urgentDefensiveMove.\r\n        // A doubleAttackCreatingMove is winning IF there were no urgentDefensiveMoves OR IF it is identical to the ONE urgentDefensiveMove.\r\n    }\r\n    \r\n    \r\n\r\n\r\n    // DEFINITION: thisMoveIsForced IFF player who moved last has one unblocked threat and player whose turn it is has none.\r\n    function thisMoveIsForced(moveList = history) {\r\n        let isForced = (!thereIsAnImmediateWin(moveList) && thereIsAnUrgentDefensiveMove(moveList))\r\n        // console.log(`In position: ${moveList} The next move is forced: ${isForced}`)\r\n        return (isForced);\r\n    }\r\n    \r\n    // DEFINITION: ForcingMoves are the moves that give the opponent an urgentDefensiveMove and no immediateWin to take presidence over it.\r\n    function forcingMoves(moveList = history) {\r\n        let forcingMoves = [];\r\n        emptySquares(moveList).forEach(testSquare => {\r\n            let hypotheticalHistory = moveList.concat(testSquare);\r\n            if (thisMoveIsForced(hypotheticalHistory)) {\r\n                forcingMoves = forcingMoves.concat(testSquare)\r\n            }\r\n        })\r\n        // console.log(`forcingMoves found these: ${forcingMoves}`)\r\n        return forcingMoves;\r\n    }\r\n    \r\n    \r\n    // DEFINITION: A move that creates a position where you have one threat and your opponent has none &&\r\n    //             once your opponent responds with their one urgentDefensiveMove you are left with the ability to create a double attack. \r\n    function distantForcedWinCreatingMoves(moveList = history) {\r\n        let distantForcedWinCreatingMovesList = [];\r\n        // There cannot be a distantForcedWinCreatingMove unless there are at least 5 empty squares and playerTwo has has a chance to make an error on their first move.\r\n        if (moveList.length < 2 || moveList.length > 4){\r\n            return distantForcedWinCreatingMovesList;\r\n        }\r\n        // To force a win you must force the first reply ... \r\n        forcingMoves(moveList).forEach(forcingMove => {\r\n            // ... and ensure the forced reply leaves you able to create a double attack.\r\n            let hypotheticalHistory = moveList.concat(forcingMove);\r\n            if (urgentDefensiveMoves(hypotheticalHistory).length !== 1){\r\n                console.error(`There are ${urgentDefensiveMoves(hypotheticalHistory).length} urgentDefensiveMoves in the hypotheticalHistory being examined by distantForcedWinCreatingMoves.`)\r\n            }\r\n            let urgentDefensiveMove = urgentDefensiveMoves(hypotheticalHistory)[0];\r\n            hypotheticalHistory = hypotheticalHistory.concat(urgentDefensiveMove);\r\n            // console.log(`The one urgent defensive move is ${urgentDefensiveMove} leading to position: ${hypotheticalHistory}`);\r\n            if (thereIsADoubleAttackCreatingMove(hypotheticalHistory)){\r\n                distantForcedWinCreatingMovesList = distantForcedWinCreatingMovesList.concat(forcingMove);\r\n            }\r\n        })\r\n        console.log(`distantForcedWinCreatingMoves() found the following list: ${distantForcedWinCreatingMovesList}`)\r\n        return distantForcedWinCreatingMovesList;\r\n    }\r\n    function thereIsADistantForcedWinCreatingMove(moveList = history) {\r\n        // There cannot be a distantForcedWinCreatingMove unless there are at least 5 empty squares and playerTwo has has a chance to make an error on their first move.\r\n        // return (moveList.length > 2 && moveList.length < 5 && distantForcedWinCreatingMoves(moveList).length > 0)\r\n        return (distantForcedWinCreatingMoves(moveList).length > 0)\r\n    }\r\n\r\n\r\n    \r\n    // Check if each of the squares that is is still empty is a losing Move\r\n    function gameLosingMoves(moveList = history) {  // This function should ONLY be called by getBoardHints when there are no forced Win Creating Moves\r\n        let gameLosingMoves = [];\r\n        emptySquares().forEach(square => {\r\n            let hypotheticalHistory = moveList.concat(square);\r\n            if (thereIsAForcedWin(hypotheticalHistory)) {\r\n                console.log(`I think I found a forced win after the moves: ${hypotheticalHistory}`)\r\n                gameLosingMoves = gameLosingMoves.concat(square)\r\n            }\r\n        })\r\n        console.log(`gameLosingMoves() found the following list: ${gameLosingMoves}`)\r\n        return gameLosingMoves;\r\n    }\r\n\r\n\r\n\r\n    \r\n   \r\n\r\n\r\n    // CLICK HANDLERS\r\n    function handleSquareClick(squareClicked) {\r\n        if (gameOver()) {\r\n            console.log(\"return without effects from handleSquareClick(). The Game is already over.\")\r\n            return;\r\n        }\r\n        if (!squareIsEmpty(squareClicked)) {\r\n            console.log(\"return without effects from handleSquareClick(). That square has already been claimed.\")\r\n            return;\r\n        }\r\n        // If we reach this point the clicked square is open and the game is not over yet ... \r\n        console.log(`History: ${history.concat(squareClicked)}`)\r\n        \r\n        setHistory(history.concat(squareClicked));\r\n        // This function does not pass along any of its results, it acts thru side-effects. It calls setHistory and use of that hook tells React it needs to re-render all components that depend on the state \"history\".\r\n    }\r\n    function handleUndoButtonClick() {\r\n        const shortenedHistory = history.slice(0, history.length - 1)\r\n        console.log(`handleUndoButtonClick() removed ${history[history.length - 1]} . New Shortened history: ${shortenedHistory}`);\r\n        setHistory(shortenedHistory);\r\n    }\r\n    function handleNewGameButtonClick() {\r\n        const empty = [];\r\n        console.log(`History reset to: ${empty}`);\r\n        setHistory(empty);\r\n    }\r\n    function toggleShowMovesSwitch() {\r\n        setShowMoves(!showMoves)\r\n    }\r\n    function toggleShowCommentarySwitch() {\r\n        setShowCommentary(!showCommentary)\r\n    }\r\n    \r\n    \r\n    // TURN HELPERS\r\n    // High-Level Methods that need to know whose turn it is can deduce that info by using these helpers to look at the history directly, rather than having to be invoked with a player param. \r\n    function myTurn(moveList = history) {\r\n        return (moveList.length % 2 === 0) ? 'x' : 'o' ;\r\n    }\r\n    function notMyTurn(moveList = history) {\r\n        return (moveList.length % 2 === 0) ? 'o' : 'x';\r\n    }\r\n    function other(player) {\r\n        if (player !== 'o' && player !== 'x') { console.error(`other(player) called with invalid player: ${player}`)}\r\n        return (player === 'o') ? 'x' : 'o';\r\n    }\r\n\r\n\r\n    // LOW-LEVEL HELPERS\r\n    // need to be told which player you care about b/c they may be used on EITHER the player whose turn it is or the other player.\r\n    function squaresClaimedByPlayer(player, moveList = history) {\r\n        // let history = (alteredHistory === undefined) ? history : alteredHistory\r\n        \r\n        if (player === 'x') {\r\n            return moveList.filter((squareId, index) => index % 2 === 0);\r\n        }\r\n        else if (player === 'o') {\r\n            return moveList.filter((squareId, index) => index % 2 === 1);\r\n        }\r\n        else {\r\n            console.error(`Method squaresClaimedByPlayer() called with invalid player: ${player}`)\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function lineCountsFor(player, moveList = history) {\r\n        // Based on the history state, return an array of 8 ints 0-3 indicating the number of X's or O's in each row, col, and diagonal\r\n        // const player = myTurn(moveList); \r\n        let lines = Array(8).fill(0);\r\n\r\n        squaresClaimedByPlayer(player, moveList).forEach(square => {\r\n            // Update Row\r\n            const row = Math.floor(square / 3)    // number 0, 1, or 2\r\n            lines[row]++;\r\n\r\n            // Update Col\r\n            const col = (square % 3)            // number 0, 1, or 2  +3 to account for the three indexes set asside for rows\r\n            lines[col + 3]++;\r\n\r\n            // UpSlash ?\r\n            if (square === 2 || square === 4 || square === 6) {\r\n                lines[6]++\r\n            }\r\n\r\n            // DownSlash ?\r\n            if (square === 0 || square === 4 || square === 8) {\r\n                lines[7]++\r\n            }\r\n        });\r\n        // console.log(`Status: ${status}`)\r\n        return lines;\r\n    }\r\n\r\n    \r\n\r\n    function thereIsAForcedWin(moveList = history) {\r\n        const thereIsAForcedWin = (thereIsAnImmediateWin(moveList)\r\n            || thereIsADoubleAttackCreatingMove(moveList)\r\n            || thereIsADistantForcedWinCreatingMove(moveList))\r\n        // console.log(`immediateWins(moveList).length: ${immediateWins(moveList).length}`)\r\n        // console.log(`thereIsADistantForcedWinCreatingMove(moveList).length: ${distantForcedWinCreatingMoves(moveList)ngth}`)\r\n        console.log(`forcedWinCreatingMoves based on the moveList: ${moveList} ==>  ${distantForcedWinCreatingMoves(moveList)}`)\r\n        console.log(`thereIsAForcedWin for the current player: ${thereIsAForcedWin}`)\r\n        return thereIsAForcedWin;\r\n    }\r\n\r\n\r\n\r\n    function linesWithThree(player, moveList = history) {\r\n        let linesList = [];\r\n        // console.log(`lineCountsFor : ${lineCountsFor(player)}`)\r\n        lineCountsFor(player, moveList).forEach((count, line) => {\r\n            if (count === 3) {\r\n                linesList.push(line)\r\n            }\r\n        })\r\n        // console.log(`linesWithThree() called for player '${player}'. List: ${linesList}`)\r\n        return linesList;\r\n    }\r\n\r\n    function linesWithOnlyTwo(player, moveList = history) {\r\n        let linesList = [];\r\n        lineCountsFor(player, moveList).forEach((count, line) => {\r\n            if (count === 2 && lineCountsFor(other(player), moveList)[line] === 0 ) {  \r\n                linesList.push(line)\r\n            }\r\n        })\r\n        // console.log(`List Unblocked Twos for player '${player}': ${list}`)\r\n        return linesList;\r\n    }\r\n\r\n    function linesWithOnlyOne(moveList = history) {\r\n        const player = myTurn(moveList);\r\n        let linesList = [];\r\n        lineCountsFor(player, moveList).forEach((count, line) => {\r\n            if (count === 1 && lineCountsFor(other(player), moveList)[line] === 0) {\r\n                linesList.push(line)\r\n            }\r\n        })\r\n        // console.log(`List Unblocked Ones for player '${player}' based on moveList ${moveList} ==> ${linesList}`)\r\n        return linesList;\r\n    }\r\n    function emptyLines(moveList = history) {\r\n        let linesList = [];\r\n        lineCountsFor('x', moveList).forEach((count, line) => {\r\n            if (count === 0 && lineCountsFor('o', moveList)[line] === 0) {\r\n                linesList.push(line)\r\n            }\r\n        })\r\n        console.log(`List Empty Lines: ${linesList}`)\r\n        return linesList;\r\n    }\r\n    function blockedLines(moveList = history) {\r\n        let linesList = [];\r\n        lineCountsFor('x', moveList).forEach((count, line) => {\r\n            if (count > 0 && lineCountsFor('o', moveList)[line] > 0) {\r\n                linesList.push(line)\r\n            }\r\n        })\r\n        console.log(`List Blocked Lines: ${linesList}`)\r\n        return linesList;\r\n    }\r\n    function allLines() {\r\n        // Top Row, Middle Row, Bottom Row, \r\n        // Left Column, Middle Column, Right Column,\r\n        // Upslash Diagonal, Downslash Diagonal\r\n        return [0, 1, 2, 3, 4, 5, 6, 7]\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n\r\n    \r\n    \r\n    \r\n\r\n    // list the squareIds that fall in a given lineId\r\n    function squaresInLine(lineId) {\r\n        // console.log(`getSquares() was called with lineId: ${lineId}`)\r\n        let squareIds;\r\n        switch (lineId) {\r\n            case 0:\r\n                squareIds = [0, 1, 2];  // x / 3 < 1\r\n                break;\r\n            case 1:\r\n                squareIds = [3, 4, 5];  // (x / 3).floor() === 1\r\n                break;\r\n            case 2:\r\n                squareIds = [6, 7, 8]; // (x / 3) > 1\r\n                break;\r\n            case 3:\r\n                squareIds = [0, 3, 6];  // congruent to 0 mod 3\r\n                break;\r\n            case 4:\r\n                squareIds = [1, 4, 7];  // congruent to 1 mod 3\r\n                break;\r\n            case 5:\r\n                squareIds = [2, 5, 8];  // congruent to 2 mod 3\r\n                break;\r\n            case 6:\r\n                squareIds = [2, 4, 6];  // diagonal\r\n                break;\r\n            case 7:\r\n                squareIds = [0, 4, 8];  // congruent to 0 mod 4\r\n                break;\r\n            default:\r\n                console.error(`getSquares() was called with an invalid lineId.`)\r\n        }\r\n        return squareIds;\r\n        \r\n    }\r\n\r\n\r\n    \r\n    // BOOLEAN helpers for getStatus() and handleSquareClick()\r\n    function squareIsEmpty(square, moveList = history) {\r\n        return (!moveList.includes(square))\r\n    }\r\n    \r\n\r\n    \r\n    // function gameDrawn() {\r\n    //     return (history.length >= 9 && !wins('x') && !wins('o'));  // Board full and neither player has a win\r\n    // }\r\n    function gameDrawn() {\r\n        return (blockedLines().length >= 8 && !wins('x') && !wins('o'));  // Board full and neither player has a win\r\n    }\r\n    \r\n    \r\n    \r\n    function gameOver(moveList = history) {\r\n        return (moveList.length >= 9 \r\n            || wins('x', moveList) \r\n            || wins('o', moveList));  // Board full or there's a 3-in-a-row\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\n\r\n// My Components\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles({\r\n    numCard: {\r\n        margin: '0.5rem',\r\n        marginBottom: '1.5rem',\r\n        width: '18%',\r\n        height: '75%',\r\n        boxSizing: 'border-box',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        fontSize: '500%',\r\n        fontWeight: 'bold',\r\n    },\r\n    playerOne: {\r\n        backgroundColor: '#3f51b5',\r\n        color: 'white',\r\n        \r\n    },\r\n    playerTwo: {\r\n        backgroundColor: '#4AC9FD',\r\n        \r\n    },\r\n    \r\n});\r\n\r\nexport default function NumberCard(props) {\r\n    const classes = useStyles();\r\n    \r\n    const id = props.id\r\n    const status = props.status;  // unclaimed, playerOne, or playerTwo\r\n    const handleClick = props.handleClick\r\n    \r\n    // console.log(`NumCard Id: ${id} has status: ${status}`)\r\n    \r\n    const num = props.num\r\n    // function handleSquareClick(id) = props.handleSquareClick\r\n\r\n    let className;\r\n    switch (status) {\r\n        case 'playerOne':\r\n            className = `${classes.numCard} ${classes.playerOne} `\r\n            break;\r\n        case 'playerTwo':\r\n            className = `${classes.numCard} ${classes.playerTwo} `\r\n            break;\r\n        case 'unclaimed':\r\n            className = `${classes.numCard} `\r\n            break;\r\n        default:\r\n            throw console.error(\"number card passed invalid status\");\r\n    }\r\n    //className={`${classes.square} ${classes.red} `}\r\n    return (\r\n        <Paper\r\n            elevation={4}\r\n            className={className}\r\n            onClick={() => handleClick(id)}  // number cards start with One.\r\n        >\r\n            {id}\r\n        </Paper>\r\n        \r\n    )\r\n}","import React from 'react';\r\n\r\n// My Components\r\nimport NumberCard from \"../NumberCard\";\r\n\r\n// MUI  components\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles({\r\n    board: {\r\n        // border: 'solid red 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        \r\n        // alignContent: 'center',\r\n        // justifyContent: 'center',\r\n    },\r\n    row1: {\r\n        // border: 'solid red 1px',\r\n        width: '100%',\r\n        height: '50%',\r\n        \r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n\r\n        alignItems: 'flex-end',\r\n        justifyContent: 'center',\r\n    },\r\n    row2: {\r\n        // border: 'solid red 1px',\r\n        width: '100%',\r\n        height: '50%',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n\r\n        alignItems: 'start',\r\n        justifyContent: 'center',\r\n    },\r\n});\r\n\r\n// .circle - container {\r\n//     position: relative;\r\n//     width: 24em;\r\n//     height: 24em;\r\n//     padding: 2.8em;\r\n//     /*2.8em = 2em*1.4 (2em = half the width of a link with img, 1.4 = sqrt(2))*/\r\n//     border: dashed 1px;\r\n//     border - radius: 50 %;\r\n//     margin: 1.75em auto 0;\r\n// }\r\n    // .circle - container a {\r\n    // display: block;\r\n    // position: absolute;\r\n    // top: 50 %; left: 50 %;\r\n    // width: 4em; height: 4em;\r\n    // margin: -2em;\r\n// }\r\n    // .circle - container img { display: block; width: 100 %; }\r\n    // .deg0 { transform: translate(12em); } /* 12em = half the width of the wrapper */\r\n    // .deg45 { transform: rotate(45deg) translate(12em) rotate(-45deg); }\r\n    // .deg135 { transform: rotate(135deg) translate(12em) rotate(-135deg); }\r\n    // .deg180 { transform: translate(-12em); }\r\n    // .deg225 { transform: rotate(225deg) translate(12em) rotate(-225deg); }\r\n    // .deg315 { transform: rotate(315deg) translate(12em) rotate(-315deg); }\r\n\r\nexport default function Board(props) {\r\n    const classes = useStyles();\r\n    \r\n    // const history = props.history;\r\n    // console.log(`Board recieved history: ${history}`)\r\n\r\n    const boardStatus = props.boardStatus;\r\n    const handleCardClick = props.handleCardClick;\r\n    \r\n    let board = [];\r\n    for (let num = 1; num <= 9; num++) {\r\n        let newNumberCard =\r\n            <NumberCard\r\n                key={num}\r\n                id={num}\r\n                status={boardStatus[num]}     // number cards start with One.\r\n                handleClick={handleCardClick}\r\n            />\r\n        ;\r\n        board = board.concat(newNumberCard);\r\n    }\r\n    \r\n    \r\n\r\n    return (\r\n        <Box className={classes.board}>\r\n            <Box className={classes.row1}>\r\n                {board.slice(0, 5)}\r\n            </Box>\r\n            <Box className={classes.row2}>\r\n                {board.slice(5)}\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\r\n\r\n\r\n\r\n// My Components\r\nimport Board from \"../boards/FifteenBoard\";\r\nimport Panel from \"../Panel\";\r\n\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\n\r\n// Custom Styling\r\n// import './TicTacToe.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CardContent } from '@material-ui/core';\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        // border: 'solid navy 1px',\r\n\r\n        width: '100%',\r\n        height: '100%',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        // justifyContent: 'center',\r\n        backgroundColor: '#4AC9FD',\r\n\r\n        borderRadius: '1vmin',\r\n\r\n\r\n    },\r\n    boardArea: {\r\n        backgroundColor: '#ffffff',\r\n        borderRadius: 'inherit',\r\n        width: 'calc(100% - 4rem)',\r\n        padding: '1rem',\r\n        marginBottom: '1rem',\r\n\r\n\r\n        height: '55%',\r\n\r\n        flex: '0 1 55%',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        // justifyContent: 'center',\r\n    },\r\n    panelArea: {\r\n        backgroundColor: '#ffffff',\r\n        borderRadius: 'inherit',\r\n        width: 'calc(100% - 4rem)',\r\n        padding: '1rem',\r\n        \r\n        marginBottom: '0rem',\r\n        height: '37%',\r\n        flex: '1 1 37%',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n}));\r\n\r\n\r\nexport default function FifteenGame() {\r\n    const classes = useStyles();\r\n\r\n    // CONVENTION: History refers to actual game state.  A moveList is similar but may be a hypotetical position. \r\n    // a moveList implies that it is a sequential list of the number cards claimed turn by turn.  \r\n    // A moveSet on the other hand is a subset of a moveList, numbers that have all been claimed by the same player. \r\n    // \r\n\r\n    let [history, setHistory] = useState([]);\r\n    \r\n    // HINTS shown on board. May not implement in this game.\r\n    let [showMoves, setShowMoves] = useState(false);\r\n    // let [showMoves, setShowMoves] = useState(true); \r\n    \r\n    // COACH'S COMMENTARY. May not implement in this game. \r\n    // let [showCommentary, setShowCommentary] = useState(false);  \r\n    let [showCommentary, setShowCommentary] = useState(true);\r\n\r\n    // PLAY AGAINST BOT. Default is two human players. \r\n    let [playAgainstBot, setPlayAgainstBot] = useState(false);  \r\n    // let [playAgainstBot, setPlayAgainstBot] = useState(true);\r\n\r\n    // BOT MOVES FIRST. Disabled switch unless playAgainstBot mode is set to true. \r\n    let [botMovesFirst, setBotMovesFirst] = useState(false);\r\n    // let [botMovesFirst, setBotMovesFirst] = useState(true);\r\n\r\n    // BOT PLAYS PERFECT. Disabled switch unless playAgainstBot mode is set to true. \r\n    // Easy vs Hard Mode. In easy mode Bot makes 1 game losing mistake per game. in Hard mode the Bot always gets a draw. \r\n    // let [botPlaysPerfectly, setBotPlaysPerfectly] = useState(false);\r\n    let [botPlaysPerfectly, setBotPlaysPerfectly] = useState(true);\r\n\r\n\r\n    return (\r\n        <Box className={classes.root} >\r\n            <Box className={classes.boardArea} >\r\n                <Board\r\n                    boardStatus={getBoardStatus()}\r\n                    // boardColors={getBoardColors()}\r\n                    handleCardClick={handleCardClick}\r\n                />\r\n            </Box>\r\n            <Box className={classes.panelArea}>\r\n                <Panel\r\n                    gameType='FifteenGame'\r\n                    // data={getPanelData(history)} \r\n                    status={gameStatus()}\r\n                    // commentary={getCommentary()}\r\n                    // showMoves={showMoves}\r\n                    // showCommentary={showCommentary}\r\n                    handleUndoButtonClick={handleUndoButtonClick}\r\n                    handleNewGameButtonClick={handleNewGameButtonClick}\r\n\r\n\r\n                    togglePlayAgainstBotSwitch={togglePlayAgainstBot}\r\n                    toggleBotMovesFirstSwitch={toggleBotMovesFirst}\r\n                />\r\n            </Box>\r\n        </Box>\r\n    );\r\n\r\n\r\n    function getBoardStatus(moveList = history) {\r\n        let boardStatus = Array(10).fill('unclaimed')\r\n        moveList.forEach((numberClaimed, turnNumber) => {\r\n            boardStatus[numberClaimed] = (turnNumber % 2 === 0) ? 'playerOne' : 'playerTwo';\r\n        })\r\n        return boardStatus;\r\n    }\r\n\r\n\r\n    // CLICK HANDLERS\r\n    function handleCardClick(cardClicked) {\r\n        if (gameOver()) {\r\n            console.log(\"return without effects from handleCardClick(). The Game is already over.\")\r\n            return;\r\n        }\r\n        if (cardClaimed(cardClicked)) {\r\n            console.log(\"return without effects from handleCardClick(). That number has already been claimed.\")\r\n            return;\r\n        }\r\n        console.log(`History: ${history.concat(cardClicked)}`)\r\n        setHistory(history.concat(cardClicked));\r\n        // This function does not pass along any of its results, it acts thru side-effects. It calls setHistory and use of that hook tells React it needs to re-render all components that depend on the state \"history\".\r\n    }\r\n    function handleUndoButtonClick() {\r\n        const shortenedHistory = history.slice(0, history.length - 1)\r\n        console.log(`handleUndoButtonClick() removed ${history[history.length - 1]} . New Shortened history: ${shortenedHistory}`);\r\n        setHistory(shortenedHistory);\r\n    }\r\n    function handleNewGameButtonClick() {\r\n        const empty = [];\r\n        console.log(`History reset to: ${empty}`);\r\n        setHistory(empty);\r\n    }\r\n    function togglePlayAgainstBot() {\r\n        setPlayAgainstBot(!playAgainstBot)\r\n    }\r\n    function toggleBotMovesFirst() {\r\n        setBotMovesFirst(!botMovesFirst)\r\n    }\r\n\r\n\r\n    function gameStatus(moveList = history) {\r\n        if (wins('playerOne', moveList)) {\r\n            return (`Player one wins!`)\r\n        }\r\n        else if (wins('playerTwo', moveList)) {\r\n            return (`Player two wins!`)\r\n        }\r\n        else if (gameDrawn(moveList)) {\r\n            return (`Draw.`)\r\n        }\r\n        else if (moveList.length % 2 === 0) {\r\n            return (`Player ones's turn.`)\r\n        }\r\n        else if (moveList.length % 2 === 1) {\r\n            return (`Player two's turn.`)\r\n        }\r\n        else {\r\n            console.error(\"A call to gameStatus() did not work!\");\r\n            return\r\n        }\r\n    }\r\n\r\n    function gameOver(moveList = history) {\r\n        \r\n        // TODO //\r\n        return false;\r\n    }\r\n\r\n    function cardClaimed(cardClicked, moveList = history){\r\n\r\n        // TODO //\r\n        return (moveList.includes(cardClicked));\r\n    }\r\n\r\n    // WON GAME defined: the player specified has all three squares in at least one line.\r\n    function wins(player, moveList = history) {\r\n        let myMoves = filterMoves(player, moveList = history)\r\n        sumsOfTwo(myMoves)\r\n        \r\n        return (false);\r\n    }\r\n\r\n    function gameDrawn(moveList = history) {\r\n        return (false);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // FILTER MOVES: Reduce a movesList to only the moves by the specified player\r\n    function filterMoves(player, moveList = history) {\r\n        if (player !== \"playerOne\" && player !== \"playerTwo\"){\r\n            console.error(`filterMoves() recieved an invalid player prop.`)\r\n            return 1;\r\n        }\r\n        let num = (player === \"playerOne\") ? 0 : 1;\r\n        let myMoves = moveList.filter((move, turnNumber) => turnNumber % 2 === num)\r\n        // console.log(`filterMoves() called for ${player} found these moves: ${myMoves}`)\r\n        return (myMoves);\r\n    }\r\n\r\n    // An array listing the element-sums of each three-element subset of the moveSet. \r\n    function sumsOfThree(moveSet) {  \r\n        // nested loops don't scale but here they don't need to! 5 choose 3 is only 10!\r\n        // for (let i = 0, i > )\r\n    }\r\n\r\n    \r\n    // An array listing the element-sums of each two-element subset of the moveSet. \r\n    function sumsOfTwo(moveSet) {\r\n        // nested loops don't scale but here they don't need to! 5 choose 2 is only 10!\r\n        let sums = [];\r\n        for (let i = 0; i < moveSet.length - 1; i++){\r\n            for (let j = i + 1; j < moveSet.length; j++){\r\n                let sum = moveSet[i] + moveSet[j];\r\n                console.log(`Sum of i + j: ${sum}`)\r\n                sums.push(sum);\r\n            }\r\n        }\r\n        console.log(`Sums of two-element subsets of ${moveSet} are: ${sums}`)\r\n        return sums;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n    // The <Game> holds all state and most helper and handler function definitions.\r\n    // It passes what it needs to to the board to render and to the panel.\r\n\r\n    // The board data to render is a the latest entry in history.  We will have an 'undo' but not a 'redo' button.  May add a Make Computer Move\r\n    // function getBoardSymbols(moveList = history) {\r\n    //     let data = Array(9).fill('');  // Start with an array representing a board of NINE empty squares\r\n    //     squaresClaimedByPlayer('x').forEach(squareId => {\r\n    //         data[squareId] = 'x';\r\n    //     });\r\n    //     squaresClaimedByPlayer('o').forEach(squareId => {\r\n    //         data[squareId] = 'o';\r\n    //     });\r\n    //     return data;  // this method only deals with current board position, not hypotheticals.  Thus, it wants to use a version of helper squaresClaimedByPlayer() that does not require a moveList be explicitly passed in. \r\n    // }\r\n\r\n    // function getBoardColors() {\r\n    //     // If the game is won highlight the winning line(s), whether hints are turned on or off.\r\n    //     if (wins('x') || wins('o')) {\r\n    //         return highlightWins();\r\n    //     }\r\n    //     // If hints are turned off return colors [] filled with 'noColor' strings.\r\n    //     if (showMoves === false) {\r\n    //         return Array(9).fill('noColor');\r\n    //     }\r\n    //     // If hints are turned on return colors [] filled by getBoardHints().\r\n    //     if (showMoves === true) {\r\n    //         // console.log(`Board Hints: ${getBoardHints()}`)\r\n    //         return getBoardHints();\r\n    //     }\r\n    // }\r\n\r\n\r\n    // // list all squareIds not appearing in the history or an \r\n    // function emptySquares(moveList = history) {\r\n    //     let emptySquaresList = [];\r\n    //     for (let i = 0; i < 9; i++) {\r\n    //         if (!moveList.includes(i)) {\r\n    //             emptySquaresList.push(i)\r\n    //         }\r\n    //     }\r\n    //     // console.log(`List Empty Squares: ${emptySquaresList}`)\r\n    //     return emptySquaresList;\r\n    // }\r\n    // function claimedSquares(moveList = history) {\r\n    //     let claimedSquaresList = [];\r\n    //     for (let i = 0; i < 9; i++) {\r\n    //         if (moveList.includes(i)) {\r\n    //             claimedSquaresList.push(i)\r\n    //         }\r\n    //     }\r\n    //     return claimedSquaresList;\r\n    // }\r\n    // function unknownSquares(hintList) {\r\n    //     let unknownSquares = [];\r\n    //     hintList.forEach((square, index) => {\r\n    //         if (square === 'unknown') {\r\n    //             unknownSquares = unknownSquares.concat(index)\r\n    //         }\r\n    //     });\r\n    //     // console.log(`Squares with unknown value: ${unknownSquares}`);\r\n    //     return unknownSquares;\r\n    // }\r\n\r\n\r\n    // TODO\r\n    function getBoardHints() {\r\n        let hints = Array(9).fill('unknown');  // Start with an array representing a board of NINE squares.\r\n        return hints;\r\n    }\r\n\r\n\r\n    // HIGH-LEVEL PANEL HELPERS no params\r\n\r\n    // function getStatus() {\r\n    //     if (wins('x')) {\r\n    //         return (`X wins!`)\r\n    //     }\r\n    //     else if (wins('o')) {\r\n    //         return (`O wins!`)\r\n    //     }\r\n    //     else if (gameDrawn()) {\r\n    //         return (`Draw.`)\r\n    //     }\r\n    //     else if (history.length % 2 === 0) {\r\n    //         return (`X's turn.`)\r\n    //     }\r\n    //     else if (history.length % 2 === 1) {\r\n    //         return (`O's turn.`)\r\n    //     }\r\n    //     else {\r\n    //         console.error(\"A call to getStatus() did not work!\");\r\n    //         return\r\n    //     }\r\n    // }\r\n    // function getCommentary() {\r\n    //     // console.log(`getCommentary() called while showCommentary = ${showCommentary}`)\r\n    //     if (gameOver()) {\r\n    //         return `Game Over`\r\n    //     }\r\n    //     if (!showCommentary) {\r\n    //         return `Coach's commentary would appear here if turned on in the settings.`\r\n    //     }\r\n\r\n    //     // If no moves have been made\r\n    //     if (history.length === 0) {\r\n    //         return `It may look like X has  9 different options but \r\n    //         when you consider symmetry there are really only 3: Center, Edge, or Corner.\r\n    //         In starting position, all of X's choices are safe and each leads to different follow up strategies.`\r\n    //     }\r\n\r\n    //     // If one move has been made\r\n    //     if (history.length === 1 && history[0] === 4) {\r\n    //         return `O really only has two options, edge or corner. One is good and lets O\r\n    //         force a draw. The other is bad and gives X a chance to win.`\r\n    //     }\r\n    //     if (history.length === 1 && history[0] !== 4 && history[0] % 2 === 0) {\r\n    //         return `In the Corner opening O has five non-symmetrical options. All except one\r\n    //         are mistakes that let X force a win.`\r\n    //     }\r\n    //     if (history.length === 1 && history[0] !== 4 && history[0] % 2 === 1) {\r\n    //         return `The Edge opening has the most tricks and traps! \r\n    //         O has five non-symmetrical options. Three are good and let O force a draw. \r\n    //         The other two are mistakes that let X force a win.`\r\n    //     }\r\n\r\n    //     // If two moves has been made\r\n    //     if (history.length === 2) {\r\n    //         let message = '';\r\n    //         if (forcedWinCreatingMoves().length > 0) {\r\n    //             message = `O's first move was a mistake and now X can ensure victory! But how?`\r\n    //         }\r\n    //         else {\r\n    //             let answer = (gameLosingMoves().length > 0) ? 'Yes! So be careful.' : 'No! You\\'re safe no matter what.';\r\n    //             message = `O's first move was sound. None of X's current options ensure victory, but do any actually lose?  ${answer}`\r\n    //         }\r\n    //         return message;\r\n    //     }\r\n\r\n    //     // If three moves have been made\r\n    //     if (history.length >= 3) {\r\n    //         let message = '';\r\n    //         if (thereIsAnImmediateWin()) {\r\n    //             message = `You have a winning move! Defensive moves are irrelevant.`\r\n    //         }\r\n    //         else if (thereIsAnUnstoppableAttack()) {\r\n    //             message = `You cannot win right now and cannot block all of your opponent's threats. Which move led you to from a draw to defeat?`\r\n    //         }\r\n    //         else if (thereIsAWinningDoubleAttack()) {\r\n    //             message = `You can set up a winning double attack! Don't settle for empty threats, \r\n    //             think hard and be sure that you are setting yourself up to win no matter what!`\r\n    //         }\r\n    //         else if (thereIsAnUrgentDefensiveMove()) {\r\n    //             message = `You cannot win right now so you must defend the one key square.`\r\n    //         }\r\n\r\n    //         else {\r\n    //             let answer = (gameLosingMoves().length > 0) ?\r\n    //                 'Nonetheless, it is possible for you to make a mistake and lose right now. Play carefully!' :\r\n    //                 'You\\'re on track for a draw no matter what move you play in this position.';\r\n    //             message = `You have neither a winning attack nor an urgent defensive move. ${answer}`\r\n    //         }\r\n    //         return message;\r\n    //     }\r\n\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // MID-LEVEL HELPERS for getBoardColors() and getBoardHints()\r\n    // function highlightWins() {\r\n    //     let highlightedSquares = Array(9).fill('noColor')\r\n    //     if (!gameOver()) {  // Assert: we only reach this point if either x or o has won.\r\n    //         console.error(`highlightWins() was called but found that the game is not over`);\r\n    //     }\r\n    //     let winner = (wins('x')) ? 'x' : 'o';\r\n    //     // let lines = lines(winner);\r\n    //     linesWithThree(winner).forEach(line => {\r\n    //         squaresInLine(line).forEach(square => {\r\n    //             highlightedSquares[square] = 'win';\r\n    //         });\r\n    //     });\r\n    //     return highlightedSquares;\r\n    // }\r\n\r\n    // function thereIsAnImmediateWin(moveList = history) {\r\n    //     return (immediateWins(moveList).length > 0)\r\n    // }\r\n\r\n    // function immediateWins(moveList = history) {\r\n    //     let winningSquares = [];\r\n    //     const player = myTurn(moveList);\r\n    //     linesWithOnlyTwo(player, moveList).forEach((line) => {\r\n    //         squaresInLine(line).forEach((square) => {\r\n    //             if (squareIsEmpty(square)) {\r\n    //                 winningSquares.push(square);\r\n    //                 // hints[square] = 'win'; This code used to be part of a bloated getBoardHints() method and at that time it had responsibility for actually assigning colors in the hints array to the square it now simply returns in a list.\r\n    //             }\r\n    //         })\r\n    //     })\r\n    //     // console.log(`immediateWins() found the following winningMoves: ${winningSquares}`)\r\n    //     return winningSquares;\r\n    // }\r\n\r\n    // function thereIsAnUnstoppableAttack(moveList = history) {\r\n    //     return (urgentDefensiveMoves(moveList).length > 1)\r\n    // }\r\n\r\n    // function thereIsAnUrgentDefensiveMove(moveList = history) {\r\n    //     return (urgentDefensiveMoves(moveList).length > 0)\r\n    // }\r\n\r\n    // function urgentDefensiveMoves(moveList = history) {\r\n    //     const player = myTurn(moveList);\r\n    //     let urgentDefensiveMovesList = [];\r\n    //     linesWithOnlyTwo(other(player), moveList).forEach((line) => {\r\n    //         // console.log(`urgentDefensiveMoves found line ${line} has only two ${other(player)}`)\r\n    //         squaresInLine(line).forEach((square) => {\r\n    //             if (squareIsEmpty(square, moveList)) {\r\n    //                 urgentDefensiveMovesList.push(square);\r\n    //             }\r\n    //         })\r\n    //     })\r\n    //     // console.log(`urgentDefensiveMoves() found the following moves for ${player}: ${urgentDefensiveMovesList}`);\r\n    //     return urgentDefensiveMovesList;\r\n    // }\r\n\r\n    // function threatCreatingMoves(moveList = history) {\r\n    //     // This list may contain duplicates. A squareId that appears twice creates two separate two-in-a-line threats.\r\n    //     const player = myTurn(moveList);\r\n    //     const threatCreatingMoves = [];\r\n    //     linesWithOnlyOne(moveList).forEach((line) => {\r\n    //         squaresInLine(line).forEach((square) => {\r\n    //             if (squareIsEmpty(square, moveList)) {                 // Don't add an already claimed square to the list of therat creating moves!\r\n    //                 threatCreatingMoves.push(square);\r\n    //             }\r\n    //         })\r\n    //     })\r\n    //     // console.log(`Player '${player}' can create threats on the following squares: ${threatCreatingMoves}`)\r\n    //     return threatCreatingMoves;\r\n    // }\r\n\r\n    // function singleAttackCreatingMoves(moveList = history) {\r\n    //     return threatCreatingMoves(moveList).filter((square, index) => threatCreatingMoves(moveList).indexOf(square) === index);\r\n    // }\r\n\r\n\r\n\r\n    // // DEFINITION: a DoubleAttack is a board position where one player has two threats and the other player has none.  In other words, a double attack can only exist if it is winning and it is not called a 'double attack' if it is trumped by an immediate win for the opponent.\r\n    // function thisIsADoubleAttackFor(player, moveList = history) {\r\n    //     let myThreatCount = linesWithOnlyTwo(player, moveList).length;\r\n    //     let opponentThreatCount = linesWithOnlyTwo(other(player), moveList).length;\r\n    //     return (myThreatCount === 2 && opponentThreatCount === 0);\r\n    // }\r\n\r\n    // function doubleAttackCreatingMoves(moveList = history) {\r\n    //     // ERROR this fails to catch double attacks that are created by ignoring an immediateWin\r\n    //     // let doubleAttackCreatingMoves = threatCreatingMoves(moveList).filter((square, index) => threatCreatingMoves(moveList).indexOf(square) !== index);\r\n    //     let doubleAttackCreatingMoves = [];\r\n    //     let player = myTurn(moveList);\r\n    //     emptySquares(moveList).forEach(testSquare => {\r\n    //         let hypotheticalHistory = moveList.concat(testSquare);\r\n    //         if (thisIsADoubleAttackFor(player, hypotheticalHistory)) {\r\n    //             doubleAttackCreatingMoves = doubleAttackCreatingMoves.concat(testSquare)\r\n    //         }\r\n    //     })\r\n    //     // console.log(`doubleAttackCreatingMoves in position: ${moveList} found these attacks: ${doubleAttackCreatingMoves}`);\r\n    //     return doubleAttackCreatingMoves;\r\n    // }\r\n\r\n    // function thereIsAWinningDoubleAttack(moveList = history) {\r\n    //     return (winningDoubleAttackCreatingMoves(moveList).length > 0)\r\n    // }\r\n\r\n    // function winningDoubleAttackCreatingMoves(moveList = history) {\r\n    //     let winningDoubleAttacksList = [];\r\n    //     // A doubleAttack is winning IFF it can be made without ignoring an urgentDefensiveMove.\r\n    //     // A doubleAttackCreatingMove is winning IF there were no urgentDefensiveMoves OR IF it is identical to the ONE urgentDefensiveMove.\r\n    //     doubleAttackCreatingMoves(moveList).forEach(keyAttackingMove => {\r\n    //         // IF there are ZERO urgentDefensiveMoves then every doubleAttackCreatingMove is winning.\r\n    //         if (urgentDefensiveMoves(moveList).length === 0) {\r\n    //             winningDoubleAttacksList = winningDoubleAttacksList.concat(keyAttackingMove);\r\n    //         }\r\n    //         // IF there is ONE urgentDefensiveMove then the only doubleAttackCreatingMove is winning.\r\n    //         else if (urgentDefensiveMoves(moveList).length === 1) {\r\n    //             if (urgentDefensiveMoves(moveList)[0] === keyAttackingMove) {\r\n    //                 winningDoubleAttacksList = winningDoubleAttacksList.concat(keyAttackingMove);\r\n    //             }\r\n    //         }\r\n    //         // ELSE there are TWO or more urgentDefensiveMoves then none of the doubleAttackCreatingMoves should be added to the winning.\r\n    //     })\r\n    //     // console.log(`winningDoubleAttacksList: ${winningDoubleAttacksList}`)\r\n    //     return winningDoubleAttacksList;\r\n    // }\r\n\r\n    // By Definition: There are NO forcedWinCreatingMoves IF there is a quicker way to win OR IF the opponent already made a forcedWinCreatingMove\r\n    // function forcedWinCreatingMoves(moveList = history) {\r\n    //     let forcedWinCreatingMovesList = [];\r\n    //     if (thereIsAnImmediateWin(moveList) || thereIsAWinningDoubleAttack(moveList)) {\r\n    //         console.log(`Returning Early (list of length 0) from forcedWinCreatingMoves() because there is a quicker way to win.`)\r\n    //         return forcedWinCreatingMovesList;\r\n    //     }\r\n\r\n    //     // console.log(`forcedWinCreatingMoves found the following singleAttackCreatingMoves for player '${myTurn(moveList)}' based on the ${moveList} ==> ${singleAttackCreatingMoves(moveList)}`)\r\n    //     singleAttackCreatingMoves(moveList).forEach(threatCreatingMove => {  // At most we are examining 6 squares that might create a threat\r\n    //         let hypotheticalHistory = moveList.concat(threatCreatingMove);\r\n    //         let forcedDefensiveMove = urgentDefensiveMoves(hypotheticalHistory)[0];\r\n    //         hypotheticalHistory = hypotheticalHistory.concat(forcedDefensiveMove);\r\n    //         // console.log(`After adding the threatCreatingMove \"${threatCreatingMove}\" and the urgentDefensiveMove \"${keyDefensiveMove}\" to the moveList the hypotheticalHistory is now: ${hypotheticalHistory}`);\r\n    //         if (thereIsAWinningDoubleAttack(hypotheticalHistory)) {\r\n    //             // console.log(`In the hypotheticalHistory: ${hypotheticalHistory} these are the winningDoubleAttackCreatingMoves: ${winningDoubleAttackCreatingMoves(hypotheticalHistory)}`);\r\n    //             forcedWinCreatingMovesList = forcedWinCreatingMovesList.concat(threatCreatingMove);\r\n    //         }\r\n    //     })\r\n    //     // After finding all the \r\n    //     if (thereIsAnUrgentDefensiveMove()) {\r\n    //         console.log(`Since thereIsAnUrgentDefensiveMove the forcedWinCreatingMovesList must be filtered.`)\r\n    //         forcedWinCreatingMovesList = forcedWinCreatingMovesList.filter(move => move === urgentDefensiveMoves(moveList)[0]);\r\n    //     }\r\n    //     // console.log(`forcedWinCreatingMoves() found the following list: ${forcedWinCreatingMovesList}`)\r\n    //     return forcedWinCreatingMovesList;\r\n    // }\r\n\r\n    // // Check if each of the squares that is is still empty is a losing Move\r\n    // function gameLosingMoves(moveList = history) {  // This function should ONLY be called by getBoardHints when there are no forced Win Creating Moves\r\n    //     let gameLosingMoves = [];\r\n    //     emptySquares().forEach(square => {\r\n    //         const hypotheticalHistory = moveList.concat(square);\r\n    //         if (thereIsAForcedWin(hypotheticalHistory)) {\r\n    //             // console.log(`I think I found a forced win after the moves: ${hypotheticalHistory}`)\r\n    //             gameLosingMoves = gameLosingMoves.concat(square)\r\n    //         }\r\n    //     })\r\n    //     console.log(`gameLosingMoves() found the following list: ${gameLosingMoves}`)\r\n    //     return gameLosingMoves;\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // CLICK HANDLERS\r\n//     function handleSquareClick(squareClicked) {\r\n//         if (gameOver()) {\r\n//             console.log(\"return without effects from handleSquareClick(). The Game is already over.\")\r\n//             return;\r\n//         }\r\n//         if (!squareIsEmpty(squareClicked)) {\r\n//             console.log(\"return without effects from handleSquareClick(). That square has already been claimed.\")\r\n//             return;\r\n//         }\r\n//         // If we reach this point the clicked square is open and the game is not over yet ... \r\n//         console.log(`History: ${history.concat(squareClicked)}`)\r\n\r\n//         setHistory(history.concat(squareClicked));\r\n//         // This function does not pass along any of its results, it acts thru side-effects. It calls setHistory and use of that hook tells React it needs to re-render all components that depend on the state \"history\".\r\n//     }\r\n//     function handleUndoButtonClick() {\r\n//         const shortenedHistory = history.slice(0, history.length - 1)\r\n//         console.log(`handleUndoButtonClick() removed ${history[history.length - 1]} . New Shortened history: ${shortenedHistory}`);\r\n//         setHistory(shortenedHistory);\r\n//     }\r\n//     function handleNewGameButtonClick() {\r\n//         const empty = [];\r\n//         console.log(`History reset to: ${empty}`);\r\n//         setHistory(empty);\r\n//     }\r\n//     function toggleShowMovesSwitch() {\r\n//         setShowMoves(!showMoves)\r\n//     }\r\n//     function toggleShowCommentarySwitch() {\r\n//         setShowCommentary(!showCommentary)\r\n//     }\r\n\r\n\r\n//     // TURN HELPERS\r\n//     // High-Level Methods that need to know whose turn it is can deduce that info by using these helpers to look at the history directly, rather than having to be invoked with a player param. \r\n//     function myTurn(moveList = history) {\r\n//         return (moveList.length % 2 === 0) ? 'x' : 'o';\r\n//     }\r\n//     function notMyTurn(moveList = history) {\r\n//         return (moveList.length % 2 === 0) ? 'o' : 'x';\r\n//     }\r\n//     function other(player) {\r\n//         if (player !== 'o' && player !== 'x') { console.error(`other(player) called with invalid player: ${player}`) }\r\n//         return (player === 'o') ? 'x' : 'o';\r\n//     }\r\n\r\n\r\n//     // LOW-LEVEL HELPERS\r\n//     // need to be told which player you care about b/c they may be used on EITHER the player whose turn it is or the other player.\r\n//     function squaresClaimedByPlayer(player, moveList = history) {\r\n//         // let history = (alteredHistory === undefined) ? history : alteredHistory\r\n\r\n//         if (player === 'x') {\r\n//             return moveList.filter((squareId, index) => index % 2 === 0);\r\n//         }\r\n//         else if (player === 'o') {\r\n//             return moveList.filter((squareId, index) => index % 2 === 1);\r\n//         }\r\n//         else {\r\n//             console.error(`Method squaresClaimedByPlayer() called with invalid player: ${player}`)\r\n//             return undefined;\r\n//         }\r\n//     }\r\n\r\n\r\n\r\n\r\n//     function lineCountsFor(player, moveList = history) {\r\n//         // Based on the history state, return an array of 8 ints 0-3 indicating the number of X's or O's in each row, col, and diagonal\r\n//         // const player = myTurn(moveList); \r\n//         let lines = Array(8).fill(0);\r\n\r\n//         squaresClaimedByPlayer(player, moveList).forEach(square => {\r\n//             // Update Row\r\n//             const row = Math.floor(square / 3)    // number 0, 1, or 2\r\n//             lines[row]++;\r\n\r\n//             // Update Col\r\n//             const col = (square % 3)            // number 0, 1, or 2  +3 to account for the three indexes set asside for rows\r\n//             lines[col + 3]++;\r\n\r\n//             // UpSlash ?\r\n//             if (square === 2 || square === 4 || square === 6) {\r\n//                 lines[6]++\r\n//             }\r\n\r\n//             // DownSlash ?\r\n//             if (square === 0 || square === 4 || square === 8) {\r\n//                 lines[7]++\r\n//             }\r\n//         });\r\n//         // console.log(`Status: ${status}`)\r\n//         return lines;\r\n//     }\r\n\r\n//     function wins(player, moveList = history) {\r\n//         return (lineCountsFor(player, moveList).includes(3));\r\n//     }\r\n\r\n//     function thereIsAForcedWin(moveList = history) {\r\n//         const thereIsAForcedWin = (immediateWins(moveList).length > 0\r\n//             || winningDoubleAttackCreatingMoves(moveList).length > 0\r\n//             || forcedWinCreatingMoves(moveList).length > 0)\r\n//         // console.log(`immediateWins(moveList).length: ${immediateWins(moveList).length}`)\r\n//         // console.log(`winningDoubleAttackCreatingMoves(moveList).length: ${winningDoubleAttackCreatingMoves(moveList).length}`)\r\n//         // console.log(`forcedWinCreatingMoves based on the moves: ${moveList} ==>  ${forcedWinCreatingMoves(moveList)}`)\r\n//         // console.log(`thereIsAForcedWin for the current player: ${thereIsAForcedWin}`)\r\n//         return thereIsAForcedWin;\r\n//     }\r\n\r\n\r\n\r\n//     function linesWithThree(player, moveList = history) {\r\n//         let linesList = [];\r\n//         // console.log(`lineCountsFor : ${lineCountsFor(player)}`)\r\n//         lineCountsFor(player, moveList).forEach((count, line) => {\r\n//             if (count === 3) {\r\n//                 linesList.push(line)\r\n//             }\r\n//         })\r\n//         // console.log(`linesWithThree() called for player '${player}'. List: ${linesList}`)\r\n//         return linesList;\r\n//     }\r\n\r\n//     function linesWithOnlyTwo(player, moveList = history) {\r\n//         let linesList = [];\r\n//         lineCountsFor(player, moveList).forEach((count, line) => {\r\n//             if (count === 2 && lineCountsFor(other(player), moveList)[line] === 0) {\r\n//                 linesList.push(line)\r\n//             }\r\n//         })\r\n//         // console.log(`List Unblocked Twos for player '${player}': ${list}`)\r\n//         return linesList;\r\n//     }\r\n\r\n//     function linesWithOnlyOne(moveList = history) {\r\n//         const player = myTurn(moveList);\r\n//         let linesList = [];\r\n//         lineCountsFor(player, moveList).forEach((count, line) => {\r\n//             if (count === 1 && lineCountsFor(other(player), moveList)[line] === 0) {\r\n//                 linesList.push(line)\r\n//             }\r\n//         })\r\n//         // console.log(`List Unblocked Ones for player '${player}' based on moveList ${moveList} ==> ${linesList}`)\r\n//         return linesList;\r\n//     }\r\n//     function emptyLines(moveList = history) {\r\n//         let linesList = [];\r\n//         lineCountsFor('x', moveList).forEach((count, line) => {\r\n//             if (count === 0 && lineCountsFor('o', moveList)[line] === 0) {\r\n//                 linesList.push(line)\r\n//             }\r\n//         })\r\n//         console.log(`List Empty Lines: ${linesList}`)\r\n//         return linesList;\r\n//     }\r\n//     function blockedLines(moveList = history) {\r\n//         let linesList = [];\r\n//         lineCountsFor('x', moveList).forEach((count, line) => {\r\n//             if (count > 0 && lineCountsFor('o', moveList)[line] > 0) {\r\n//                 linesList.push(line)\r\n//             }\r\n//         })\r\n//         console.log(`List Blocked Lines: ${linesList}`)\r\n//         return linesList;\r\n//     }\r\n//     function allLines() {\r\n//         // Top Row, Middle Row, Bottom Row, \r\n//         // Left Column, Middle Column, Right Column,\r\n//         // Upslash Diagonal, Downslash Diagonal\r\n//         return [0, 1, 2, 3, 4, 5, 6, 7]\r\n//     }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     // list the squareIds that fall in a given lineId\r\n//     function squaresInLine(lineId) {\r\n//         // console.log(`getSquares() was called with lineId: ${lineId}`)\r\n//         let squareIds;\r\n//         switch (lineId) {\r\n//             case 0:\r\n//                 squareIds = [0, 1, 2];\r\n//                 break;\r\n//             case 1:\r\n//                 squareIds = [3, 4, 5];\r\n//                 break;\r\n//             case 2:\r\n//                 squareIds = [6, 7, 8];\r\n//                 break;\r\n//             case 3:\r\n//                 squareIds = [0, 3, 6];\r\n//                 break;\r\n//             case 4:\r\n//                 squareIds = [1, 4, 7];\r\n//                 break;\r\n//             case 5:\r\n//                 squareIds = [2, 5, 8];\r\n//                 break;\r\n//             case 6:\r\n//                 squareIds = [2, 4, 6];\r\n//                 break;\r\n//             case 7:\r\n//                 squareIds = [0, 4, 8];\r\n//                 break;\r\n//             default:\r\n//                 console.error(`getSquares() was called with an invalid lineId.`)\r\n//         }\r\n//         return squareIds;\r\n\r\n//     }\r\n\r\n\r\n\r\n//     // BOOLEAN helpers for getStatus() and handleSquareClick()\r\n//     function squareIsEmpty(square, moveList = history) {\r\n//         return (!moveList.includes(square))\r\n//     }\r\n\r\n\r\n\r\n//     // function gameDrawn() {\r\n//     //     return (history.length >= 9 && !wins('x') && !wins('o'));  // Board full and neither player has a win\r\n//     // }\r\n//     function gameDrawn() {\r\n//         return (blockedLines().length >= 8 && !wins('x') && !wins('o'));  // Board full and neither player has a win\r\n//     }\r\n\r\n\r\n\r\n//     function gameOver(moveList = history) {\r\n//         return (moveList.length >= 9\r\n//             || wins('x', moveList)\r\n//             || wins('o', moveList));  // Board full or there's a 3-in-a-row\r\n//     }\r\n\r\n// }\r\n","import React from 'react';\r\n\r\n// My Components\r\n\r\n\r\n// MUI  components\r\nimport Link from '@material-ui/core/Link';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles({\r\n\r\n})\r\n\r\n\r\nexport default function MagicSquares() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root} >\r\n            The Magic Squares Page\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n// My Components\r\n\r\n\r\n// MUI  components\r\nimport Link from '@material-ui/core/Link';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        // border: 'solid navy 1px',\r\n\r\n        width: '100%',\r\n        height: '100%',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'start',\r\n        backgroundColor: '#ffffff',\r\n        height: '100%',\r\n        width: '100%',\r\n        boxSizing: 'border-box',\r\n        padding: '1rem',\r\n\r\n        borderRadius: 'inherit',\r\n        overflowY: 'scroll',\r\n    },\r\n    // title: {\r\n    //     fontSize: '1.3rem',\r\n    // },\r\n    // paragraph: {\r\n    //     // textIndent: '2rem',\r\n    //     paddingBottom: '0.7rem',\r\n    // },\r\n    // buttonArea: {\r\n    //     // border: 'solid red 1px',\r\n    //     display: 'flex',\r\n    //     marginBottom: '0.5rem',\r\n    //     width: '100%',\r\n\r\n    // },\r\n    // button: {\r\n    //     margin: 'auto',\r\n    //     width: '37%',\r\n    //     backgroundColor: theme.palette.primary.dark,\r\n    //     textAlign: 'center'\r\n    // },\r\n\r\n}));\r\n\r\n\r\nexport default function StrategyPage() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Box className={classes.root} >\r\n            The Strategy Page\r\n        </Box>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n    createMuiTheme,\r\n    responsiveFontSizes,\r\n} from '@material-ui/core/styles';\r\n\r\n\r\n\r\nimport yellow from '@material-ui/core/colors/yellow';\r\nimport red from '@material-ui/core/colors/red';\r\n// import { Button, createStyles } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#b0ffff',\r\n            main: '#4AC9FD',\r\n            dark: '#1133f4',\r\n            // contrastText: '#fff'\r\n        }\r\n    },\r\n    status: {\r\n        danger: 'orange',\r\n    },\r\n    shape: {\r\n        borderRadius: 8,\r\n    }\r\n\r\n});\r\n\r\nexport default responsiveFontSizes(theme);\r\n// export default theme;","import React from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Link as RouterLink,\r\n    Route,\r\n    Switch\r\n} from \"react-router-dom\";\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n// My Components & Pages\r\nimport Navbar from './components/Navbar';\r\nimport WelcomePage from \"./components/pages/WelcomePage\";\r\nimport TicTacToeGame from './components/games/TicTacToeGame';\r\nimport FifteenGame from './components/games/FifteenGame';\r\nimport MagicSquares from \"./components/pages/MagicSquares\";\r\nimport StrategyPage from \"./components/pages/StrategyPage\";\r\n\r\n// MUI  components\r\n// import Link from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// THEMING\r\nimport theme from \"./theme\";\r\nimport {\r\n    makeStyles,\r\n    ThemeProvider\r\n} from '@material-ui/core/styles';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n        width: '100vw',\r\n        minHeight: '675px',\r\n        minWidth: '500px',\r\n\r\n\r\n        // boxSizing: 'border-box',\r\n        backgroundColor: '#ccFFFF',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'start',\r\n\r\n    },\r\n    container: {\r\n        // border: 'solid red 1px',\r\n        backgroundColor: '#4AC9FD',\r\n        height: 'min(133vw, 100vh)',\r\n        maxHeight: '1200px',\r\n        width: 'min(75vh, 100vw)',\r\n        maxWidth: '900px',\r\n        // height: containerHeight,\r\n        // width: containerWidth,\r\n        borderRadius: '2vmin',\r\n        overflow: 'hidden',\r\n        \r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        // justifyContent: 'center',\r\n    },\r\n    \r\n    footer: {\r\n        // border: 'solid red 1px',\r\n        display: 'flex',\r\n        flexDirection: 'row-reverse',\r\n        height: '3%',\r\n        width: '100%',\r\n        alignItems: 'bottom',\r\n    },\r\n    footerText: {\r\n        paddingTop: '0.7vmin',\r\n        paddingRight: '2.5vmin',\r\n        color: 'navy',\r\n        fontSize: '1.6vmin',\r\n    }\r\n}))\r\n\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n    const [pageTitle, setPageTitle] = React.useState(\"Welcome\");\r\n  \r\n    return (\r\n        <Box className={classes.root} >\r\n            <Box className={classes.container} >\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path=\"/\">\r\n                            <Navbar pageTitle={\"Welcome\"} />\r\n                            <WelcomePage />\r\n                        </Route>\r\n\r\n                        <Route path=\"/tic-tac-toe\">\r\n                            <Navbar pageTitle={\"Play Tic Tac Toe\"} />\r\n                            <TicTacToeGame />\r\n                        </Route>\r\n\r\n                        <Route path=\"/fifteen-game\">\r\n                            <Navbar pageTitle={\"Play the Fifteen Game\"} />\r\n                            <FifteenGame />\r\n                        </Route>\r\n\r\n                        <Route path=\"/magic-squares\">\r\n                            <Navbar pageTitle={\"Learn about Magic Squares\"} />\r\n                            <MagicSquares />\r\n                        </Route>\r\n\r\n                        <Route path=\"/strategy\">\r\n                            <Navbar pageTitle={\"Learn Tic Tac Toe Strategy\"} />\r\n                            <StrategyPage />\r\n                        </Route>\r\n                    </Switch>\r\n                </Router>\r\n                <Footer />\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nfunction Footer() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Box className={classes.footer} >\r\n            <Typography className={classes.footerText} noWrap >\r\n                Produced by the Nola Stem Garden\r\n            </Typography>\r\n        </Box>\r\n    );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n//   <React.StrictMode>\r\n    <App />,\r\n//   </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/nsgLogo100px.b0adebcd.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}