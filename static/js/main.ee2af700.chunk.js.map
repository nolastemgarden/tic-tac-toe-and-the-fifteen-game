{"version":3,"sources":["components/Navbar/MenuList.js","components/Navbar/MobileMenu.js","components/Navbar/Navbar.js","pages/WelcomePage.js","components/TicTacToe/Board.js","components/TicTacToe/HintColorKey.js","components/TicTacToe/HelpModal.js","components/TicTacToe/TicTacToeSettingsModal.js","components/TicTacToe/Panel.js","components/TicTacToe/TicTacToeGame.js","components/FifteenGame/Board.js","components/FifteenGame/HelpModal.js","components/FifteenGame/Panel.js","components/FifteenGame/FifteenGame.js","pages/MagicSquares.js","pages/StrategyPage.js","theme.js","App.js","serviceWorker.js","index.js","images/nsgLogoSnipped.png","logo.svg"],"names":["useStyles","makeStyles","theme","list","width","backgroundColor","listItem","color","palette","common","white","icon","alignContent","justifyContent","TeachingServicesList","classes","Fragment","ListItem","key","className","button","component","RouterLink","to","Icon","root","ListItemText","primary","primaryTypographyProps","variant","pathname","fontSize","main","height","fullList","drawer","paper","menu","display","alignItems","menuButton","MobileMenu","anchor","React","useState","open","state","setState","toggleDrawer","event","type","Box","Button","onClick","aria-controls","aria-haspopup","menuIcon","Drawer","onClose","role","onKeyDown","List","heightInRem","navbarRoot","zIndex","navbarContainer","flexDirection","spacerBox","padding","logo","backgroundImage","backgroundPosition","backgroundRepeat","backgroundSize","pageTitle","flex","Navbar","props","OneSizeNavbar","AppBar","navbar","position","elevation","Container","maxWidth","disableGutters","Grid","container","item","xs","Typography","align","minHeight","textAlign","marginRight","WelcomePage","gutterBottom","paragraph","mb","href","p","board","top","left","marginTop","row","margin","flexWrap","square","iconX","black","iconO","unknown","noColor","claimed","unclaimed","win","draw","lose","immediateWin","doubleAttackCreatingMove","forcedWinCreatingMove","urgentDefensiveMove","unavoidableDefeat","gameLosingMove","drawingMove","Board","handleSquareClick","boardIcons","boardColors","rows","newRow","Row","rowId","rowIcons","slice","rowColors","concat","squares","col","squareId","newSquare","Square","id","symbol","handleClick","console","error","Paper","border","boxSizing","keyItem","flexGrow","colorTile","borderRadius","HintColorKey","spacing","helpModal","buttonIcon","modal","background","boxShadow","shadows","maxHeight","HowToPlayModal","setOpen","Modal","aria-labelledby","aria-describedby","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","heading","body","switchBox","fontWeight","marginBlockEnd","marginBlockStart","panel","infoArea","controls","Panel","mode","gameStatus","gameType","gameOver","moveNumber","gameNumber","commentary","handleNewGameClick","toggleShowHints","handleUndoClick","showHints","scoreBoard","showCommentary","toggleShowCommentarySwitch","noWrap","record","commentaryBoard","learnButtons","UndoButton","ShowHintsButton","playButtons","NewGameButton","boardContainer","paddingTop","boardArea","panelArea","TicTacToeGame","history","setHistory","setShowHints","data","Array","fill","squaresClaimedByPlayer","forEach","getBoardIcons","gameDrawn","highlightedSquares","player","moveList","linesList","lineCountsFor","count","line","push","linesWithThree","wins","squaresInLine","highlightWins","myTurn","hints","claimedSquaresList","i","includes","claimedSquares","immediateWins","winningSquare","immediatelyLosingMoves","emptySquares","testSquare","thereIsAnImmediateWin","losingSquare","doubleAttackCreatingMoves","keyAttackingMove","doubleAttackGrantingMoves","thereIsADoubleAttackCreatingMove","distantForcedWinCreatingMoves","log","unknownSquares","thereIsADistantForcedWinCreatingMove","getBoardHints","getBoardColors","squareClicked","squareIsEmpty","updatedHistory","length","message","answer","gameLosingMoves","thisIsADoubleAttack","thereIsAnUrgentDefensiveMove","getCommentary","shortenedHistory","emptySquaresList","value","index","winningMoves","linesWithOnlyTwo","urgentDefensiveMoves","other","thisMoveIsForced","isForced","forcingMoves","distantForcedWinCreatingMovesList","forcingMove","hypotheticalHistory","thereIsAForcedWin","filter","lines","Math","floor","lineId","squareIds","blockedLines","numCard","playerOne","playerTwo","handleCardClick","boardStatus","topRowData","bottomRowData","cards","status","cardId","newCard","Card","HelpModal","difficultyModeBox","otherButtonsBox","selectedButton","unselectedButton","switchLabel","lineHeight","difficultyMode","handleDifficultyModeChange","newGameButton","showMoves","toggleShowMovesSwitch","disabled","gs","difficultyModeButtons","panelContainer","alignSelf","FifteenGame","setGameNumber","setRecord","setMoveList","setDifficultyMode","botGoesFirst","gn","ml","botGoesNext","firstAndOdd","secondAndEven","cardClicked","updatedMoveList","handleGameOver","handleBotsTurn","numberClaimed","turnNumber","getBoardStatus","getGameStatus","empty","nextGameNumber","assert","result","thereIsAWinIn","firstPlayersMoves","secondPlayersMoves","moveSet","sums","j","k","sum","sumsOfThree","move","getBotsNumbers","botsNumbers","getPlayersNumbers","playersNumbers","intersect","listOne","listTwo","number","unclaimedNumbers","complementOf","sumOfTwo","botMove","getBotMove","setTimeout","trios","getTrios","selectMoveRandomly","getNonurgentBlockingMove","easyProtocol","mediumProtocol","hardProtocol","immediatelyWinningMoves","trio","botMoves","playerMoves","map","getImmediatelyWinningMoves","getUrgentDefensiveMoves","doubleAttackingMoves","getDoubleAttackingMoves","distantForcedWins","distantWinForcingMoves","flat","array","sort","element","noDuplicatesIn","forcedMove","testTwo","getDistantForcedWins","blockingMoves","self","indexOf","newTrio","random","MagicSquares","createMuiTheme","light","dark","contrastText","secondary","text","danger","shape","responsiveFontSizes","overflowY","overflowX","App","CssBaseline","ThemeProvider","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.ee2af700.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// React ROUTER\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// MATERIAL-UI COMPONENTS\r\nimport Link from '@material-ui/core/Link';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\n// ICONS \r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    list: {\r\n        width: 'inherit',\r\n        // backgroundColor: theme.palette.primary.dark\r\n        backgroundColor: 'inherit'\r\n\r\n    },\r\n    listItem: {\r\n        color: theme.palette.common.white,\r\n    },\r\n    icon: {\r\n        width: '45px',\r\n        color: theme.palette.common.white,\r\n        alignContent: 'center',\r\n        justifyContent: 'center',\r\n    }\r\n}));\r\n\r\nexport default function TeachingServicesList() {\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            {/* <ListItem\r\n                key={'home'}\r\n                className={classes.listItem}\r\n                button\r\n                component={RouterLink}\r\n                to='/'\r\n            >\r\n                <Icon className={\"fas fa-home fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'STEM Garden Home'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem> */}\r\n\r\n            <ListItem\r\n                key={'welcome'}\r\n                className={classes.listItem}\r\n                button\r\n                component={RouterLink}\r\n                to='/'\r\n            >\r\n                <Icon className={\"fas fa-home fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Welcome'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n            <ListItem\r\n                key={'play tic-tac-toe'}\r\n                className={classes.listItem}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/play_tic_tac_toe',\r\n                }}\r\n            >\r\n                <Icon className={\"far fa-play-circle fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Play Tic-Tac-Toe'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n            <ListItem\r\n                key={'learn tic-tac-toe'}\r\n                className={classes.listItem}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/learn_tic_tac_toe',\r\n                }}\r\n            >\r\n                <Icon className={\"fas fa-question fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Learn Tic-Tac-Toe Strategy'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n            <ListItem\r\n                key={'play the fifteen-game'}\r\n                className={classes.listItem}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/fifteen_game',\r\n                }}\r\n            >\r\n                <Icon className={\"far fa-play-circle fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Play the 15 Game'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n            \r\n\r\n            <ListItem\r\n                key={'learn about magic squares'}\r\n                className={classes.listItem}\r\n                button\r\n                component={RouterLink}\r\n                to={{\r\n                    pathname: '/magic_squares',\r\n                }}\r\n            >\r\n                <Icon className={\"fas fa-question fa-2x\"}\r\n                    classes={{ root: classes.icon }}\r\n                />\r\n                <ListItemText\r\n                    primary={'Learn about Magic Squares'}\r\n                    primaryTypographyProps={{ variant: 'h5' }}\r\n                />\r\n            </ListItem>\r\n\r\n        </React.Fragment>\r\n    );\r\n}","import React from 'react';\r\n\r\n// MY components\r\nimport MenuList from \"./MenuList\";\r\n\r\n// React ROUTER\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\n\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// MATERIAL-UI COMPONENTS\r\nimport Box from '@material-ui/core/Box';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\n\r\n// ICONS\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    list: {\r\n        width: 'auto',\r\n        fontSize: '0.8rem',\r\n        backgroundColor: theme.palette.primary.main,\r\n        height: '100%'\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n    drawer: {\r\n        // backgroundColor: theme.palette.primary.main,\r\n        height: 'auto'\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        height: 'auto'\r\n    },\r\n    menu: {\r\n        // border: 'solid red 1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        height: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end'\r\n    },\r\n    menuButton: {\r\n        color: theme.palette.common.white,\r\n        // fontSize: '5rem',\r\n\r\n    }\r\n}));\r\n\r\nexport default function MobileMenu() {\r\n    const classes = useStyles();\r\n    const [state, setState] = React.useState({\r\n        open: false,\r\n    });\r\n\r\n    const toggleDrawer = (anchor, open) => (event) => {\r\n        if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n\r\n        setState({ ...state, [anchor]: open });\r\n    };\r\n\r\n    const list = (anchor) => (\r\n        <Box className={classes.list}\r\n            role=\"presentation\"\r\n            onClick={toggleDrawer(anchor, false)}\r\n            onKeyDown={toggleDrawer(anchor, false)}\r\n        >\r\n            <List>\r\n                <MenuList />\r\n            </List>\r\n        </Box>\r\n    );\r\n\r\n    return (\r\n        <Box className={classes.menu}>\r\n            <Button \r\n                onClick={toggleDrawer('open', true)}\r\n                className={classes.menuButton}\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\"\r\n            >\r\n                <MenuIcon className={classes.menuIcon} fontSize='large' />\r\n            </Button>   \r\n            <Drawer \r\n                className={classes.drawer}\r\n                classes={{ paper: 'paper'}}\r\n                // PaperProps={classes.paper}\r\n                anchor={'right'} \r\n                open={state['open']} \r\n                onClose={toggleDrawer('open', false)}\r\n            >\r\n                    {list('right')}\r\n            </Drawer>\r\n        </Box>\r\n    );\r\n}","import React from 'react';\r\n\r\n// MY COMPONENTS\r\nimport MobileMenu from \"./MobileMenu\";\r\n\r\n// Image Imports\r\nimport logo from \"../../images/nsgLogoSnipped.png\";\r\n\r\n\r\n// MATERIAL-UI COMPONENTS\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AppBar from '@material-ui/core/AppBar';\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst heightInRem = 3.6;\r\nconst height = `${heightInRem}rem`;\r\nconst halfHeight = `${heightInRem/2}rem`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    navbarRoot: {\r\n        // border: 'solid blue 1px',\r\n        width: '100vw',\r\n        height: height,\r\n\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.common.white,\r\n\r\n        zIndex: '1200',\r\n        display: 'flex',\r\n\r\n    },\r\n    navbarContainer: {\r\n        // border: 'solid blue 1px',\r\n        height: height,\r\n        backgroundColor: 'inherit',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    spacerBox: {\r\n        // border: 'solid blue 1px',\r\n        // padding: halfHeight,\r\n        padding: height,\r\n    },\r\n    logo: {\r\n        height: height,\r\n        width: height,\r\n        backgroundImage: `\r\n            url(${logo})  \r\n        `,\r\n        backgroundPosition: 'left bottom',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundSize: 'auto 95%',\r\n    },\r\n    pageTitle: {\r\n        // border: 'solid red 1px',\r\n        height: '100%',\r\n        flex: '2 1 80%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    \r\n    icon: {\r\n        width: '45px',\r\n        color: theme.palette.common.white,\r\n        alignContent: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    \r\n}));\r\n\r\n\r\nexport default function Navbar(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.navbarRoot} >\r\n            <OneSizeNavbar pageTitle={props.pageTitle} />\r\n            <Box className={classes.spacerBox} />\r\n        </Box>\r\n        \r\n    )\r\n}\r\n\r\nfunction OneSizeNavbar(props) {\r\n    const classes = useStyles();\r\n    const pageTitle = props.pageTitle;\r\n\r\n    return (\r\n        <Box  >\r\n            <AppBar\r\n                className={classes.navbar}\r\n                position=\"fixed\"\r\n                elevation={3}\r\n            >\r\n                <Container\r\n                    className={classes.navbarContainer}\r\n                    maxWidth='md'\r\n                    disableGutters\r\n                >\r\n                    <Grid container>\r\n                        <Grid item xs={2} >\r\n                            <Box className={classes.logo} />\r\n                        </Grid>\r\n                        <Grid item xs={8} >\r\n                            <Typography className={classes.pageTitle} align='center' variant='h4' >\r\n                                {pageTitle}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={2} >\r\n                            <MobileMenu />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\n\r\nimport {\r\n    Link as RouterLink,\r\n} from \"react-router-dom\";\r\n\r\n// My Components\r\n\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    \r\n    root: {\r\n        // borderRight: 'solid black 1rem',\r\n        width: '100%',\r\n        minHeight: 'calc(100vh - 4rem)',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        color: theme.palette.common.white,\r\n        padding: '1.0rem',\r\n        \r\n    }, \r\n    \r\n    button: {\r\n        // margin: 'auto',\r\n        backgroundColor: theme.palette.primary.main,\r\n        textAlign: 'center',\r\n        marginRight: '1.0rem',\r\n    }, \r\n    \r\n    \r\n}));\r\n\r\n\r\nexport default function WelcomePage() {\r\n    const classes = useStyles();\r\n    \r\n    \r\n    return (\r\n        <Container className={classes.root} maxWidth='md' >\r\n            <Typography align='center' color='textPrimary' component='h1' variant='h2' gutterBottom >\r\n                Tic-Tac-Toe and the Fifteen Game\r\n            </Typography>\r\n            {/* <Typography align='center' color='textPrimary' component='h2' variant='h5' gutterBottom >\r\n                A math lesson taught through two classic games\r\n            </Typography> */}\r\n            <Grid container>\r\n                <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n                    Intro to Proof\r\n                </Typography>\r\n                {/* <Typography paragraph align='justify' color='textPrimary' component='body1' variant='body1' gutterBottom >\r\n                    Math is all about things that can be proven using logic.\r\n                    In the same way a song is an expression of a musician's creativity, a written proof is an expression of a mathematician's creativity.\r\n                    To the trained eye, mathematical proofs can be profoundly beautiful and elegant,\r\n                    however, they often involve a lot of abstraction and formality, making them inaccessible to beginners.\r\n                    The first goal of this lesson is to break that barrier and introduce the concept of proof in a way \r\n                    that is accessible to young students and to beginners with little formal math training.\r\n                    In this lesson you will prove some interseting things about Tic-Tac-Toe,\r\n                    without relying on any mathematical jargon or algebra.\r\n                </Typography> */}\r\n                <Typography paragraph align='justify' color='textPrimary' component='body1' variant='body1' gutterBottom >\r\n                    Math is all about things that can be proven using logic.\r\n                    Mathematical proofs can be profoundly beautiful, but they often deal with very abstract concepts and \r\n                    involve a lot of technical jargon, making them inaccessible to beginners. \r\n                    Let's break that barrier by writing a proof about something familiar and concrete. \r\n                    Can you proove that the player who goes first can always win at Tic-Tac-Toe?\r\n                    If not, can you proove that the ends in a draw every time if neither player makes a mistake? \r\n                    Extra Challenge: What exactly does the word \"mistake\" mean as used above? Don't settle for an intuitive \r\n                    grasp of the meaning of that word, write as precise a definition as you can!  \r\n                    Is it possible to make a mistake on the first move of the game? How about the second move?\r\n                </Typography>\r\n                <Box width=\"100%\" mb={3} > \r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        component={RouterLink}\r\n                        to='/play_tic_tac_toe'\r\n                    >\r\n                        Play Tic-Tac-Toe!\r\n                    </Button>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        component={RouterLink}\r\n                        to='/learn_tic_tac_toe'\r\n                    >\r\n                        Learn Tic-Tac-Toe\r\n                    </Button>\r\n                </Box>\r\n                \r\n                {/* <Typography paragraph align='justify' color='secondary' component='body1' variant='body1' gutterBottom >\r\n                    If you have played Tic-Tac-Toe much, you have probably observed that the player who goes first seems to have an advantage but the game usually ends in a draw.\r\n                    Try and take this casual observation to the next level by prooving that the game will <em>always</em> end in a draw unless one of the players makes a mistake.\r\n                    To do this you will need to articulate a move-by-move plan that you can use when you go second that anticipates\r\n                    every strategy that the first player might try to use against you and explains how you can respond to avoid defeat.\r\n                    As you work to develop your plan, it may help to try and test your ideas by playing against my bot.\r\n                    My bot will try a variety of strategies and it will never make a mistake,\r\n                    but when you have perfected your plan you won't make any mistakes either and you will never lose to my bot.\r\n                    When you have perfected your strategy for going second try this challenge question: Is it possible for the player who goes first\r\n                    to make a mistake on the first move of the game?\r\n                </Typography> */}\r\n                \r\n                <Typography align='left' color='textPrimary' component='h4' variant='h4' gutterBottom >\r\n\r\n                    Similarity Beneath the Surface\r\n                </Typography>\r\n                   \r\n                <Typography paragraph align='justify' color='textPrimary' component='body1' variant='body1' >\r\n                    Many problems can be solved with less work if, instead of starting from scratch, you start\r\n                    with the solution to a different problem in mind and adapt that solution to the problem at hand. \r\n                    The first, and most difficult, step in this process is realizing that the two problems have \r\n                    something in common. Often, two real-world problems will seem unrelated on their surfaces' \r\n                    even though at a deeper level they are behaving according to the same patterns. Being familiar \r\n                    with mathematics makes you better at noticing when this is the case.\r\n                </Typography>\r\n                <Typography paragraph align='justify' color='textPrimary' component='body1' variant='body1' >\r\n                    Experience this adaptive process for yourself!  Once you have mastered Tic-Tac-Toe and written up \r\n                    a strategic plan that lets you guarantee you cannot be beaten, \r\n                    try playing the Fifteen Game against my bot. \r\n                    At first, you will probably think that these two games feel nothing alike.\r\n                    You would not guess that by mastering Tic-Tac-Toe you had taken a big step toward mastering the \r\n                    Fifteen Game too, but you have! Once you are familiar with the mechanics of the Fifteen Game, \r\n                    take a look at the lesson on Magic Squares, a mathematical curiosity first discovered in China \r\n                    about 4200 years ago. Equipped with this mathematical knowledge, you will soon realize \r\n                    that Tic-Tac-Toe and the Fifteen Game have a lot more in common that you thought at first!\r\n                </Typography>\r\n                <Box mb={2} >\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        component={RouterLink}\r\n                        to='/fifteen_game'\r\n                    >\r\n                        Play  the 15-Game!\r\n                    </Button>\r\n\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        component={RouterLink}\r\n                        to='/magic_squares'\r\n                    >\r\n                        Learn About Magic Squares\r\n                    </Button>\r\n                </Box>\r\n                \r\n                \r\n                <Typography variant='body2' color='textPrimary' className={classes.paragraph}>\r\n                    This lesson is built with code that is open-source and available on my <a href=\"https://github.com/nolastemgarden\">Github account</a>,\r\n                    so if you have something to add, a bug to report, or simply want to see how it works you are welcome to open an issue or &nbsp;\r\n                    <a href=\"https://github.com/nolastemgarden/tic-tac-toe-and-the-fifteen-game\">clone the repository</a>!\r\n                </Typography>\r\n            </Grid>\r\n            <Box p={5} />\r\n        </Container>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n// My Components\r\n// import Square from \"./Square\";\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    board: {\r\n        // border: 'solid blue 1px',\r\n        position: 'absolute',\r\n        top: '0',\r\n        left: '0',\r\n        width: '100%',  // The lesser of full and the height of the board area. \r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        marginTop: '0.3rem',\r\n        // margin: '1rem 0.0rem',\r\n    },\r\n    row: {\r\n        // border: 'solid blue 1px',\r\n        width: '100%',\r\n        height: '30%',\r\n        margin: '0.3rem 0.0rem',\r\n\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    square: {\r\n        width: 'min(30%, 15vh)',\r\n        height: '100%',\r\n        margin: '0.0rem 0.3rem',\r\n        backgroundColor: '#fff',\r\n\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n\r\n    },\r\n    iconX: {\r\n        width: '100%',\r\n        height: '100%',\r\n        color: theme.palette.common.black\r\n    },\r\n    iconO: {\r\n        width: '80%',\r\n        height: '80%',\r\n        color: theme.palette.common.black\r\n    },\r\n\r\n\r\n    unknown: {\r\n        backgroundColor: '#bbf',\r\n    },\r\n    noColor: {\r\n        // backgroundColor: '#FFF',  // This is used for Hints turned off mode.\r\n        backgroundColor: '#ddd',\r\n    },\r\n    claimed: {\r\n        backgroundColor: '#eee',\r\n    },\r\n    unclaimed: {\r\n        backgroundColor: '#ddd',\r\n    },\r\n    win: {\r\n        backgroundColor: '#3B3'\r\n    },\r\n    draw: {\r\n        // backgroundColor: '#55bb00',\r\n        backgroundColor: '#FF3'\r\n    },\r\n    lose: {\r\n        // backgroundColor: '#88ee33'\r\n        backgroundColor: '#F44'\r\n    },\r\n\r\n\r\n    immediateWin: {\r\n        backgroundColor: '#00bb00'\r\n    },\r\n    doubleAttackCreatingMove: {\r\n        // backgroundColor: '#55bb00',\r\n        backgroundColor: '#00bb00'\r\n    },\r\n    forcedWinCreatingMove: {\r\n        // backgroundColor: '#88ee33'\r\n        backgroundColor: '#00bb00'\r\n    },\r\n\r\n    urgentDefensiveMove: {\r\n        backgroundColor: '#ff6600'\r\n    },\r\n    unavoidableDefeat: {\r\n        backgroundColor: '#ff4433'\r\n    },\r\n    gameLosingMove: {\r\n        // backgroundColor: '#EEDD11'\r\n    },\r\n\r\n    drawingMove: {\r\n        backgroundColor: '#EEDD11'\r\n    }\r\n\r\n}));\r\n\r\nexport default function Board(props) {\r\n    const classes = useStyles();\r\n    const handleSquareClick = props.handleSquareClick\r\n    const boardIcons = props.boardIcons;\r\n    const boardColors = props.boardColors; // Array of 9 strings 'noColor', 'unclaimed', 'claimed', 'win', 'draw', 'lose'.\r\n            // Formerly and Array of 9 strings '', 'immediateWin', 'unavoidableDefeat', 'doubleAttackCreatingMove', 'urgentDefensiveMove', 'forcedWinCreatingMove', 'drawingMove'\r\n    \r\n    let rows = [];\r\n    for (let row = 0; row < 3; row++) {\r\n        let newRow =\r\n            <Row\r\n                key={row}\r\n                rowId={row}\r\n                rowIcons={boardIcons.slice(3*row, 3*(row+1))}\r\n                rowColors={boardColors.slice(3*(row), 3*(row + 1))}\r\n                handleSquareClick={handleSquareClick}  \r\n            />\r\n        ;\r\n        rows = rows.concat(newRow);\r\n    }\r\n    return (\r\n        <Box className={classes.board}>\r\n            {rows}\r\n        </Box>\r\n    )\r\n}\r\n\r\nfunction Row(props) {\r\n    const classes = useStyles();\r\n    const rowId = props.rowId;\r\n    const rowIcons = props.rowIcons;\r\n    const rowColors = props.rowColors;\r\n    const handleSquareClick = props.handleSquareClick\r\n\r\n    let squares = [];\r\n    for (let col = 0; col < 3; col++) {\r\n        let squareId = 3 * rowId + col;\r\n        let newSquare =\r\n            <Square\r\n                key={squareId}\r\n                id={squareId}\r\n                symbol={rowIcons[col]}\r\n                color={rowColors[col]}\r\n                handleClick={handleSquareClick}\r\n            />;\r\n        squares = squares.concat(newSquare);\r\n    }\r\n    return (\r\n        <Box className={classes.row}>\r\n            {squares}\r\n        </Box>\r\n    )\r\n}\r\n\r\nfunction Square(props) {\r\n    const classes = useStyles();\r\n    const id = props.id\r\n    const symbol = props.symbol\r\n    const color = props.color  // String 'win', 'draw', 'lose', 'unknown', 'claimed',  \r\n    const handleClick = props.handleClick\r\n\r\n\r\n    let icon;\r\n    switch (symbol) {\r\n        case 'x':\r\n            icon = <ClearIcon className={classes.iconX} />\r\n            break;\r\n        case 'o':\r\n            icon = <RadioButtonUncheckedIcon className={classes.iconO} />\r\n            break;\r\n        case '':\r\n            icon = null;\r\n            break;\r\n        default:\r\n            throw console.error(\"Square passed symbol not 'x' 'o' or ''\");\r\n            break;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    let className;\r\n    switch (color) {\r\n        case 'unknown':\r\n            className = `${classes.square} ${classes.unknown} `\r\n            break;\r\n        case 'claimed':\r\n            className = `${classes.square} ${classes.claimed} `\r\n            break;\r\n        case 'unclaimed':\r\n            className = `${classes.square} ${classes.unclaimed} `\r\n            break;\r\n        case 'noColor':\r\n            className = `${classes.square} ${classes.noColor} `\r\n            break;\r\n        case 'draw':\r\n            className = `${classes.square} ${classes.draw} `\r\n            break;\r\n        case 'win':\r\n            className = `${classes.square} ${classes.win} `\r\n            break;\r\n        case 'lose':\r\n            className = `${classes.square} ${classes.lose} `\r\n            break;\r\n        default:\r\n            className = `${classes.square} `\r\n    }\r\n    // switch (color) {\r\n    //     case 'noColor':\r\n    //         className = `${classes.square} ${classes.noColor} `\r\n    //         break;\r\n    //     case 'drawingMove':\r\n    //         className = `${classes.square} ${classes.drawingMove} `\r\n    //         break;\r\n    //     case 'immediateWin':\r\n    //         className = `${classes.square} ${classes.immediateWin} `\r\n    //         break;\r\n    //     case 'unavoidableDefeat':\r\n    //         className = `${classes.square} ${classes.unavoidableDefeat} `\r\n    //         break;\r\n    //     case 'urgentDefensiveMove':\r\n    //         className = `${classes.square} ${classes.urgentDefensiveMove} `\r\n    //         break;\r\n    //     case 'doubleAttackCreatingMove':\r\n    //         className = `${classes.square} ${classes.doubleAttackCreatingMove} `\r\n    //         break;\r\n    //     case 'forcedWinCreatingMove':\r\n    //         className = `${classes.square} ${classes.forcedWinCreatingMove} `\r\n    //         break;\r\n    //     case 'gameLosingMove':\r\n    //         className = `${classes.square} ${classes.gameLosingMove} `\r\n    //         break;    \r\n    //     default:\r\n    //         className = `${classes.square} `\r\n    // }\r\n\r\n    return (\r\n        <Paper\r\n            elevation={4}\r\n            className={className}\r\n            onClick={() => handleClick(id)}\r\n        >\r\n            {icon}\r\n        </Paper>\r\n    )\r\n}","import React, { useState } from 'react';\r\n\r\nimport './TicTacToe.css';\r\n\r\n// My Components\r\n// import Square from \"./Square\";\r\n\r\n// MUI Components\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\n\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box, Typography } from '@material-ui/core';\r\n\r\n\r\n// How do I get this CSS var \r\nconst immediateWin = `var(--immediate-win-bg-color)`;\r\n// console.log(`immediateWin: ${immediateWin}`)\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        border: 'solid #bbb 0.2px',\r\n        boxSizing: 'border-box',\r\n        marginTop: '1rem',\r\n        width: '100%',\r\n    },\r\n    \r\n    keyItem: {\r\n        border: 'solid #bbb 0.2px',\r\n        boxSizing: 'border-box',\r\n        // width: '40%',\r\n        flexGrow: '2',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        \r\n    },\r\n\r\n    colorTile: {\r\n        // border: 'solid blue 1px',\r\n        margin: '1%',\r\n        marginRight: '1rem',\r\n        borderRadius: '15%',\r\n\r\n        width: '4vmin',\r\n        height: '4vmin',\r\n    },\r\n\r\n    immediateWin: {\r\n        borderRadius: '20%',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: '#00BB00',\r\n        // backgroundColor: immediateWin\r\n    },\r\n    \r\n    doubleAttackCreatingMove: {\r\n        borderRadius: '20%',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: '#55bb00'\r\n    },\r\n    forcedWinCreatingMove: {\r\n        borderRadius: '20%',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: '#88ee33'\r\n    },\r\n\r\n    urgentDefensiveMove: {\r\n        borderRadius: '20%',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: '#ff6600'\r\n    },\r\n    unavoidableDefeat: {\r\n        borderRadius: '20%',\r\n        backgroundColor: '#ff4433',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    gameLosingMove: {\r\n        borderRadius: '20%',\r\n        backgroundColor: '#EEDD11',\r\n        width: '100%',\r\n        height: '100%',\r\n    }\r\n}));\r\n\r\nexport default function HintColorKey() {\r\n    const classes = useStyles();\r\n    \r\n    \r\n    \r\n    return (\r\n        <Grid container spacing={2} className={classes.root}>\r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.immediateWin}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Immediate Win\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.unavoidableDefeat}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Unavoidable Defeat\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.doubleAttackCreatingMove}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Double Attack\r\n                </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.urgentDefensiveMove}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Urgent Defensive Move\r\n                </Typography>\r\n            </Grid>\r\n            \r\n            \r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.forcedWinCreatingMove}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Winning Attack\r\n                </Typography>\r\n            </Grid>\r\n            \r\n            <Grid item xs={6} className={classes.keyItem} >\r\n                <Box className={classes.colorTile}  >\r\n                    <Box className={classes.gameLosingMove}  >\r\n\r\n                    </Box>\r\n                </Box>\r\n                <Typography variant=\"h5\">\r\n                    Game Losing Mistake\r\n                </Typography>\r\n            </Grid>\r\n        </Grid>\r\n\r\n        \r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\n// My Components\r\n// import Square from \"./Square\";\r\nimport HintColorKey from \"./HintColorKey\";\r\n\r\n// MUI Components\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box } from '@material-ui/core';\r\nconst useStyles = makeStyles((theme) => ({\r\n    helpModal: {\r\n        // border: 'solid blue 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    buttonIcon: {\r\n        marginRight: '1vmin',\r\n        fontSize: 'larger',\r\n    },\r\n    modal: {\r\n        margin: '6.0rem 3.0rem'\r\n\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        borderRadius: '2.0rem',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(4),\r\n    },\r\n    button: {\r\n        margin: '0.5rem 1.0rem',\r\n        width: '50%',\r\n        height: '3.0rem',\r\n        maxHeight: '3.0rem',\r\n        fontSize: '1.2rem',\r\n    },\r\n\r\n}));\r\n\r\nexport default function HowToPlayModal() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.helpModal}>\r\n            <Button\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleOpen}\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\"\r\n            >\r\n                <HelpOutlineIcon className={classes.buttonIcon} />\r\n                Help\r\n            </Button>\r\n\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className={classes.paper}   >\r\n                        <Typography id=\"transition-modal-title\" className={classes.heading} >\r\n                        How To Play\r\n                        </Typography>\r\n                        <p id=\"transition-modal-description\" className={classes.body} >\r\n                            X and O take turns clicking on squares to claim them.\r\n                            The first player to claim all 3 squares in a single row, column, or diagonal wins!\r\n                        </p>\r\n                        <Typography id=\"transition-modal-title\" className={classes.heading} >\r\n                        Coach's Commentary\r\n                        </Typography>\r\n                        <p id=\"transition-modal-description\" className={classes.body} >\r\n                            The commentary is on by default and may be turned off in the Settings.\r\n                            It provides a verbal description of the current position and in certain\r\n                            positions offers advice to help you find your best move.  \r\n                        </p>\r\n                        <Typography id=\"transition-modal-title\" className={classes.heading} >\r\n                        Winning and Losing Moves\r\n                        </Typography>\r\n                        <p id=\"transition-modal-description\" className={classes.body} >\r\n                            Color-coded hints shown on the board that warn of all possible mistakes and highlight all winning opportunities.\r\n                            These are hidden by default and may be turned on in the Settings.\r\n                        </p>\r\n                        <p id=\"transition-modal-description\" className={classes.body} >\r\n                            Squares that are white lead to a Draw. This is the outcome of every game of Tic Tac Toe <em> unless </em>\r\n                            one of the players makes a <strong>mistake</strong>. After a mistake, the other player will be able to win immediately or force their opponent's hand in a way that guarantees a them a win in one or two more turns.\r\n                            It isn't necesarily a problem to have to make an <strong>urgent defensive move</strong>, but if you have two or more of them at once then the game is lost.\r\n                        </p>\r\n                        <HintColorKey />\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n// MUI Icons\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    button: {\r\n        // border: 'solid red 1px',\r\n        width: '100%',\r\n        // height: '100%',\r\n        height: '2.5rem',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        fontSize: 'min(18px, 1.0rem)',\r\n        \r\n    },\r\n    buttonIcon: {\r\n        marginRight: '1vmin',\r\n        fontSize: 'larger'\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 22px)',\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n        height: 'min(100vw, 80vh)',\r\n        maxHeight: '950px',\r\n        width: 'min(60vh, 75vw)',\r\n        maxWidth: '675px',\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    switchBox: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n\r\n    },\r\n    heading: {\r\n        fontSize: 'min(max(1rem, 4vmin), 30px)',\r\n        fontWeight: 'bold',\r\n        marginBlockEnd: '0',\r\n        marginBlockStart: '1rem',\r\n    },\r\n    \r\n}));\r\n\r\nexport default function SettingsModal(props) {\r\n    const classes = useStyles();\r\n    const showMoves = props.showMoves\r\n    const showCommentary = props.showCommentary\r\n    const toggleShowMovesSwitch = props.toggleShowMovesSwitch\r\n    const toggleShowCommentarySwitch = props.toggleShowCommentarySwitch\r\n\r\n    // Modal Open & Close \r\n    const [open, setOpen] = React.useState(false);\r\n    const openSettingsModal = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const showMovesSwitch = (\r\n        <React.Fragment>\r\n            <Box className={classes.switchBox}>\r\n                <Typography color='textSecondary' variant='h4' >\r\n                    Show Moves\r\n                </Typography>\r\n                <Switch\r\n                    checked={showMoves}\r\n                    onChange={toggleShowMovesSwitch}\r\n                    color=\"primary\"\r\n                    name=\"checkedB\"\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                />\r\n            </Box>\r\n            <DialogContentText color='textSecondary' variant='body1'  >\r\n                Show whether each possible move leads to a win, loss, or draw with color coded hints on the board.\r\n            </DialogContentText>\r\n        </React.Fragment>\r\n    );\r\n\r\n    const showCommentarySwitch = (\r\n        <React.Fragment>\r\n            <Box className={classes.switchBox}>\r\n                <Typography color='textSecondary' variant='h4' >\r\n                    Coach's Hints\r\n                </Typography>\r\n                <Switch\r\n                    checked={showCommentary}\r\n                    onChange={toggleShowCommentarySwitch}\r\n                    color=\"primary\"\r\n                    name=\"checkedB\"\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                />\r\n            </Box>\r\n            <DialogContentText color='textSecondary' variant='body1'  >\r\n                Show a verbal description of the position and the coach's advice about what to look out for.\r\n            </DialogContentText>\r\n        </React.Fragment>\r\n        \r\n        \r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Button\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={openSettingsModal}\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\" \r\n            >\r\n                <SettingsIcon className={classes.buttonIcon} />\r\n                Settings\r\n            </Button>\r\n            \r\n            \r\n            <Dialog \r\n                open={open} \r\n                onClose={handleClose} \r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                \r\n                \r\n                <DialogContent>\r\n                    <div className={classes.heading} >\r\n                        Settings\r\n                    </div>\r\n                    {showCommentarySwitch}\r\n                    \r\n                    {showMovesSwitch}\r\n                    \r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={handleClose} \r\n                        color=\"primary\"\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Apply\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","// Status Panel for the Tic-Tac-Toe Game\r\n\r\nimport React, { useState } from 'react';\r\n\r\n// Custom Components\r\nimport HelpModal from \"./HelpModal\";\r\nimport TicTacToeSettingsModal from \"./TicTacToeSettingsModal\";\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nconst useStyles = makeStyles((theme) => ({\r\n    panel: {\r\n        // border: 'solid orange 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        \r\n    },\r\n    infoArea: {\r\n        // border: 'solid red 1px',\r\n        flex: '1 0 55%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '1.0rem 2.0rem 0.0rem ',\r\n\r\n    },\r\n    controls: {\r\n        // border: 'solid green 1px',\r\n        flex: '1 0 45%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    \r\n    button: {\r\n        color: theme.palette.common.white,\r\n        backgroundColor: theme.palette.primary.main,\r\n        margin: '0.5rem 1.0rem',\r\n        width: '50%',\r\n        height: '30%',\r\n        maxHeight: '3.0rem',\r\n        fontSize: '1.2rem',\r\n    },\r\n    buttonIcon: {\r\n        marginRight: '1vmin',\r\n        fontSize: 'larger'\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 22px)',\r\n    },\r\n    \r\n}));\r\n\r\nexport default function Panel(props) {\r\n    const classes = useStyles();\r\n\r\n    const mode = props.mode\r\n    const gameType = props.gameType;\r\n\r\n    const gameOver = props.gameOver;\r\n    const moveNumber = props.moveNumber;\r\n    const gameStatus = props.gameStatus;\r\n    const gameNumber = props.gameNumber;\r\n    const commentary = props.commentary;\r\n\r\n    const handleNewGameClick = props.handleNewGameClick\r\n    const handleUndoClick = props.handleUndoClick\r\n    \r\n    const showHints = props.showHints\r\n    const toggleShowHints = props.toggleShowHints\r\n\r\n\r\n    const showCommentary = props.showCommentary\r\n    const toggleShowCommentarySwitch = props.toggleShowCommentarySwitch\r\n\r\n    const scoreBoard = (\r\n        <React.Fragment>\r\n            <Typography align='center' component='h1' variant='h3' noWrap gutterBottom>\r\n                Game {gameNumber}:&nbsp;&nbsp;{gameStatus}\r\n            </Typography>\r\n            <Typography align='center' component='h3' variant='h4' noWrap >\r\n                Human: {props.record[0]} &emsp;  Bot: {props.record[1]} &emsp;  Draw: {props.record[2]}\r\n            </Typography>\r\n        </React.Fragment>\r\n    )\r\n\r\n    const commentaryBoard = (\r\n        <React.Fragment>\r\n            <Typography align='center' component='h1' variant='h3' noWrap gutterBottom>\r\n                {gameStatus}\r\n            </Typography>\r\n            <Typography align='justify' variant='body1' >\r\n                {commentary}\r\n            </Typography>\r\n        </React.Fragment>\r\n    )\r\n\r\n    const learnButtons = (\r\n        <React.Fragment>\r\n            <UndoButton />\r\n            <ShowHintsButton\r\n                toggleShowHints={toggleShowHints}\r\n            />\r\n\r\n        </React.Fragment>\r\n    )\r\n\r\n    const playButtons = (\r\n        <React.Fragment>\r\n            <NewGameButton handleNewGameClick={handleNewGameClick} />\r\n            <HelpModal />\r\n        </React.Fragment>\r\n    )\r\n    \r\n    return (\r\n        <Box className={classes.panel}>\r\n            <Box className={classes.infoArea} >\r\n                {(mode === 'learn') ? commentaryBoard : scoreBoard}\r\n            </Box>\r\n            <Box className={classes.controls} >\r\n                {(mode === 'learn') ? learnButtons : playButtons }\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nfunction UndoButton(props) {\r\n    const classes = useStyles();\r\n    const gameOver = props.gameOver\r\n    const moveNumber = props.moveNumber\r\n    const handleUndoClick = props.handleUndoClick\r\n    return (\r\n        <Button\r\n            className={classes.button}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => handleUndoClick()}\r\n            // disabled={gameOver || moveNumber < 1}\r\n        >\r\n            <UndoIcon className={classes.buttonIcon} />\r\n            Undo\r\n        </Button>\r\n    )\r\n} \r\n\r\nfunction ShowHintsButton(props) {\r\n    const classes = useStyles();\r\n    const toggleShowHints = props.toggleShowHints\r\n\r\n    return (\r\n        <Button\r\n            className={classes.button}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => toggleShowHints()}\r\n        >\r\n            <HelpOutlineIcon className={classes.buttonIcon} />\r\n            Show Hints\r\n        </Button>\r\n    )\r\n} \r\n\r\n\r\nfunction NewGameButton(props) {\r\n    const classes = useStyles();\r\n    const handleNewGameClick = props.handleNewGameClick;\r\n\r\n    return (\r\n        <Button\r\n            className={classes.button}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => handleNewGameClick()}\r\n            // disabled={!props.gameOver}\r\n        >\r\n            <ReplayIcon className={classes.buttonIcon} />\r\n            New&nbsp;Game\r\n        </Button>\r\n    )\r\n}\r\n\r\nfunction HelpButton(props) {\r\n    const classes = useStyles();\r\n    const handleUndoButtonClick = props.handleUndoButtonClick\r\n\r\n\r\n    return (\r\n        <Box className={classes.button} >\r\n            <HelpModal />\r\n        </Box>\r\n    )\r\n} \r\n\r\nfunction SettingsButton(props) {\r\n    const classes = useStyles();\r\n    const handleUndoButtonClick = props.handleUndoButtonClick\r\n\r\n\r\n    return (\r\n        <Box className={classes.button} >\r\n            <TicTacToeSettingsModal\r\n                showMoves={props.showMoves}\r\n                showCommentary={props.showCommentary}\r\n                toggleShowMovesSwitch={props.toggleShowMovesSwitch}\r\n                toggleShowCommentarySwitch={props.toggleShowCommentarySwitch}\r\n            />\r\n        </Box>\r\n    )\r\n} \r\n","import React, { useState } from 'react';\r\n\r\nimport './TicTacToe.css';\r\n\r\n// My Components\r\nimport Board from \"./Board\";\r\nimport Panel from \"./Panel\";\r\n\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        // border: 'solid purple 1px',\r\n        width: '100%',\r\n        height: 'calc(100% - 3.8rem)',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'space-between',\r\n    },\r\n    boardContainer: {\r\n        // border: 'solid orange 1px',\r\n        width: '100%',\r\n        paddingTop: 'min(100%, 50vh)',\r\n        height: '0',\r\n        position: 'relative',\r\n    },\r\n    boardArea: {\r\n        // border: 'solid yellow 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '0',\r\n        left: '0',\r\n\r\n    },\r\n    panelArea: {\r\n        // border: 'solid yellow 1px',\r\n        color: theme.palette.common.white,\r\n        backgroundColor: theme.palette.common.black,\r\n        width: '100%',\r\n        // width: '50vh',\r\n        padding: '1.0rem',\r\n        flex: '2 1 35vh',\r\n        margin: '0rem auto',\r\n        \r\n    },\r\n}));\r\n\r\n\r\nexport default function TicTacToeGame(props) {\r\n    const classes = useStyles();\r\n    const mode = props.mode;\r\n\r\n    // let learnMode = (props.mode === 'learn') ? true : false;\r\n    // let [mode, setMode] = useState((props.mode === 'learn') ? true : false); \r\n    \r\n    let [gameNumber, setGameNumber] = useState(1);\r\n    let [record, setRecord] = useState([0, 0, 0]);     // 3 element counter for humanWins, botWins, and tieGames.\r\n\r\n    let [history, setHistory] = useState([]); \r\n    let [showHints, setShowHints] = useState(false); \r\n    // let [showCommentary, setShowCommentary] = useState(true);  \r\n\r\n    return (\r\n        <Box className={classes.root} >\r\n            <Box className={classes.boardContainer}>\r\n                <Box className={classes.boardArea} >\r\n                    <Board\r\n                        boardIcons={getBoardIcons()}\r\n                        boardColors={getBoardColors()}\r\n                        handleSquareClick={handleSquareClick}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n            <Box className={classes.panelArea}>\r\n                <Panel\r\n                    mode={mode}\r\n                    gameNumber={gameNumber}\r\n                    record={record}\r\n                    gameStatus={getStatus()}\r\n                    commentary={getCommentary()}\r\n\r\n                    handleUndoClick={handleUndoClick}\r\n                    handleNewGameClick={handleNewGameClick}\r\n\r\n                    // showHints={showHints}\r\n                    toggleShowHints={toggleShowHints}\r\n                />\r\n            </Box>\r\n        </Box>\r\n    );\r\n\r\n    // The <Game> holds all state and most helper and handler function definitions.\r\n    // It passes what it needs to to the board to render and to the panel.\r\n    \r\n    // The board data to render is always the latest entry in history.  We will have an 'undo' but not a 'redo' button.  May add a Make Computer Move\r\n    function getBoardIcons(moveList = history) {\r\n        let data = Array(9).fill('');  // Start with an array representing a board of NINE empty squares\r\n        squaresClaimedByPlayer('x').forEach(squareId => {\r\n            data[squareId] = 'x';\r\n        });\r\n        squaresClaimedByPlayer('o').forEach(squareId => {\r\n            data[squareId] = 'o';\r\n        });\r\n        return data;  // this method only deals with current board position, not hypotheticals.  Thus, it wants to use a version of helper squaresClaimedByPlayer() that does not require a moveList be explicitly passed in. \r\n    }\r\n\r\n    // function getBoardColors() {\r\n    //     // If the game is won highlight the winning line(s), whether hints are turned on or off.\r\n    //     if (wins('x') || wins('o')) {\r\n    //         return highlightWins();\r\n    //     }\r\n    //     // If hints are turned off return colors [] filled with 'noColor' strings.\r\n    //     if (showHints === false) {\r\n    //         return Array(9).fill('noColor');\r\n    //     }\r\n    //     // If hints are turned on return colors [] filled by getBoardHints().\r\n    //     if (showHints === true) {\r\n    //         // console.log(`Board Hints: ${getBoardHints()}`)\r\n    //         return getBoardHints();\r\n    //     }\r\n    // }\r\n    function getBoardColors() {\r\n        // If the game is won highlight the winning line(s), whether hints are turned on or off.\r\n        if (gameOver() && !gameDrawn()) {\r\n            return highlightWins();\r\n        }\r\n        // If hints are turned off return colors [] filled with 'noColor' strings.\r\n        if (mode === 'play') {\r\n            return Array(9).fill('noColor');\r\n        }\r\n        // If hints are turned on return colors [] filled by getBoardHints().\r\n        if (mode === 'learn') {\r\n            // console.log(`Board Hints: ${getBoardHints()}`)\r\n            return (showHints === true) ? getBoardHints() : Array(9).fill('noColor');\r\n        }\r\n    }\r\n\r\n    \r\n    // list all squareIds not appearing in the history or an \r\n    function emptySquares(moveList = history) {\r\n        let emptySquaresList = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (!moveList.includes(i)) {\r\n                emptySquaresList.push(i)\r\n            }\r\n        }\r\n        // console.log(`List Empty Squares: ${emptySquaresList}`)\r\n        return emptySquaresList;\r\n    }\r\n    function claimedSquares(moveList = history) {\r\n        let claimedSquaresList = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            if (moveList.includes(i)) {\r\n                claimedSquaresList.push(i)\r\n            }\r\n        }\r\n        return claimedSquaresList;\r\n    }\r\n    \r\n    //  Squares for which the value of the Hint is yet to be determined. \r\n    function unknownSquares(hints) {\r\n        let unknownSquares = [];\r\n        hints.forEach((value, index) => {\r\n            if (value === 'unknown'){\r\n                unknownSquares.push(index)\r\n            }\r\n        })\r\n        return unknownSquares;\r\n    }\r\n\r\n    // WON GAME defined: the player specified has all three squares in at least one line.\r\n    function wins(player, moveList = history) {\r\n        return (lineCountsFor(player, moveList).includes(3));\r\n    }\r\n    \r\n    // IMMEDIATE WIN defined: the player whose turn it is has an un-blocked two-in-a-line\r\n    function immediateWins(moveList = history) {\r\n        const player = myTurn(moveList);\r\n        let winningMoves = [];\r\n        linesWithOnlyTwo(player, moveList).forEach((line) => { // console.log(`urgentDefensiveMoves found line ${line} has only two ${other(player)}`)\r\n            squaresInLine(line).forEach((square) => {\r\n                if (squareIsEmpty(square, moveList) && !winningMoves.includes(square)) {\r\n                    winningMoves = winningMoves.concat(square);\r\n                }\r\n            })\r\n        })\r\n        return winningMoves;\r\n    }\r\n    function thereIsAnImmediateWin(moveList = history) {\r\n        return (immediateWins(moveList).length > 0)\r\n    }\r\n\r\n\r\n    // IMMEDIATELY LOSING MOVES: moves that make it so the opponent has an immediateWin.\r\n    function immediatelyLosingMoves(moveList = history) {\r\n        let immediatelyLosingMoves = [];\r\n        emptySquares(moveList).forEach(testSquare => {\r\n            let hypotheticalHistory = moveList.concat(testSquare);\r\n            if (thereIsAnImmediateWin(hypotheticalHistory)) {  \r\n                immediatelyLosingMoves = immediatelyLosingMoves.concat(testSquare);\r\n            }\r\n        })\r\n        return immediatelyLosingMoves;\r\n    }\r\n\r\n\r\n    // URGENT DEFENSIVE MOVES are moves that claim the last square in a line where the opponent has a two-to-zero advantage.\r\n    function urgentDefensiveMoves(moveList = history) {\r\n        const player = myTurn(moveList);\r\n        let urgentDefensiveMoves = [];\r\n        linesWithOnlyTwo(other(player), moveList).forEach((line) => { // console.log(`urgentDefensiveMoves found line ${line} has only two ${other(player)}`)\r\n            squaresInLine(line).forEach((square) => {\r\n                if (squareIsEmpty(square, moveList) && !urgentDefensiveMoves.includes(square)) {\r\n                    urgentDefensiveMoves = urgentDefensiveMoves.concat(square);\r\n                }\r\n            })\r\n        })\r\n        // console.log(`urgentDefensiveMoves() found the following moves for ${player}: ${urgentDefensiveMovesList}`);\r\n        return urgentDefensiveMoves;\r\n    }\r\n    function thereIsAnUrgentDefensiveMove(moveList = history) {\r\n        return (urgentDefensiveMoves(moveList).length === 1)\r\n    }\r\n\r\n\r\n    // DEFINITION: a DoubleAttack position is created when the player whose turn it is has no immediateWins() && has 2 distinct urgentDefensiveMoves(). \r\n    function thisIsADoubleAttack(moveList = history) {\r\n        return (!thereIsAnImmediateWin(moveList) && urgentDefensiveMoves(moveList).length > 1);\r\n    }\r\n    function doubleAttackCreatingMoves(moveList = history) {\r\n        let doubleAttackCreatingMoves = [];\r\n        emptySquares(moveList).forEach(testSquare => {\r\n            let hypotheticalHistory = moveList.concat(testSquare);\r\n            if (thisIsADoubleAttack(hypotheticalHistory)) {\r\n                doubleAttackCreatingMoves = doubleAttackCreatingMoves.concat(testSquare)\r\n            }\r\n        })\r\n        // console.log(`doubleAttackCreatingMoves in position: ${moveList} found these attacks: ${doubleAttackCreatingMoves}`);\r\n        return doubleAttackCreatingMoves;\r\n    }\r\n    function thereIsADoubleAttackCreatingMove(moveList = history) {\r\n        return (doubleAttackCreatingMoves(moveList).length > 0)\r\n    }\r\n\r\n    function doubleAttackGrantingMoves(moveList = history) {\r\n        let doubleAttackGrantingMoves = [];\r\n        emptySquares(moveList).forEach(testSquare => {\r\n            let hypotheticalHistory = moveList.concat(testSquare);\r\n            if (thereIsADoubleAttackCreatingMove(hypotheticalHistory)) {  // If there are any wins for Opponent in this hypotheticalHistory then the testSquare is a losing move. \r\n                doubleAttackGrantingMoves = doubleAttackGrantingMoves.concat(testSquare);\r\n            }\r\n        })\r\n        return doubleAttackGrantingMoves;\r\n    }\r\n\r\n    \r\n\r\n\r\n    // TODO\r\n    function getBoardHints() {\r\n        // PRIORITIES  \r\n        // (0)\r\n        const player = myTurn(history);\r\n        let hints = Array(9).fill('unknown');  // Start with an array representing a board of NINE squares.\r\n        \r\n        // (1)\r\n        claimedSquares().forEach(squareId => {\r\n            hints[squareId] = 'claimed';\r\n        });\r\n\r\n        //  (2) Mark my immediate wins.   GREEN\r\n        immediateWins(history).forEach(winningSquare => {\r\n            hints[winningSquare] = 'win';\r\n        });\r\n\r\n        // (3) Mark immediate losses.  yet unknown squares that grant opponent an immediate win. yet unknown implies unclaimed and not an immediate win.  RED\r\n        immediatelyLosingMoves(history).forEach(losingSquare => {\r\n            if (hints[losingSquare] === 'unknown') {\r\n                hints[losingSquare] = 'lose';\r\n            }\r\n        });\r\n        \r\n        \r\n        // (4) Mark double attacking wins.  yet unknown squares that create a double attack.  GREEN\r\n        doubleAttackCreatingMoves(history).forEach(keyAttackingMove => {\r\n            if (hints[keyAttackingMove] === 'unknown'){\r\n                hints[keyAttackingMove] = 'win';\r\n            }\r\n        });\r\n        \r\n        // (5) Mark moves that grant the opponent a double attacking win. Only apply to yet unknown squares.  RED\r\n        doubleAttackGrantingMoves(history).forEach(losingSquare => {\r\n            if (hints[losingSquare] === 'unknown') {\r\n                hints[losingSquare] = 'lose';\r\n            }\r\n        });\r\n        \r\n        // (6) Mark distant win forcing moves.  yet unknown squares that initiate a 3 move win sequence.  GREEN\r\n        distantForcedWinCreatingMoves(history).forEach(keyAttackingMove => {\r\n            if (hints[keyAttackingMove] === 'unknown') {\r\n                hints[keyAttackingMove] = 'win';\r\n            }\r\n        });\r\n\r\n        // (7) Mark moves that grant the opponent a distant win forcing moves. Only apply to yet unknown squares.  RED\r\n        console.log(`Yet UNKNOWN squares in the hints: ${unknownSquares(hints)}`)\r\n        unknownSquares(hints).forEach(testSquare => {\r\n            let hypotheticalHistory = history.concat(testSquare);\r\n            if (thereIsADistantForcedWinCreatingMove(hypotheticalHistory)) {  // If there are any distant forced wins for Opponent in this hypotheticalHistory then the testSquare is a losing move. \r\n                hints[testSquare] = 'lose';\r\n            }  // else {  The test square does not create an immediate loss, leave it as 'unknown' for now.}\r\n        });\r\n\r\n        // (8) Mark yet unknown squares as leading to a draw.\r\n        unknownSquares(hints).forEach(square => {\r\n            hints[square] = 'draw';\r\n        });\r\n        \r\n        // console.log(`getBoardHints() made this list: ${hints}`)\r\n        return hints;\r\n    }\r\n\r\n    \r\n    // HIGH-LEVEL PANEL HELPERS no params\r\n    function getStatus() {\r\n        if (wins('x')) {\r\n            return (`X wins!`)\r\n        }\r\n        else if (wins('o')) {\r\n            return (`O wins!`)\r\n        }\r\n        else if (gameDrawn()) {\r\n            return (`Draw.`)\r\n        }\r\n        else if (history.length % 2 === 0) {\r\n            return (`X's turn.`)\r\n        }\r\n        else if (history.length % 2 === 1) {\r\n            return (`O's turn.`)\r\n        }\r\n        else {\r\n            console.error(\"A call to getStatus() did not work!\");\r\n            return\r\n        }\r\n    }\r\n\r\n\r\n    function getCommentary() {\r\n        // console.log(`getCommentary() called while showCommentary = ${showCommentary}`)\r\n        if (gameOver()) {\r\n            return `Game Over`\r\n        }\r\n        if (mode === 'play') {\r\n            return `Coach's commentary would appear here in learn mode. TODO w-l-d record`\r\n        }\r\n\r\n        // If no moves have been made\r\n        if (history.length === 0) {\r\n            return `It may look like X has  9 different options but \r\n            when you consider symmetry there are really only 3: Center, Edge, or Corner.\r\n            None of X's current options would be mistakes, but nor do any of them lead to a forced win.`\r\n        }\r\n\r\n        // If one move has been made\r\n        if (history.length === 1 && history[0] === 4) {\r\n            return `The center opening is the most popular because there are more three-in-a-rows that \r\n            include the center square than any other square.  Though it is sound for X, the center opening \r\n            is also the easiest for O to defend against.\r\n            Considering symmetry, O really only has two options, edge or corner. \r\n            One is good and keeps O on track for a draw. The other is bad and opens the door for X to force a win.`\r\n        }\r\n        if (history.length === 1 && history[0] !== 4 && history[0] % 2 === 0 ) {\r\n            return `The corner opening can lead X to a winning double attack if O makes a mistake on their first move.\r\n            Unfortunately for X, the only sound move that O has in this position is also the most intuitive one.\r\n            Go through each of O's losing options and come up with a plan for X that guarantees a win. Do you notice a pattern?\r\n            To win X must create a threat that forces O to play a specific defensive move, then follow that up with a double attack.`\r\n        }\r\n        if (history.length === 1 && history[0] % 2 === 1) {\r\n            return `The Edge opening is the least commonly played and is the most complex to analyze.\r\n            There are tricks and traps in this position that both players can take advantage of! \r\n            O has five non-symmetrical options. Don't settle for just finding one move that lets O force a draw, \r\n            dig into each of the five options and find the ones that maximize the chances X will make a mistake.`\r\n        }\r\n\r\n        // If two moves has been made\r\n        if (history.length === 2) {\r\n            let message = '';\r\n            if (thereIsADistantForcedWinCreatingMove()) {\r\n                message = `O's first move was a mistake and now X can ensure victory! But how?`\r\n            }\r\n            else {\r\n                let answer = (gameLosingMoves().length > 0) ? 'Yes! So be careful.' : 'No! You\\'re safe no matter what.';\r\n                message = `O's first move was sound. None of X's current options ensure victory, but do any actually lose?  ${answer}`\r\n            }\r\n            return message;\r\n        }\r\n\r\n        // If three moves have been made\r\n        if (history.length >= 3 ) {\r\n            let message = '';\r\n            if (thereIsAnImmediateWin()) {\r\n                message = `You have a winning move! Defensive moves are irrelevant.`\r\n            }\r\n            else if (thisIsADoubleAttack()) {\r\n                message = `You cannot win right now and cannot block all of your opponent's threats. Which move led you to from a draw to defeat?`\r\n            }\r\n            else if (thereIsADoubleAttackCreatingMove()) {\r\n                message = `You can set up a winning double attack! Don't settle for empty threats, \r\n                think hard and be sure that you are setting yourself up to win no matter what!`\r\n            }\r\n            else if (thereIsAnUrgentDefensiveMove()) {\r\n                message = `You cannot win right now so you must defend the one key square.`\r\n            }\r\n            \r\n            else {\r\n                let answer = (gameLosingMoves().length > 0) ? \r\n                    'Nonetheless, it is possible for you to make a mistake and lose right now. Play carefully!' : \r\n                    'You\\'re on track for a draw no matter what move you play in this position.';\r\n                message = `You have neither a winning attack nor an urgent defensive move. ${answer}`\r\n            }\r\n            return message;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // MID-LEVEL HELPERS for getBoardColors() and getBoardHints()\r\n    function highlightWins() {\r\n        let highlightedSquares = Array(9).fill('noColor')\r\n        if (!gameOver()) {  // Assert: we only reach this point if either x or o has won.\r\n            console.error(`highlightWins() was called but found that the game is not over`);\r\n        }\r\n        let winner = (wins('x')) ? 'x' : 'o';\r\n        // let lines = lines(winner);\r\n        linesWithThree(winner).forEach(line => {\r\n            squaresInLine(line).forEach(square => {\r\n                highlightedSquares[square] = 'win';\r\n            });\r\n        });\r\n        return highlightedSquares;\r\n    } \r\n     \r\n    \r\n\r\n    function threatCreatingMoves(moveList = history) {\r\n        // This list may contain duplicates. A squareId that appears twice creates two separate two-in-a-line threats.\r\n        const player = myTurn(moveList);\r\n        const threatCreatingMoves = []; \r\n        linesWithOnlyOne(moveList).forEach((line) => {\r\n            squaresInLine(line).forEach((square) => {\r\n                if (squareIsEmpty(square, moveList)) {                 // Don't add an already claimed square to the list of therat creating moves!\r\n                    threatCreatingMoves.push(square);\r\n                }\r\n            })\r\n        })\r\n        // console.log(`Player '${player}' can create threats on the following squares: ${threatCreatingMoves}`)\r\n        return threatCreatingMoves;\r\n    }\r\n\r\n    // function singleAttackCreatingMoves(moveList = history) {\r\n    //     return threatCreatingMoves(moveList).filter((square, index) => threatCreatingMoves(moveList).indexOf(square) === index);\r\n    // }\r\n\r\n\r\n    // function winningDoubleAttackCreatingMoves(moveList = history) {\r\n    //     // A doubleAttack is winning IFF it can be made without ignoring an urgentDefensiveMove.\r\n    //     // A doubleAttackCreatingMove is winning IF there were no urgentDefensiveMoves OR IF it is identical to the ONE urgentDefensiveMove.\r\n    // }\r\n    \r\n    \r\n\r\n\r\n    // DEFINITION: thisMoveIsForced IFF player who moved last has one unblocked threat and player whose turn it is has none.\r\n    function thisMoveIsForced(moveList = history) {\r\n        let isForced = (!thereIsAnImmediateWin(moveList) && thereIsAnUrgentDefensiveMove(moveList))\r\n        // console.log(`In position: ${moveList} The next move is forced: ${isForced}`)\r\n        return (isForced);\r\n    }\r\n    \r\n    // DEFINITION: ForcingMoves are the moves that give the opponent an urgentDefensiveMove and no immediateWin to take presidence over it.\r\n    function forcingMoves(moveList = history) {\r\n        let forcingMoves = [];\r\n        emptySquares(moveList).forEach(testSquare => {\r\n            let hypotheticalHistory = moveList.concat(testSquare);\r\n            if (thisMoveIsForced(hypotheticalHistory)) {\r\n                forcingMoves = forcingMoves.concat(testSquare)\r\n            }\r\n        })\r\n        // console.log(`forcingMoves found these: ${forcingMoves}`)\r\n        return forcingMoves;\r\n    }\r\n    \r\n    \r\n    // DEFINITION: A move that creates a position where you have one threat and your opponent has none &&\r\n    //             once your opponent responds with their one urgentDefensiveMove you are left with the ability to create a double attack. \r\n    function distantForcedWinCreatingMoves(moveList = history) {\r\n        let distantForcedWinCreatingMovesList = [];\r\n        // There cannot be a distantForcedWinCreatingMove unless there are at least 5 empty squares and playerTwo has has a chance to make an error on their first move.\r\n        if (moveList.length < 2 || moveList.length > 4){\r\n            return distantForcedWinCreatingMovesList;\r\n        }\r\n        // To force a win you must force the first reply ... \r\n        forcingMoves(moveList).forEach(forcingMove => {\r\n            // ... and ensure the forced reply leaves you able to create a double attack.\r\n            let hypotheticalHistory = moveList.concat(forcingMove);\r\n            if (urgentDefensiveMoves(hypotheticalHistory).length !== 1){\r\n                console.error(`There are ${urgentDefensiveMoves(hypotheticalHistory).length} urgentDefensiveMoves in the hypotheticalHistory being examined by distantForcedWinCreatingMoves.`)\r\n            }\r\n            let urgentDefensiveMove = urgentDefensiveMoves(hypotheticalHistory)[0];\r\n            hypotheticalHistory = hypotheticalHistory.concat(urgentDefensiveMove);\r\n            // console.log(`The one urgent defensive move is ${urgentDefensiveMove} leading to position: ${hypotheticalHistory}`);\r\n            if (thereIsADoubleAttackCreatingMove(hypotheticalHistory)){\r\n                distantForcedWinCreatingMovesList = distantForcedWinCreatingMovesList.concat(forcingMove);\r\n            }\r\n        })\r\n        console.log(`distantForcedWinCreatingMoves() found the following list: ${distantForcedWinCreatingMovesList}`)\r\n        return distantForcedWinCreatingMovesList;\r\n    }\r\n    function thereIsADistantForcedWinCreatingMove(moveList = history) {\r\n        // There cannot be a distantForcedWinCreatingMove unless there are at least 5 empty squares and playerTwo has has a chance to make an error on their first move.\r\n        // return (moveList.length > 2 && moveList.length < 5 && distantForcedWinCreatingMoves(moveList).length > 0)\r\n        return (distantForcedWinCreatingMoves(moveList).length > 0)\r\n    }\r\n\r\n\r\n    \r\n    // Check if each of the squares that is is still empty is a losing Move\r\n    function gameLosingMoves(moveList = history) {  // This function should ONLY be called by getBoardHints when there are no forced Win Creating Moves\r\n        let gameLosingMoves = [];\r\n        emptySquares().forEach(square => {\r\n            let hypotheticalHistory = moveList.concat(square);\r\n            if (thereIsAForcedWin(hypotheticalHistory)) {\r\n                console.log(`I think I found a forced win after the moves: ${hypotheticalHistory}`)\r\n                gameLosingMoves = gameLosingMoves.concat(square)\r\n            }\r\n        })\r\n        console.log(`gameLosingMoves() found the following list: ${gameLosingMoves}`)\r\n        return gameLosingMoves;\r\n    }\r\n\r\n\r\n\r\n    \r\n   \r\n\r\n\r\n    // CLICK HANDLERS\r\n    function handleSquareClick(squareClicked) {\r\n        if (gameOver()) {\r\n            console.log(\"return without effects from handleSquareClick(). The Game is already over.\")\r\n            return;\r\n        }\r\n        if (!squareIsEmpty(squareClicked)) {\r\n            console.log(\"return without effects from handleSquareClick(). That square has already been claimed.\")\r\n            return;\r\n        }\r\n        // If we reach this point the clicked square is open and the game is not over yet ... \r\n        let updatedHistory = history.concat(squareClicked)\r\n        console.log(`History: ${updatedHistory}`)\r\n        \r\n        setHistory(updatedHistory);\r\n        // This function does not pass along any of its results, it acts thru side-effects. It calls setHistory and use of that hook tells React it needs to re-render all components that depend on the state \"history\".\r\n    }\r\n    function handleUndoClick() {\r\n        const shortenedHistory = history.slice(0, history.length - 1)\r\n        console.log(`handleUndoClick() removed ${history[history.length - 1]} . New Shortened history: ${shortenedHistory}`);\r\n        setHistory(shortenedHistory);\r\n    }\r\n    function handleNewGameClick() {\r\n        setHistory([]);\r\n    }\r\n    function toggleShowHints() {\r\n        // console.log(`toggleShowHintsSwitch called, setting  to ${!showHints}`);\r\n        setShowHints(!showHints)\r\n    }\r\n    // function toggleShowCommentarySwitch() {\r\n    //     setShowCommentary(!showCommentary)\r\n    // }\r\n    \r\n    \r\n    // TURN HELPERS\r\n    // High-Level Methods that need to know whose turn it is can deduce that info by using these helpers to look at the history directly, rather than having to be invoked with a player param. \r\n    function myTurn(moveList = history) {\r\n        return (moveList.length % 2 === 0) ? 'x' : 'o' ;\r\n    }\r\n    function notMyTurn(moveList = history) {\r\n        return (moveList.length % 2 === 0) ? 'o' : 'x';\r\n    }\r\n    function other(player) {\r\n        if (player !== 'o' && player !== 'x') { console.error(`other(player) called with invalid player: ${player}`)}\r\n        return (player === 'o') ? 'x' : 'o';\r\n    }\r\n\r\n\r\n    // LOW-LEVEL HELPERS\r\n    // need to be told which player you care about b/c they may be used on EITHER the player whose turn it is or the other player.\r\n    function squaresClaimedByPlayer(player, moveList = history) {\r\n        // let history = (alteredHistory === undefined) ? history : alteredHistory\r\n        \r\n        if (player === 'x') {\r\n            return moveList.filter((squareId, index) => index % 2 === 0);\r\n        }\r\n        else if (player === 'o') {\r\n            return moveList.filter((squareId, index) => index % 2 === 1);\r\n        }\r\n        else {\r\n            console.error(`Method squaresClaimedByPlayer() called with invalid player: ${player}`)\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n    function lineCountsFor(player, moveList = history) {\r\n        // Based on the history state, return an array of 8 ints 0-3 indicating the number of X's or O's in each row, col, and diagonal\r\n        // const player = myTurn(moveList); \r\n        let lines = Array(8).fill(0);\r\n\r\n        squaresClaimedByPlayer(player, moveList).forEach(square => {\r\n            // Update Row\r\n            const row = Math.floor(square / 3)    // number 0, 1, or 2\r\n            lines[row]++;\r\n\r\n            // Update Col\r\n            const col = (square % 3)            // number 0, 1, or 2  +3 to account for the three indexes set asside for rows\r\n            lines[col + 3]++;\r\n\r\n            // UpSlash ?\r\n            if (square === 2 || square === 4 || square === 6) {\r\n                lines[6]++\r\n            }\r\n\r\n            // DownSlash ?\r\n            if (square === 0 || square === 4 || square === 8) {\r\n                lines[7]++\r\n            }\r\n        });\r\n        // console.log(`Status: ${status}`)\r\n        return lines;\r\n    }\r\n\r\n    \r\n\r\n    function thereIsAForcedWin(moveList = history) {\r\n        const thereIsAForcedWin = (thereIsAnImmediateWin(moveList)\r\n            || thereIsADoubleAttackCreatingMove(moveList)\r\n            || thereIsADistantForcedWinCreatingMove(moveList))\r\n        // console.log(`immediateWins(moveList).length: ${immediateWins(moveList).length}`)\r\n        // console.log(`thereIsADistantForcedWinCreatingMove(moveList).length: ${distantForcedWinCreatingMoves(moveList)ngth}`)\r\n        console.log(`forcedWinCreatingMoves based on the moveList: ${moveList} ==>  ${distantForcedWinCreatingMoves(moveList)}`)\r\n        console.log(`thereIsAForcedWin for the current player: ${thereIsAForcedWin}`)\r\n        return thereIsAForcedWin;\r\n    }\r\n\r\n\r\n\r\n    function linesWithThree(player, moveList = history) {\r\n        let linesList = [];\r\n        // console.log(`lineCountsFor : ${lineCountsFor(player)}`)\r\n        lineCountsFor(player, moveList).forEach((count, line) => {\r\n            if (count === 3) {\r\n                linesList.push(line)\r\n            }\r\n        })\r\n        // console.log(`linesWithThree() called for player '${player}'. List: ${linesList}`)\r\n        return linesList;\r\n    }\r\n\r\n    function linesWithOnlyTwo(player, moveList = history) {\r\n        let linesList = [];\r\n        lineCountsFor(player, moveList).forEach((count, line) => {\r\n            if (count === 2 && lineCountsFor(other(player), moveList)[line] === 0 ) {  \r\n                linesList.push(line)\r\n            }\r\n        })\r\n        // console.log(`List Unblocked Twos for player '${player}': ${list}`)\r\n        return linesList;\r\n    }\r\n\r\n    function linesWithOnlyOne(moveList = history) {\r\n        const player = myTurn(moveList);\r\n        let linesList = [];\r\n        lineCountsFor(player, moveList).forEach((count, line) => {\r\n            if (count === 1 && lineCountsFor(other(player), moveList)[line] === 0) {\r\n                linesList.push(line)\r\n            }\r\n        })\r\n        // console.log(`List Unblocked Ones for player '${player}' based on moveList ${moveList} ==> ${linesList}`)\r\n        return linesList;\r\n    }\r\n    function emptyLines(moveList = history) {\r\n        let linesList = [];\r\n        lineCountsFor('x', moveList).forEach((count, line) => {\r\n            if (count === 0 && lineCountsFor('o', moveList)[line] === 0) {\r\n                linesList.push(line)\r\n            }\r\n        })\r\n        console.log(`List Empty Lines: ${linesList}`)\r\n        return linesList;\r\n    }\r\n    function blockedLines(moveList = history) {\r\n        let linesList = [];\r\n        lineCountsFor('x', moveList).forEach((count, line) => {\r\n            if (count > 0 && lineCountsFor('o', moveList)[line] > 0) {\r\n                linesList.push(line)\r\n            }\r\n        })\r\n        console.log(`List Blocked Lines: ${linesList}`)\r\n        return linesList;\r\n    }\r\n    function allLines() {\r\n        // Top Row, Middle Row, Bottom Row, \r\n        // Left Column, Middle Column, Right Column,\r\n        // Upslash Diagonal, Downslash Diagonal\r\n        return [0, 1, 2, 3, 4, 5, 6, 7]\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n\r\n    \r\n    \r\n    \r\n\r\n    // list the squareIds that fall in a given lineId\r\n    function squaresInLine(lineId) {\r\n        // console.log(`getSquares() was called with lineId: ${lineId}`)\r\n        let squareIds;\r\n        switch (lineId) {\r\n            case 0:\r\n                squareIds = [0, 1, 2];  // x / 3 < 1\r\n                break;\r\n            case 1:\r\n                squareIds = [3, 4, 5];  // (x / 3).floor() === 1\r\n                break;\r\n            case 2:\r\n                squareIds = [6, 7, 8]; // (x / 3) > 1\r\n                break;\r\n            case 3:\r\n                squareIds = [0, 3, 6];  // congruent to 0 mod 3\r\n                break;\r\n            case 4:\r\n                squareIds = [1, 4, 7];  // congruent to 1 mod 3\r\n                break;\r\n            case 5:\r\n                squareIds = [2, 5, 8];  // congruent to 2 mod 3\r\n                break;\r\n            case 6:\r\n                squareIds = [2, 4, 6];  // diagonal\r\n                break;\r\n            case 7:\r\n                squareIds = [0, 4, 8];  // congruent to 0 mod 4\r\n                break;\r\n            default:\r\n                console.error(`getSquares() was called with an invalid lineId.`)\r\n        }\r\n        return squareIds;\r\n        \r\n    }\r\n\r\n\r\n    \r\n    // BOOLEAN helpers for getStatus() and handleSquareClick()\r\n    function squareIsEmpty(square, moveList = history) {\r\n        return (!moveList.includes(square))\r\n    }\r\n    \r\n\r\n    \r\n    // function gameDrawn() {\r\n    //     return (history.length >= 9 && !wins('x') && !wins('o'));  // Board full and neither player has a win\r\n    // }\r\n    function gameDrawn() {\r\n        return (blockedLines().length >= 8 && !wins('x') && !wins('o'));  // Board full and neither player has a win\r\n    }\r\n    \r\n    \r\n    \r\n    function gameOver(moveList = history) {\r\n        return (moveList.length >= 9 \r\n            || wins('x', moveList) \r\n            || wins('o', moveList));  // Board full or there's a 3-in-a-row\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\n\r\n// My Components\r\n\r\n// MUI  components\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    board: {\r\n        // border: 'solid green 1px',\r\n        position: 'absolute',\r\n        top: '0',\r\n        left: '0',\r\n        width: '100%',  \r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        padding: '0.5rem',\r\n\r\n        // margin: '1rem 0.0rem',\r\n    },\r\n    row: {\r\n        // border: 'solid blue 1px',\r\n        width: '100%',\r\n        height: '50%',\r\n\r\n        display: 'flex',\r\n        flexWrap: 'no-wrap',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    numCard: {\r\n        margin: '0.3rem',\r\n        width: '15%',\r\n        maxWidth: '120px',\r\n        height: 'calc(100% - 0.6rem)',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        fontSize: '500%',\r\n        fontWeight: 'bold',\r\n        color: theme.palette.common.black,\r\n    },\r\n    playerOne: {\r\n        backgroundColor: '#3f51b5',\r\n        color: theme.palette.common.white,\r\n\r\n    },\r\n    playerTwo: {\r\n        backgroundColor: '#4AC9FD',\r\n\r\n    },\r\n}));\r\n\r\n\r\n\r\nexport default function Board(props) {\r\n    const classes = useStyles();\r\n    const handleCardClick = props.handleCardClick\r\n    const boardStatus = props.boardStatus;\r\n\r\n    let topRowData = boardStatus.slice(1, 6);\r\n    let bottomRowData = boardStatus.slice(6, 10);\r\n    \r\n    \r\n    return (\r\n        <Box className={classes.board}>\r\n            <Row\r\n                key='0'\r\n                rowId={0}\r\n                data={topRowData} \r\n                handleCardClick={handleCardClick}\r\n            />\r\n            <Row\r\n                key='1'\r\n                rowId={1}\r\n                data={bottomRowData}\r\n                handleCardClick={handleCardClick}\r\n            />\r\n        </Box>\r\n    )\r\n}\r\n\r\nfunction Row(props) {\r\n    const classes = useStyles();\r\n    const rowId = props.rowId\r\n    const data = props.data\r\n    const handleCardClick = props.handleCardClick\r\n\r\n    let cards = [];\r\n    data.forEach((status, index) => {\r\n        let cardId = 5 * rowId + index + 1;\r\n        let newCard =\r\n            <Card\r\n                key={cardId}\r\n                cardId={cardId}\r\n                status={status}\r\n                handleClick={handleCardClick}\r\n            />;\r\n        cards = cards.concat(newCard);\r\n    })\r\n    \r\n    return (\r\n        <Box className={classes.row}>\r\n            {cards}\r\n        </Box>\r\n    )\r\n}\r\n\r\nfunction Card(props) {\r\n    const classes = useStyles();\r\n    const cardId = props.cardId\r\n    const status = props.status\r\n    const handleClick = props.handleClick\r\n\r\n    let className;\r\n    switch (status) {\r\n        case 'playerOne':\r\n            className = `${classes.numCard} ${classes.playerOne} `\r\n            break;\r\n        case 'playerTwo':\r\n            className = `${classes.numCard} ${classes.playerTwo} `\r\n            break;\r\n        case 'unclaimed':\r\n            className = `${classes.numCard} `\r\n            break;\r\n        default:\r\n            throw console.error(\"number card passed invalid status\");\r\n    } \r\n\r\n    return (\r\n        <Paper\r\n            elevation={4}\r\n            className={className}\r\n            onClick={() => handleClick(cardId)}\r\n        >\r\n            {cardId}\r\n        </Paper>\r\n    )\r\n}","import React, { useState } from 'react';\r\n\r\n// MUI Components\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n    helpModal: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    buttonIcon: {\r\n        marginRight: '1vmin',\r\n        fontSize: 'larger',\r\n    },\r\n    modal: {\r\n        margin: '6.0rem 3.0rem'\r\n        \r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        borderRadius: '2.0rem',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(4),\r\n    },\r\n    button: {\r\n        margin: '0.5rem 1.0rem',\r\n        width: '70%',\r\n        height: '30%',\r\n        maxHeight: '3.0rem',\r\n        fontSize: '1.2rem',\r\n    },\r\n    \r\n    \r\n}));\r\n\r\nexport default function HelpModal() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.helpModal}>\r\n            <Button\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleOpen}\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\"\r\n            >\r\n                <HelpOutlineIcon className={classes.buttonIcon} /> \r\n                Help\r\n            </Button>\r\n\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <Container maxWidth='md' className={classes.paper} > \r\n                        <Typography variant='h3' id=\"transition-modal-title\" >\r\n                            How To Play\r\n                        </Typography>\r\n                        <Typography variant='body1' id=\"transition-modal-title\" gutterBottom >\r\n                            Two players take turns claiming one of the nine numbered cards. <br />\r\n                            To win, a player must collect a set of exactly 3 cards whose numbers add up to exactly 15. <br />\r\n                            Claiming extra cards that are not included in your winning trio is ok,\r\n                            but sets of 2, 4, or 5 cards do not win the game, even if they sum to 15.\r\n                        </Typography>\r\n                        <Typography variant='h3' id=\"transition-modal-title\" >\r\n                            Difficulty Modes\r\n                        </Typography>\r\n                        <Typography variant='body1' id=\"transition-modal-title\" gutterBottom >\r\n                            <strong>Easy:</strong> the bot will decide its strategy by looking only one move into the future. <br />\r\n                            <strong>Medium:</strong> the bot will look for oportunities to create double attacks. <br />\r\n                            <strong>Hard:</strong> the bot plays perfectly and should never lose a game. <br />\r\n                            Challenge yourself further by trying to play quickly and never lose!\r\n                        </Typography>\r\n                        \r\n                    </Container>\r\n                    \r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n// Play the 15-Game against my bot until you have mastered it! \r\n// You will take turns making the first move. \r\n// In hard mode my bot never makes a mistake and the best you \r\n// can do is get a draw every time.\r\n// In easy mode my bot makes exactly one mistake each game and\r\n// you should be able to win every single time!\r\n\r\n","import React, { useState } from 'react';\r\n\r\n// Custom Components\r\nimport HelpModal from \"./HelpModal\";\r\n// import FifteenGameSettingsModal from \"./FifteenGameSettingsModal\";\r\n\r\n// MUI Components\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\n\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nconst useStyles = makeStyles((theme) => ({\r\n    panel: {\r\n        width: '100%',\r\n        height: '100%',\r\n\r\n    },\r\n    infoArea: {\r\n        // border: 'solid green 1px',\r\n        // padding: '1.0rem 0.0rem',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n\r\n        height: '50%',\r\n\r\n    },\r\n    // gameStatus: {\r\n    //     fontSize: '2rem',\r\n    //     fontWeight: 'bold'\r\n    // },\r\n    // commentary: {\r\n    //     overflow: 'hidden',\r\n    //     textOverflow: 'ellipsis',\r\n    //     flex: '1 0 55%'\r\n    // },\r\n    controls: {\r\n        height: '50%',\r\n    },\r\n    difficultyModeBox: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'flex-end'\r\n    },\r\n    otherButtonsBox: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        // alignItems: 'flex-start'\r\n    },\r\n\r\n    button: {\r\n        color: theme.palette.common.white,\r\n        backgroundColor: theme.palette.primary.main,\r\n        margin: '0.5rem 1.0rem',\r\n        width: '70%',\r\n        height: '30%',\r\n        maxHeight: '3.0rem',\r\n        fontSize: '1.2rem',\r\n    },\r\n    selectedButton: {\r\n        color: theme.palette.common.white,\r\n        backgroundColor: 'rgba(46, 107, 18, 1.0)',\r\n        margin: '0.5rem 1.0rem',\r\n        width: '70%',\r\n        height: '30%',\r\n        maxHeight: '3.0rem',\r\n        fontSize: '1.2rem',\r\n    },\r\n    unselectedButton: {\r\n        color: '#999999',\r\n        backgroundColor: 'rgba(46, 107, 18, 0.5)',\r\n        margin: '0.5rem 1.0rem',\r\n        width: '70%',\r\n        height: '30%',\r\n        maxHeight: '3.0rem',\r\n        fontSize: '1.2rem',\r\n    },\r\n\r\n    buttonIcon: {\r\n        marginRight: '1vmin',\r\n        fontSize: 'larger'\r\n        // fontSize: 'min(max(0.7rem, 3vmin), 22px)',\r\n    },\r\n    switchLabel: {\r\n        lineHeight: '1rem'\r\n    },\r\n\r\n\r\n    \r\n    \r\n}));\r\n\r\nexport default function Panel(props) {\r\n    const classes = useStyles();\r\n\r\n    const gameNumber = props.gameNumber;\r\n    const gameStatus = props.gameStatus;\r\n    const moveNumber = props.moveNumber;\r\n    // const handleUndoButtonClick = props.handleUndoButtonClick\r\n    const handleNewGameClick = props.handleNewGameClick\r\n    \r\n    const difficultyMode = props.difficultyMode\r\n    // const setDifficultyMode = props.setDifficultyMode\r\n    const handleDifficultyModeChange = props.handleDifficultyModeChange\r\n\r\n\r\n    const showMoves = props.showMoves\r\n    const showCommentary = props.showCommentary\r\n    const toggleShowMovesSwitch = props.toggleShowMovesSwitch\r\n    const toggleShowCommentarySwitch = props.toggleShowCommentarySwitch\r\n\r\n\r\n    const newGameButton = (\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={() => handleNewGameClick()}\r\n            disabled={!gameOver(gameStatus)}\r\n        >\r\n            <ReplayIcon className={classes.buttonIcon} />\r\n            Play&nbsp;Again\r\n        </Button>\r\n    );\r\n\r\n    \r\n\r\n    let difficultyModeButtons = (\r\n        <React.Fragment  >\r\n            <Button\r\n                className={difficultyMode === \"easy\" ? classes.selectedButton : classes.unselectedButton}\r\n                variant={'contained'}\r\n                onClick={() => handleDifficultyModeChange(\"easy\")}\r\n            >\r\n                Easy\r\n            </Button>\r\n            <Button\r\n                className={difficultyMode === \"medium\" ? classes.selectedButton : classes.unselectedButton }\r\n                variant={'contained'}\r\n                onClick={() => handleDifficultyModeChange(\"medium\")}\r\n            >\r\n                Medium\r\n            </Button>\r\n            <Button\r\n                className={difficultyMode === \"hard\" ? classes.selectedButton : classes.unselectedButton }\r\n                variant={'contained'}\r\n                onClick={() => handleDifficultyModeChange(\"hard\")}\r\n            >\r\n                Hard\r\n            </Button>\r\n        </React.Fragment>\r\n    )\r\n\r\n    function gameOver(gs = gameStatus) {\r\n        return (gs === `Bot Wins!` || gs === `Player Wins!` || gs === `Game Over. Draw.`)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Grid container className={classes.panel}>\r\n            <Grid item className={classes.infoArea} xs={12}>\r\n                <Typography align='center' component='h1' variant='h3' noWrap gutterBottom>\r\n                    Game {gameNumber}:&nbsp;&nbsp;{gameStatus}\r\n                </Typography> \r\n                <Typography align='center' component='h3' variant='h4' noWrap >\r\n                    Human: {props.record[0]} &emsp;  Bot: {props.record[1]} &emsp;  Draw: {props.record[2]} \r\n                </Typography> \r\n                \r\n            </Grid>\r\n            <Grid container item className={classes.controls} xs={12}  >\r\n                <Grid item className={classes.difficultyModeBox} xs={6} >\r\n                    {difficultyModeButtons}\r\n                </Grid>\r\n                <Grid item className={classes.otherButtonsBox} xs={6}>\r\n                    {newGameButton}\r\n                    <HelpModal />\r\n                </Grid>\r\n                \r\n                \r\n            </Grid>\r\n            \r\n        </Grid>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\n\r\n\r\n\r\n// My Components\r\n// import Board from \"./FifteenBoard\";\r\nimport Board from \"./Board\";\r\nimport Panel from \"./Panel\";\r\n\r\n\r\n// MUI  components\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ContactlessOutlined, Theaters } from '@material-ui/icons';\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        // border: 'solid orange 1px',\r\n        width: '100%',\r\n        height: 'calc(100% - 4rem)',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'space-between',\r\n        backgroundColor: theme.palette.common.black,\r\n\r\n    },\r\n    boardContainer: {\r\n        // border: 'solid red 1px',\r\n        width: '100%',\r\n        paddingTop: 'min(100%, 45vh)',\r\n        height: '0',\r\n        position: 'relative',\r\n    },\r\n    boardArea: {\r\n        // border: 'solid yellow 1px',\r\n        width: '100%',\r\n        height: '100%',\r\n        position: 'absolute',\r\n        top: '0',\r\n        left: '0',\r\n    },\r\n\r\n\r\n    panelContainer: {\r\n        // border: 'solid yellow 1px',\r\n        width: '100%',\r\n        flex: '2 0 40%',\r\n\r\n        color: theme.palette.common.white,\r\n        \r\n    },\r\n    // settingsBox: {\r\n    //     border: 'solid red 1px',\r\n    //     display: 'flex',\r\n    //     width: '100%',\r\n    //     flex: '2 0 10%',\r\n\r\n    //     justifyContent: 'space-around'\r\n    // },\r\n\r\n    \r\n    record: {\r\n        alignSelf: 'bottom'\r\n    },\r\n\r\n    \r\n\r\n    \r\n}));\r\n\r\n\r\nexport default function FifteenGame() {\r\n    const classes = useStyles();\r\n    \r\n    let [gameNumber, setGameNumber] = useState(1);\r\n    let [record, setRecord] = useState([0, 0, 0]);     // 3 element counter for humanWins, botWins, and tieGames.\r\n    let [moveList, setMoveList] = useState([]);  // Array of the numbers claimed so far in order claimed.\r\n    let [difficultyMode, setDifficultyMode] = useState(\"hard\"); // In \"hard\" mode my bot never makes a mistake. In \"easy\" mode bot makes exactly one mistake each game. \r\n\r\n\r\n    // The human moves first in the first game, alternating after that.\r\n    function botGoesFirst(gn = gameNumber) { return (gn % 2 === 0)  }\r\n\r\n    // Add up the moves in the current moveList to determin turn number. 1-indexed.\r\n    function moveNumber(ml = moveList) { return ( 1 + ml.length) }\r\n    \r\n    // The human moves first in the first game, alternating after that.\r\n    function botGoesNext(gn = gameNumber, ml = moveList) { \r\n        if (gameOver(ml)) {\r\n            return false;\r\n        }\r\n        let firstAndOdd = (botGoesFirst(gn) && moveNumber(ml) % 2 === 1);\r\n        let secondAndEven = (!botGoesFirst(gn) && moveNumber(ml) % 2 === 0)\r\n        return (firstAndOdd || secondAndEven);\r\n    }\r\n\r\n    // Convert a moveList into the representation the <Board> uses.\r\n    function getBoardStatus(ml = moveList) {\r\n        let boardStatus = Array(10).fill('unclaimed')  // CardIds range from 1-9. Index 0 in this array is never used.\r\n        ml.forEach((numberClaimed, turnNumber) => {\r\n            boardStatus[numberClaimed] = (turnNumber % 2 === 0) ? 'playerOne' : 'playerTwo';\r\n        })\r\n        return boardStatus;\r\n    }\r\n\r\n    \r\n    return (\r\n        <Container className={classes.root} maxWidth='md' disableGutters>\r\n            <Box className={classes.boardContainer}>\r\n                <Box className={classes.boardArea} >\r\n                    <Board \r\n                        handleCardClick={handleCardClick} \r\n                        boardStatus={getBoardStatus(moveList)}        // TODO !!!!!!!!!! DEFINE THIS FUNC TO CONVERT HISTORY TO THE ARRAY THE BOARD EXPECTS\r\n                    />\r\n                </Box>\r\n            </Box>\r\n            <Box className={classes.panelContainer}  >\r\n                <Panel \r\n                    record={record}\r\n                    gameNumber={gameNumber}\r\n                    gameStatus={getGameStatus()}\r\n                    moveNumber={moveNumber()}\r\n                    // handleUndoClick={handleUndoClick}\r\n                    handleNewGameClick={handleNewGameClick}\r\n                    handleDifficultyModeChange={handleDifficultyModeChange}\r\n                    difficultyMode={difficultyMode}\r\n                    // setDifficultyMode={setDifficultyMode}\r\n                />\r\n            </Box>\r\n        </Container>\r\n    );\r\n    \r\n\r\n\r\n    // CLICK HANDLERS\r\n    function handleCardClick(cardClicked) {\r\n        console.log(`handleCardClick called with cardId: ${cardClicked} `)\r\n        if (botGoesNext()){\r\n            console.log(\"NO EFFECT. Be patient, the bot takes half a second to move. \")\r\n            return 1;\r\n        }\r\n        else if (moveList.includes(cardClicked)) {\r\n            console.log(\"NO EFFECT. That number has already been claimed.\")\r\n            return 1;\r\n        }\r\n        else if (gameOver(moveList)) {\r\n            console.log(\"NO EFFECT. The Game is already over.\")\r\n            return 1;\r\n        }\r\n        else {\r\n            let updatedMoveList = moveList.concat(cardClicked)\r\n            console.log(`updatedMoveList: ${updatedMoveList} `)\r\n            setMoveList(updatedMoveList);\r\n            if (gameOver(updatedMoveList)) {\r\n                handleGameOver(updatedMoveList);\r\n            } else {\r\n                handleBotsTurn(updatedMoveList);\r\n            }\r\n            return 0;\r\n        }\r\n    }\r\n    // function handleUndoClick(ml = moveList) {\r\n    //     const shortenedMoveList = ml.slice(0, ml.length - 2)\r\n    //     console.log(`handleUndoButtonClick() removed ${ml[ml.length - 1]} and ${ml[ml.length - 2]} . New Shortened history: ${shortenedMoveList}`);\r\n    //     setMoveList(shortenedMoveList);\r\n    // }\r\n    function handleNewGameClick() {\r\n        const empty = [];\r\n        const nextGameNumber = ++gameNumber;\r\n        \r\n        setMoveList(empty);\r\n        setGameNumber(nextGameNumber);\r\n        if (botGoesFirst(nextGameNumber)) {\r\n            handleBotsTurn(empty);\r\n        }\r\n    }\r\n\r\n    function handleDifficultyModeChange(value) {\r\n        console.assert((value === 'easy' || value === 'medium' || value === 'hard'))\r\n        setDifficultyMode(value)\r\n        setMoveList([]);\r\n        setGameNumber(1)\r\n        setRecord([0, 0, 0])\r\n    }\r\n\r\n    \r\n    \r\n    function handleGameOver(ml = moveList) {\r\n        if (!gameOver(ml)) {\r\n            console.error(`NO EFFECT. handleGameOver called but the game isn't actually over!!!!!!!!!!!!!!`)\r\n            return;\r\n        }\r\n        \r\n        \r\n        let result = getGameStatus(ml);\r\n        \r\n        if (result === \"Game Over. Draw.\"){\r\n            setRecord([record[0], record[1], ++record[2]])\r\n        }\r\n        else if (result === \"Player Wins!\") {\r\n            setRecord([++record[0], record[1], record[2]])\r\n        }\r\n        else if (result === \"Bot Wins!\") {\r\n            setRecord([record[0], ++record[1], record[2]])\r\n        }\r\n        else {\r\n            console.error(`handleGameOver called with invalid game result: ${result}`)\r\n        }\r\n    }\r\n\r\n\r\n    function getGameStatus(ml = moveList) {\r\n        if (gameOver(ml)) {\r\n            if (thereIsAWinIn(firstPlayersMoves(ml))) {\r\n                // console.log(`There is a win in the first players moves and botGoesFirst = ${botGoesFirst()}`)\r\n                return (botGoesFirst()) ? `Bot Wins!` : `Player Wins!` \r\n            }\r\n            if (thereIsAWinIn(secondPlayersMoves(ml))) {\r\n                // console.log(`There is a win in the second players moves and botGoesFirst = ${botGoesFirst()}`)\r\n                return (botGoesFirst()) ? `Player Wins!` : `Bot Wins!`\r\n            }\r\n            else {\r\n                return (`Game Over. Draw.`)\r\n            } \r\n        } else {\r\n            // if (botGoesFirst() && ml.length % 2 === 0) {\r\n            //     return (`Bot's turn.`)\r\n            // }\r\n            // if (!botGoesFirst() && ml.length % 2 === 1) {\r\n            //     return (`Bot's turn.`)\r\n            // }\r\n            if (botGoesNext(gameNumber, ml)) {\r\n                return (`Bot's turn.`)\r\n            }\r\n            else {\r\n                return (`Player's turn.`)\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function other(player) {\r\n        if (player !== 'playerOne' && player !== 'playerTwo') { console.error(`other(player) called with invalid player: ${player}`) }\r\n        return (player === 'playerOne') ? 'playerTwo' : 'playerOne';\r\n    }\r\n\r\n    \r\n    \r\n    // Optomized to return early in as many cases as possible. \r\n    function gameOver(ml = moveList) {\r\n        // Return early if not enough moves have been made OR if the game record has been updated but not the game number. handleGameOver updates the record and handleNewGameClick updates the gameNumber. \r\n        if (ml.length < 5) {\r\n            return false;\r\n        } \r\n        if (thereIsAWinIn(firstPlayersMoves(ml))) {\r\n            return true;\r\n        }\r\n        if (thereIsAWinIn(secondPlayersMoves(ml))) {\r\n            return true;\r\n        } \r\n        if (ml.length === 9) {\r\n            return true;\r\n        } \r\n    }\r\n    \r\n\r\n    // There is a subset of three numbers that sum to 15.  \r\n    // A \"moveList\" is an alternating sequence of both players' moves.  \r\n    // \"moveSet\" distinguishes that this is pre-filtered to contain only moves of one player or the other. \r\n    function thereIsAWinIn(moveSet) {\r\n        return (sumsOfThree(moveSet).includes(15)); // sumsOfThree() has a built in early return in case myMoves.length > 3\r\n    }\r\n        \r\n\r\n    // MOVELIST FILTERS  \r\n    function firstPlayersMoves(ml = moveList) {\r\n        return ml.filter((move, turnNumber) => turnNumber % 2 === 0)\r\n    }\r\n    function secondPlayersMoves(ml = moveList) {\r\n        return ml.filter((move, turnNumber) => turnNumber % 2 === 1)\r\n    }\r\n    function getBotsNumbers(ml = moveList) {\r\n        let botsNumbers = (botGoesFirst()) ? firstPlayersMoves(ml) : secondPlayersMoves(ml);\r\n        // console.log(`Bots Numbers: ${botsNumbers}`)\r\n        return botsNumbers;\r\n    }\r\n    function getPlayersNumbers(ml = moveList) {\r\n        let playersNumbers = (!botGoesFirst()) ? firstPlayersMoves(ml) : secondPlayersMoves(ml);\r\n        // console.log(`Players Numbers: ${playersNumbers}`)\r\n        return playersNumbers;\r\n    }\r\n    function intersect(listOne, listTwo) {\r\n        let intersection = Array(0).concat(listOne.filter(number => listTwo.includes(number)))\r\n        // console.log(`intersection of listOne: ${listOne}  and listTwo: ${listTwo}  is: ${intersection} `)\r\n        return intersection;\r\n    }\r\n\r\n\r\n    function unclaimedNumbers(ml = moveList) {\r\n        let unclaimed = [];\r\n        for (let i = 1; i <= 9; i++){\r\n            if (!ml.includes(i)){\r\n                unclaimed.push(i)\r\n            }\r\n        }\r\n        return unclaimed;\r\n    }\r\n\r\n    \r\n\r\n    function complementOf(sumOfTwo) {\r\n        return (15 - sumOfTwo)\r\n    }\r\n\r\n    // An array listing the element-sums of each three-element subset of the moveSet. \r\n    function sumsOfThree(moveSet) {\r\n        // nested loops don't scale but here they don't need to! moveSet max length = 5 and 5 choose 3 is only 10!\r\n        let sums = [];\r\n        if (moveSet.length < 3) {\r\n            return sums;\r\n        }\r\n        for (let i = 0; i < moveSet.length - 2; i++) {\r\n            for (let j = i + 1; j < moveSet.length - 1; j++) {\r\n                for (let k = j + 1; k < moveSet.length; k++) {\r\n                    let sum = moveSet[i] + moveSet[j] + moveSet[k];\r\n                    sums = sums.concat(sum);\r\n                }\r\n            }\r\n        }\r\n        // console.log(`Sums of three-element subsets of ${moveSet} are: ${sums}`)\r\n        return sums;\r\n    }\r\n\r\n    // An array listing the element-sums of each two-element subset of the moveSet. \r\n    function sumsOfTwo(moveSet) {\r\n        // nested loops don't scale but here they don't need to! moveSet max length = 5 and 5 choose 2 is only 10!\r\n        let sums = [];\r\n        if (moveSet.length < 2) {\r\n            return sums;\r\n        }\r\n        for (let i = 0; i < moveSet.length - 1; i++) {\r\n            for (let j = i + 1; j < moveSet.length; j++) {\r\n                let sum = moveSet[i] + moveSet[j];\r\n                // console.log(`Sum of i + j: ${sum}`)\r\n                sums.push(sum);\r\n            }\r\n        }\r\n        // console.log(`Sums of two-element subsets of ${moveSet} are: ${sums}`)\r\n        return sums;\r\n    }\r\n\r\n\r\n    // Find and make a move for the Bot with a slight delay. \r\n    function handleBotsTurn(ml = moveList) {\r\n        let botMove = getBotMove(ml)\r\n        \r\n        \r\n        console.log(`Bot selected move: ${botMove}`)\r\n        let updatedMoveList = ml.concat(botMove);\r\n        setTimeout(() => {\r\n            setMoveList(updatedMoveList);\r\n            if (gameOver(updatedMoveList)) {\r\n                console.log(\"Don't let player move again. Call handleGameOver instead.\")\r\n                handleGameOver(updatedMoveList);\r\n                return 1;\r\n            }\r\n        }, 800);\r\n    }\r\n\r\n    \r\n    // In order to not lose to the Edge opening, O must start by blocking ONE of the TWO trios X's first move is in.\r\n    // In order to not lose to the Corner opening, O must start by blocking ONE of the THREE trios X's first move is in, \r\n    //      by choosing the move that gives O the most footholds in unblocked lines possible.\r\n    // In order to not lose to the Center opening, O must start by blocking ONE of the FOUR trios X's first move is in, \r\n    //      by choosing the move that gives O the most footholds in unblocked lines possible, TWO.\r\n    // In every opening O must block \r\n\r\n    // X wins any game that starts with 3 even numbers.\r\n\r\n    function getBotMove(ml = moveList) {\r\n        let trios = getTrios(ml)\r\n\r\n        // In all modes EASY, MEDIUM, and HARD:\r\n        // Opening principles for each players first move then\r\n        // Win immediately if possible and defend if there is an urgent defensive move.\r\n        // In MEDIUM, and HARD modes:\r\n        // Create a double attack if an oportunity arises to do so.\r\n        // In HARD mode:\r\n        // Look for forcing moves that guarantee a chance to make a double attack next move.\r\n\r\n        if (ml.length === 0) {                              // FIRST MOVE\r\n            return selectMoveRandomly(unclaimedNumbers(ml))\r\n        }\r\n        else if (ml.length === 1 && difficultyMode === \"easy\") {  // SECOND MOVE Random in Easy mode\r\n            return selectMoveRandomly(unclaimedNumbers(ml))\r\n\r\n        }\r\n        else if (ml.length === 1) {                         // SECOND MOVE Sound in Medium and hard modes.\r\n            if (ml[0] === 5) {                              // CENTER OPENING\r\n                return selectMoveRandomly([2, 4, 6, 8]) \r\n            }\r\n            else if (ml[0] % 2 === 0) {                     // CORNER OPENING\r\n                return 5                                    \r\n            }\r\n            else if (ml[0] % 2 === 1) {                     // EDGE OPENING\r\n                return getNonurgentBlockingMove(trios)      \r\n            }\r\n        }\r\n        else if (ml.length >= 2) {                         // THIRD MOVE\r\n            // Starting from the third move it is possible O has made a mistake, so look for a forcingMove that leads to a double attack,\r\n            // If there is none, make any non-urgent blocking move.\r\n            let result = [easyProtocol(trios), mediumProtocol(trios), hardProtocol(trios), getNonurgentBlockingMove(trios)]\r\n            console.log(`PROTOCOL RESULTS:  easy: ${result[0]}, medium: ${result[1]}, hard: ${result[2]}, non-urgent blocking: ${result[3]}`)\r\n\r\n            if (difficultyMode === \"easy\") {\r\n                if (result[0] !== -1) {\r\n                    return result[0]\r\n                }\r\n                else {\r\n                    return selectMoveRandomly(unclaimedNumbers(ml))\r\n                }\r\n            }\r\n            else if (difficultyMode === \"medium\") {\r\n                for (let i = 0; i < 2; i++) {\r\n                    if (result[i] !== -1) {\r\n                        return result[i]\r\n                    }\r\n                }\r\n                return (result[3] === -1) ? selectMoveRandomly(unclaimedNumbers(ml)) : result[3]\r\n            }\r\n            else if (difficultyMode === \"hard\") {\r\n                for (let i = 0; i < 3; i++) {\r\n                    if (result[i] !== -1) {\r\n                        return result[i]\r\n                    }\r\n                }\r\n                return (result[3] === -1) ? selectMoveRandomly(unclaimedNumbers(ml)) : result[3]\r\n            }\r\n            else {\r\n                console.error(`difficultyMode has invalid setting: ${difficultyMode}`)\r\n                return -1\r\n            }\r\n        }\r\n    }\r\n\r\n    function easyProtocol(trios) {\r\n        let immediatelyWinningMoves = getImmediatelyWinningMoves(trios)\r\n        let urgentDefensiveMoves = getUrgentDefensiveMoves(trios)\r\n        if (immediatelyWinningMoves.length > 0) {\r\n            console.log(`BOT FOUND A WINNING MOVE: ${immediatelyWinningMoves}`)\r\n            return selectMoveRandomly(immediatelyWinningMoves)\r\n        }\r\n        else if (urgentDefensiveMoves.length > 1) {\r\n            console.error(`BOT Must have played inaccurately, there are now TWO URGENT DEFENSIVE MOVES: ${urgentDefensiveMoves}`)\r\n            return selectMoveRandomly(urgentDefensiveMoves)\r\n        }\r\n        else if (urgentDefensiveMoves.length > 0) {\r\n            console.log(`BOT FOUND AN URGENT DEFENSIVE MOVE: ${urgentDefensiveMoves}`)\r\n            return selectMoveRandomly(urgentDefensiveMoves)\r\n        }\r\n        else {\r\n            return -1\r\n        }\r\n    }\r\n    function mediumProtocol(trios) {\r\n        let doubleAttackingMoves = getDoubleAttackingMoves(trios)\r\n        if (doubleAttackingMoves.length > 0) {\r\n            console.log(`BOT FOUND DOUBLE ATTACK CREATING MOVES: ${doubleAttackingMoves}`)\r\n            return selectMoveRandomly(doubleAttackingMoves)\r\n        }\r\n        else {\r\n            return -1\r\n        }\r\n    }\r\n    // How the bot plays in HARD mode\r\n    // Given that there are no winning moves, urgent defensive moves, or double attack creating moves...\r\n    // LOOK FOR DISTANT FORCED WINS \r\n    function hardProtocol(trios) {\r\n        let distantForcedWins = getDistantForcedWins(trios)\r\n        if (distantForcedWins.length > 0) {\r\n            console.log(`BOT FOUND DISTANT WIN FORCING MOVES: ${distantForcedWins}`)\r\n            return selectMoveRandomly(distantForcedWins)\r\n        }\r\n        else {\r\n            return -1\r\n        }\r\n    }\r\n\r\n    function getNonurgentBlockingMove(trios) {\r\n        let blockingTrios = trios.filter(trio => (trio.botMoves === 0 && trio.playerMoves === 1))\r\n        let blockingMoves = blockingTrios.map(trio => trio.unclaimed).flat()\r\n        if (blockingMoves.length > 0) {\r\n            console.log(`BOT selecting a non-urgent BLOCKING MOVE from: ${blockingMoves}`)\r\n            return selectMoveRandomly(blockingMoves)\r\n        }\r\n        else {\r\n            return -1\r\n        }\r\n    }\r\n    \r\n    function noDuplicatesIn(array) {\r\n        let sorted = array.sort()\r\n        sorted.forEach((element, index, array) => {\r\n            if (element === array[index + 1]) {\r\n                return false\r\n            }\r\n        })\r\n        return true\r\n    }\r\n\r\n    // LOOKING AT TRIOS from the BOTS perspective\r\n    // A move is a mistake if making it results in any trio having botMoves = 0 && playerMoves = 2\r\n    // A move is a mistake if making it results in multiple trios having botMoves = 0 && playerMoves = 1 such \r\n    //    that the intersection of those trios unclaimedNubers is non-empty\r\n\r\n    \r\n    // distantForcedWins are a possibility on the third, fourth, and fifth moves of the game.\r\n    // however, on the fifth move if there is a distantForcedWin it is either the case that it is\r\n    // a forced good move or that there is also a doubleAttack that wins even quicker. \r\n    \r\n    \r\n    // First, identify the complete list of forcing moves,\r\n    // forEach, identify the forced defensive move that follows,\r\n    // forEach pair, create a hypothetical moveList by adding both of those moves\r\n    // use each hypothetical moveList in a call to getTrios()\r\n    // check the resulting trios[] for double attacking moves\r\n    //   1) if there is an urgent defensiveMove, take the intersection of this and the double attacking moves list.\r\n    //   2) otherwise see if there are any double attacking moves at all.\r\n    function getDistantForcedWins(trios) {\r\n        let distantWinForcingMoves = []\r\n        // Distant forced wins take FIVE moves to play out fully.  ensure there is room on the board.\r\n        if (moveList.length > 4) {\r\n            return distantWinForcingMoves\r\n        }\r\n\r\n        // they ALL happen to be forcing moves but being a forcing move is no guarantee of soundness inandofitself.\r\n        // You can force O to set up a distant forced win, a double attack, or to an easy draw.  \r\n        // Fortunately, since they are all forcing moves it is easy to analyse the set of responses to see\r\n        // which force O to good outcomes and which to bad.\r\n        // Whenever you force O to make a bad move you will have a double attack immediately available afterward.\r\n        // Remember that having a double attack immediately available means either your move next is not forced at all \r\n        // OR you are forced to create the double attack.\r\n        let triosWithOneBotMove = trios.filter(trio => (trio.botMoves === 1 && trio.playerMoves === 0))\r\n        \r\n        let forcingMoves = triosWithOneBotMove.map(trio => trio.unclaimed).flat()\r\n        console.assert(noDuplicatesIn(forcingMoves), 'There are duplicates in the forcingMoves list that were not identified as a double attack.')\r\n\r\n        forcingMoves.forEach(forcingMove => {\r\n            let testOne = moveList.concat(forcingMove)\r\n            let forcedMove = (getTrios(testOne).filter(trio => trio.botMoves === 2 && trio.playerMoves === 0)).map(trio => trio.unclaimed).flat()\r\n            let testTwo = moveList.concat(forcedMove)\r\n            let urgentDefensiveMoves = getUrgentDefensiveMoves(getTrios(testTwo))\r\n            let doubleAttackingMoves = getDoubleAttackingMoves(getTrios(testTwo))\r\n            console.log(`urgentDefensiveMoves: ${urgentDefensiveMoves}`)\r\n            console.log(`doubleAttackingMoves: ${doubleAttackingMoves}`)\r\n\r\n            if (urgentDefensiveMoves.length === 0 && doubleAttackingMoves.length > 0) {\r\n                console.log(`Bot has no urgent defensive moves and can make a double attack in the hypothetical position, meaning this forcing move is sound.`)\r\n                distantWinForcingMoves = distantWinForcingMoves.concat(forcingMove)\r\n            }\r\n            else if (urgentDefensiveMoves.length === 1 && intersect(urgentDefensiveMoves, doubleAttackingMoves).length > 0) {\r\n                console.log(`Bot is forced to make a double attack in the hypothetical position, meaning this forcing move is sound.`)\r\n                distantWinForcingMoves = distantWinForcingMoves.concat(forcingMove)\r\n            }\r\n        })\r\n        console.log(`distantWinForcingMoves: ${distantWinForcingMoves}`)\r\n        return distantWinForcingMoves\r\n    }\r\n    \r\n    \r\n\r\n    function getImmediatelyWinningMoves(trios) {\r\n        return trios.filter(trio => (trio.botMoves === 2 && trio.playerMoves === 0)).map(trio => trio.unclaimed)\r\n    }\r\n\r\n    function getUrgentDefensiveMoves(trios) {\r\n        return trios.filter(trio => (trio.botMoves === 0 && trio.playerMoves === 2)).map(trio => trio.unclaimed)\r\n    }\r\n\r\n    function getDoubleAttackingMoves(trios) {\r\n        // Filter out trios that opponent has already blocked AND trios that Bot has no moves in.\r\n        // In the list of unclaimed numbers in the trios where the bot has made the only move,\r\n        //    find duplicates by Filtering out the first occurance of each unclaimed number.\r\n        let attackingTrios = trios.filter(trio => (trio.botMoves === 1 && trio.playerMoves === 0))\r\n        let attackingMoves = attackingTrios.map(trio => trio.unclaimed).flat()\r\n        // BUG WARNING: Though attacking moves looks like a normal array when printed to the console...\r\n        // It is in fact an Array of two-element arrays.  To remedy this we must use Array.prototype.flat()\r\n\r\n        let doubleAttackingMoves = attackingMoves.filter((move, index, self) => (self.indexOf(move) !== index))\r\n        return doubleAttackingMoves\r\n    }\r\n\r\n    // This is the cousin of the TicTacToe Game's method lineCountsFor(player, moveList)\r\n    // Rather than having to specify player 1 or 2 and returning an array, this method counts for both\r\n    // the bot and player and returns an Array of trio Objects\r\n    function getTrios(ml = moveList) {\r\n        let botsNumbers = getBotsNumbers(ml)\r\n        let playersNumbers = getPlayersNumbers(ml)\r\n\r\n        let trios = []\r\n        let index = 0\r\n        for (let i = 1; i <= 7; i++) {\r\n            for (let j = i + 1; j <= 8; j++) {\r\n                let k = complementOf(i + j)\r\n                if (k > j && k <= 9) {\r\n                    let newTrio = [i, j, k]\r\n                    trios[index++] = {\r\n                        'trio': newTrio,\r\n                        'playerMoves': intersect(newTrio, playersNumbers).length, \r\n                        'botMoves': intersect(newTrio, botsNumbers).length,\r\n                        'unclaimed': intersect(newTrio, unclaimedNumbers(ml)) \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(trios)\r\n        return trios\r\n    }\r\n\r\n    \r\n\r\n    // Randomly selects a move from a list of possible next moves.  Depending on calling context this method can get a totally random unclaimed number or a random number from the listo of bestMoves or the list of mistakes. I considered giving this unclaimedNumbers() as default prop but decided that would lead to more potential debugging confusion than simply requiring a moveSet to be passed\r\n    function selectMoveRandomly(moveSet) {\r\n        // console.log(`selectMoveRandomly found these unclaimedNumbers: ${unclaimedNumbers(moveList)}`)\r\n        let randomMove = moveSet[Math.floor(Math.random() * moveSet.length)]\r\n        // console.log(`selectMoveRandomly chose ${randomMove} from the given moveSet: ${moveSet}`)\r\n        return randomMove;\r\n    }\r\n\r\n\r\n    \r\n    // function handleUndoButtonClick() {\r\n    //     const shortenedHistory = history.slice(0, history.length - 2)\r\n    //     console.log(`handleUndoButtonClick() removes both the most recent player move and bot move ${shortenedHistory}`);\r\n    //     setHistory(history.slice(0, history.length - 1));\r\n    //     setTimeout(() => {\r\n    //         setHistory(shortenedHistory);\r\n    //     }, 500);\r\n    //     return 0;\r\n    // }\r\n\r\n    // // winning combos are 2-number sets that would complete a win.\r\n    // // A two number combo is only winning if both of its numbers are yet unclaimed. \r\n    // // A number is part of a winning combo if \r\n    // //    1) it is unclaimed &&\r\n    // //    2) adding it to the \r\n    // function winningCombos(ml, moveSet) {\r\n    //     let winningCombos = []\r\n    //     let unclaimed = unclaimedNumbers(ml)\r\n    //     moveSet.forEach((myNumber) => {\r\n    //         unclaimed.forEach((secondNumber) => {\r\n    //             let thirdNumber = complementOf(myNumber + secondNumber)\r\n    //             if (unclaimed.includes(thirdNumber)) {\r\n    //                 winningCombos = winningCombos.concat(secondNumber, thirdNumber)\r\n    //             }\r\n    //         })\r\n    //     })\r\n\r\n    //     // Every number that appears on this list is expected to appear at least twice.\r\n    //     // If a number appears four times that indicates it is the focus of a double attack.\r\n    //     // console.log(`Winning Combos: ${winningCombos}`)\r\n    //     return winningCombos\r\n\r\n    //     // This list can be used to fin winning double attacks but may also help with more difficult situations.\r\n    //     // Can the bot find its best (forcing) move if there are no immediate wins and no double attacks by selecting \r\n    //     // the move that appears the most times on their list of threat creating moves combined with the oppponents\r\n    //     // list of threat creating moves?\r\n\r\n    // }\r\n    // function attackingMoves(ml, moveSet) {\r\n    //     let attackingMoves = []\r\n    //     let unclaimed = unclaimedNumbers(ml)\r\n    //     moveSet.forEach((myNumber) => {\r\n    //         unclaimed.forEach((secondNumber) => {\r\n    //             let thirdNumber = complementOf(myNumber + secondNumber)\r\n    //             if (unclaimed.includes(thirdNumber)) {\r\n    //                 attackingMoves = attackingMoves.concat(secondNumber, thirdNumber)\r\n    //             }\r\n    //         })\r\n    //     })\r\n\r\n    //     // Every number that appears on this list is expected to appear at least twice.\r\n    //     // If a number appears four times that indicates it is the focus of a double attack.\r\n    //     // console.log(`Winning Combos: ${winningCombos}`)\r\n    //     return attackingMoves\r\n\r\n    //     // This list can be used to fin winning double attacks but may also help with more difficult situations.\r\n    //     // Can the bot find its best (forcing) move if there are no immediate wins and no double attacks by selecting \r\n    //     // the move that appears the most times on their list of threat creating moves combined with the oppponents\r\n    //     // list of threat creating moves?\r\n    // }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n    \r\n","import React from 'react';\r\n\r\n// My Components\r\n\r\n\r\n// MUI  components\r\nimport Link from '@material-ui/core/Link';\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles({\r\n\r\n})\r\n\r\n\r\nexport default function MagicSquares() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root} >\r\n            The Magic Squares Page\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n// My Components\r\n\r\n\r\n// MUI  components\r\nimport Link from '@material-ui/core/Link';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\n\r\n// Custom Styling\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    root: {\r\n        // border: 'solid navy 1px',\r\n\r\n        width: '100%',\r\n        height: '100%',\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'start',\r\n        backgroundColor: '#ffffff',\r\n        height: '100%',\r\n        width: '100%',\r\n        boxSizing: 'border-box',\r\n        padding: '1rem',\r\n\r\n        borderRadius: 'inherit',\r\n        overflowY: 'scroll',\r\n    },\r\n    // title: {\r\n    //     fontSize: '1.3rem',\r\n    // },\r\n    // paragraph: {\r\n    //     // textIndent: '2rem',\r\n    //     paddingBottom: '0.7rem',\r\n    // },\r\n    // buttonArea: {\r\n    //     // border: 'solid red 1px',\r\n    //     display: 'flex',\r\n    //     marginBottom: '0.5rem',\r\n    //     width: '100%',\r\n\r\n    // },\r\n    // button: {\r\n    //     margin: 'auto',\r\n    //     width: '37%',\r\n    //     backgroundColor: theme.palette.primary.dark,\r\n    //     textAlign: 'center'\r\n    // },\r\n\r\n}));\r\n\r\n\r\nexport default function StrategyPage() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Box className={classes.root} >\r\n            The Strategy Page\r\n        </Box>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\n\r\nimport {\r\n    createMuiTheme,\r\n    makeStyles,\r\n    responsiveFontSizes,\r\n} from '@material-ui/core/styles';\r\n\r\n\r\n\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport green from '@material-ui/core/colors/green';\r\n// import { Button, createStyles } from '@material-ui/core';\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            light: '#669944',\r\n            main: '#2e6b12',\r\n            dark: '#004000',\r\n            contrastText: '#FFFFFF'\r\n        },\r\n        secondary: {\r\n            light: '#FFFFF',\r\n            main: '#669944',\r\n            dark: '#777777',\r\n            contrastText: '#FFFFFF'\r\n        },\r\n        text: {\r\n            primary: '#FFFFFF',\r\n            secondary: '#000000'\r\n        }\r\n    },\r\n    status: {\r\n        danger: 'orange',\r\n    },\r\n    shape: {\r\n        borderRadius: 8,\r\n    },\r\n    spacing: 8,\r\n\r\n});\r\n\r\n\r\nexport default responsiveFontSizes(theme);\r\n\r\n","import React from 'react';\r\nimport {\r\n    HashRouter as Router,\r\n    Link as RouterLink,\r\n    Route,\r\n    Switch\r\n} from \"react-router-dom\";\r\n\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\n// My Components & Pages\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport WelcomePage from \"./pages/WelcomePage\";\r\nimport TicTacToeGame from './components/TicTacToe/TicTacToeGame';\r\nimport FifteenGame from './components/FifteenGame/FifteenGame';\r\nimport MagicSquares from \"./pages/MagicSquares\";\r\nimport StrategyPage from \"./pages/StrategyPage\";\r\n\r\n// MUI  components\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Box from '@material-ui/core/Box';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// THEMING\r\nimport theme from \"./theme\";\r\nimport {\r\n    makeStyles,\r\n    ThemeProvider,\r\n} from '@material-ui/core/styles';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n        width: '100vw',\r\n        backgroundColor: theme.palette.common.black,\r\n\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        // justifyContent: 'center',\r\n        // alignItems: 'stretch',\r\n        overflowY: 'scroll',\r\n        overflowX: 'hidden',\r\n\r\n    },\r\n    container: {\r\n        // maxWidth='md' --> max-width: 960px;\r\n        // border: 'solid red 1px',\r\n        backgroundColor: theme.palette.common.black,\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    \r\n}))\r\n\r\n\r\nexport default function App() {\r\n    const classes = useStyles();\r\n    const [pageTitle, setPageTitle] = React.useState(\"Welcome\");\r\n  \r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <ThemeProvider theme={theme}>\r\n                <Box className={classes.root} >\r\n                    <Container className={classes.container} maxWidth='md' disableGutters>  \r\n                        <Router>\r\n                            <Switch>\r\n                                <Route exact path=\"/\">\r\n                                    <Navbar pageTitle={\"Welcome\"} />\r\n                                    <WelcomePage />\r\n                                </Route>\r\n\r\n                                <Route path=\"/play_tic_tac_toe\">\r\n                                    <Navbar pageTitle={\"Play Tic Tac Toe\"} />\r\n                                    <TicTacToeGame \r\n                                        mode='play'\r\n                                    />\r\n                                </Route>\r\n\r\n                                <Route path=\"/learn_tic_tac_toe\">\r\n                                    <Navbar pageTitle={\"Learn Tic Tac Toe Strategy\"} />\r\n                                    <TicTacToeGame\r\n                                        mode='learn'\r\n                                    />\r\n                                </Route>    \r\n\r\n                                <Route path=\"/fifteen_game\">\r\n                                    <Navbar pageTitle={\"Play the Fifteen Game\"} />\r\n                                    <FifteenGame />\r\n                                </Route>\r\n\r\n                                <Route path=\"/magic_squares\">\r\n                                    <Navbar pageTitle={\"Learn about Magic Squares\"} />\r\n                                    <MagicSquares />\r\n                                </Route>\r\n\r\n\r\n                            </Switch>\r\n                        </Router>\r\n                    </Container>\r\n                </Box>\r\n            </ThemeProvider>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n//   <React.StrictMode>\r\n    <App />,\r\n//   </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/nsgLogoSnipped.a2170e48.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}